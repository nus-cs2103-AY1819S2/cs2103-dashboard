[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d slaveFinder()"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W15-3/main[image:https://travis-ci.org/CS2103-AY1819S2-W15-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/WeeSooJun/main[image:https://ci.appveyor.com/api/projects/status/6sdm7tsfki1ubrcf?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W15-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W15-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/98250edf8ec845508bf9e8ef17dd2118[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/WeeSooJun/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S2-W15-3/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop HR application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "WeeSooJun": 1
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-W15-3/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 235,
      "CaesarTY": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "slaveFinder() was developed by W15-3. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003d\u003d\u003d Chiu Yu Hua"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "image::chiuyuhua.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "{empty}[http://www.chiuyuhua.com[homepage]] [https://github.com/chiuyuhua[github]] [\u003c\u003cchiuyuhua#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Daniel Sim"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "image::danieldssim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/DanielDSSim[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ong Suyi"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::suyi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/COGnitiveAspian[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d Teng Yun"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "image::caesarty.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "{empty}[http://github.com/caesarty[github]] [\u003c\u003ccaesarty#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d Wee Soo Jun"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "image::weesoojun.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "{empty}[http://github.com/weesoojun[github]] [\u003c\u003cWeeSooJun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 3,
      "-": 44,
      "WeeSooJun": 5,
      "CaesarTY": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "﻿\u003d slaveFinder() - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W15-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `W15-3`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "// tag::interviews[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d Interviews Feature"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "The interviews and its functionalities are facilitated by the Interviews class."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "It is a field present in the versionedAddressBook, therefore it works naturally with the implemented undo/redo operation in slaveFinder()."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "(Show is not counted as an operation and hence it is not saved as a state)."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "The Interview class acts as an association class between calendar and person."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "image::InterviewsAssociationClass.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "For the generate command. There are total 2 parameters that determines how the interviews list is generated."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "The 2 parameters are: maxInterviewsADay and blockOutDates."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "maxInterviewsADay determines the number of interviews that can be scheduled a day and it is saved in the interviews class"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "blockOutDates are the user\u0027s own block out dates which represent unavailable dates that the user is not free and therefore interviews cannot be scheduled."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Another thing to note is that weekends are not considered in the scheduled as the user is assumed to have normal working hours from Monday to Friday."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Given below is the sequence diagram for generateInterviews:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "image::GenerateInterviewsDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "An example of generateInterviews:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Step 1. User launches the application. The blockOutDates field in the interviews class is currently empty."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Step 2. User sets the block out dates with the respective command. User does not change the max interviews a day and it it set to a default value."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Step 3. User request for interviews to be generated."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Step 4. Interviews are generated with the restriction based on the parameters and working hours of a normal working adult."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "// end::interviews[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|`* * *` |HR |delete a person |reject applicants not suited for the job"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|`* * *` |HR |get the best people for a job |please my boss"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "|`* * *` |HR |look at the analytics of the job applicants | to review the quality of job applicants and ensure a better hiring process"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|`* * *` |HR |easily store all txt resumes in slaveFinder() |be more efficient"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|`* * *` |HR |arrange interview dates quickly |to be more efficient in finding the right person for the job"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|`* *` |HR |look at the list of applicants I have narrowed down |send them to boss for approval"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "(For all use cases below, the *System* is the `slaveFinder()` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "2.  slaveFinder() shows a list of persons"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "4.  slaveFinder() deletes the person"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d Use case: Generate and show interview dates"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "1. User requests to arrange interview dates for applicants in slaveFinder()"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "2. slaveFinder() assigns to each interviewee a date"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "3. User request for the interview dates list"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "+"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* 1a. User wants to set block out dates so no dates are arranged on that day."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** 1a1. Block out dates set using the command."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "+"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* 1b. User wants to set maximum interviews a day"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** 1b1. Max interviews a day set by using"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "+"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* 3a. User is not satisfied with the dates"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** 3a1. User request to reassign a person to another date"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** 3a2. slaveFinder() reassigns that person"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** 3a3. slaveFinder() shows the updated interviews dates"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d Use case: Clear interview dates"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "1. User request to clear interviews"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "2. slaveFinder() clears interviews"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* 3a. User wants to recover the cleared interviews through undo"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* 3b. slaveFinder() undos the clear interview operation"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* 3c. Previous interview dates are recovered."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "+"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d Use case: Search person"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "2.  slaveFinder() shows a list of persons"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "3.  User requests to search persons fulfill some requirements in the list"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "4.  slaveFinder() shows a list of target persons"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* 3a. The given command is invalid."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "+"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003d\u003d\u003d Use case: View Analytics"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "1. User requests to display lists of person from job lists"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "2. slaveFinder() shows lists of persons"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "3. User requests to view analytics for specific list of persons"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "4. slaveFinder() shows analytics results"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "+"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d Filtering a list of persons"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ". Filtering a list of person while all persons are listed"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ".. Prerequisites: Create a job object using the `createJob` command. Display job list using the `DisplayJob` command. 4 lists of persons +"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "   will show."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ".. Test case: `filter a m/CS` +"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "   Expected: All persons with major CS in \"Applicant\" list will show on the list"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ".. Test case: `search none` +"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "   Expected: List unchangeed. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ".. Other incorrect delete commands to try: `search`, `search x/` (where x is not any prefix) _{give more}_ +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 15,
      "-": 950,
      "CaesarTY": 41,
      "WeeSooJun": 93
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "﻿\u003d slaveFinder() - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W15-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team 15-3`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "slaveFinder() is a resume management software for those who *prefer to use a desktop app for managing contacts*. More importantly, slaveFinder() is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, slaveFinder() can get your resume management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "image::DisplayJob.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* *`list`* : lists all applicants and job openings"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* *`clear`* : clears the software of all applicants and job openings"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [pj/PASTJOB]` can be used as `n/John Doe pj/Software-Engineer` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[pj/PASTJOB]...` can be used as `{nbsp}` (i.e. 0 times), `pj/Software-Engineer`, `pj/Software-Engineer pj/Web-Developer` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d Basic Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Viet Phone: 86128655 Email: pdnm@cp.com Nric: S0129574R Gender: Male Race: Others Address: 123 Disney School: NUS Major: Computer Science Grade: 5.00 Interview Scores: No Record Past jobs:  Known Programming Languag"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER nric/NRIC e/EMAIL a/ADDRESS g/GENDER r/RACE m/MAJOR s/SCHOOL gr/GRADE j/JOBS_APPLY`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `n/`: Name should only contain alphanumeric characters and spaces, and should not be empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `a/`: Address can take any values, but should not be empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `nric/`: NRIC must be unique. It must start with S, followed by exactly 7 numbers, and end with an alpabet in capital letter. It should not be empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `p/`: Phone numbers should only contain numbers, and it should be at least 3 digits long, and should not be empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `e/`: Email should be of the format local-part@domain, and should not be empty. \"E.g. example@gmail.com\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `g/`: Gender should only be \"Female\", \"Male\" or \"Others\", and should not be empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `r/`: Race should only be \"Chinese\", \"Malay\", \"Indian\" or \"Others\", and should not be empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `gr/`: Grade should only contain positive numbers, and must be in exactly 2 decimal place. E.g. \"4.64\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `s/`: School can take any values, but should not be empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `m/`: Major should only contain alphanumeric characters and spaces, and should not be empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `j/`: Jobs Apply must only contain one word. If two or more words, have to be connected by a dash. E.g. \"Software-Engineer\". It should not be empty. It can take more than 1 value. E.g. \"j/Manager j/Sweeper\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `is/`: Interview scores field is optional, and must be exactly 5 set of numbers, each seperated by a comma. E.g. \"1,2,3,4,5\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `kpl/`: Known Programming Language field is optional. It can take any values, and can take more than 1 value. E.g. \"kpl/Java kpl/Python\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `pj/`: Past jobs field is optional, and past job must only contain one word. If two or more words, have to be connected by a dash. E.g. \"Software-Engineer\". It can take more than 1 value E.g. \"pj/Manager pj/Sweeper\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `add n/John p/91757536 nric/S8761230Q e/john@example.com a/123 Disneyland g/Male r/Malay m/Psychology s/NUS gr/4.33 j/Manager`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `add n/Betty p/123 nric/S4444455Y e/betty@bet.com a/321 USS g/Female r/Others m/Life Science s/NTU gr/0.44 j/Helper is/1,2,1,10,5 kpl/Java pj/Chief-Executive-Officer`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Shows a list of all job openings and applicants in the slave system. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `Useful after using filter/displayJob which shows a subset of the list.`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Format: `edit INDEX n/NAME p/PHONE_NUMBER nric/NRIC e/EMAIL a/ADDRESS g/GENDER r/RACE m/MAJOR s/SCHOOL gr/GRADE j/JOBS_APPLY`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* Editting fields that allows more than 1 value will entirely replace the existing values."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `edit 2 n/Betsy Crower` pj/Manager +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing past jobs and replace it with \u0027Manager\"."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit`, `clear`, `createJob`, `deleteJob`, generateInterviews, setMaxInterviewsADay, setBlockOutDates, clearInterviews, filter, delete filter )."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `edit 1 n/Johnny` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "`undo` (reverses the `edit 1 n/Johnny` command) +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `edit 1 n/Johnny` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "`undo` (reverses the `edit 1 n/Johnny` command) +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "`redo` (reapplies the `edit 1 n/Johnny` command) +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `edit 1 n/Johnny` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `edit 1 n/Johnny` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "`undo` (reverses the `edit 1 n/Johnny` command) +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "`redo` (reapplies the `edit 1 n/Johnny` command) +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d HR Related Features"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Import Resumes to slaveFinder() : `importResumes`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Given input resume txt files in placed in the specified folder, reads all the resumes and saves them into slaveFinder()."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Format : `importResumes path_to_folder`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* All the resume documents should be txt files and strictly follow the below format."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Name"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Phone"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Email"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "NRIC"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Gender"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Race"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Address"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "School"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Major"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Grade"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Lang,Lang,Lang"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "pastJob,pastJob,pastJob"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "jobsApply,jobsApply,jobsApply"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "interviewScore"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* All fields are to be populated, except for Programming Languages, Past Jobs, and Jobs Applied"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "** For these fields, specify any number of items (zero or more), separated by commas"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* All the resume documents should be stored in one folder."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* If the new added people is a new person to our company, slaveFinder will crawl the data from resume and add him/her as ADD command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* If the new added people is a person already in our storage, slaveFinder will crawl the data from resume and change his/her data as EDIT command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `importResumes C:\\Users\\MyName\\Desktop\\MyResumes` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Imports all resumes in the given path"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d\u003d\u003d Create a Job Hiring Process: `createjob`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Create a Job hiring process with four person lists: \"All Applicants\", \"KIV\", \"Interview\", \"Shortlist\". +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Format : `createJob jn/JOBNAME`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* JOBNAME indicate the job name. For example: `IOS-Developer`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* All people in the storage who want to apply this job will automatically be added in \"Applied\" list. `Coming in v1.4`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* All people in \"Applied\" list will show on the display list after this command. `Coming in v1.4`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* A label with JOBNAME will show on the display board to indicate the current Job Hiring Process. `Coming in v1.4`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d\u003d\u003d Delete the Job Hiring Process : `deletejob`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Delete a Job Hiring Process and all its information +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Format : `deleteJob jn/JOBNAME`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d\u003d\u003d Add all shown persons to a job : `addAll`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Adds all currently shown people to the \"All Applicants\" list of a job +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Format : `addAll jn/JOBNAME`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Filter function can be used to filter those who applied for the job before using this command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "****"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d\u003d\u003d Add a specific person to Job using NRIC : `addPersonToJob`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Adds person with NRIC to \"All Applicants\" list of a job +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Format : `addPersonToJob jn/JOBNAME nric/NRIC`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d\u003d\u003d Displays one of the four persons list in a job : `DisplayJob`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Displays LISTNUMBERth list of a Job +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Format : `DisplayJob ln/LISTNUMBER jn/JOBNAME`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "****"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* Displays all four lists at once `Coming in v1.4`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "****"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d\u003d\u003d Moves person of NRIC from one list to another in a Job: `movePerson`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Moves a person of NRIC from list \"from\" to list \"to\" in a job +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "Format : `movePerson jn/JOBNAME nric/NRIC ln/FROM ln/TO`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* FROM and TO must be 0 to 3 as there are only 4 lists"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* Move a selected few people at a time `Coming in v1.4`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Switch a Job Hiring Process: `switchjob` `Coming in v1.4`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Switch to another Job Hiring Process. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format : `switchjob JOBNAME`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* All people in \"Applied\" list in the new Job Hiring Process will show on the display list after this command."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* JOBNAME label will change after this command."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Filter results : `filter`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Filter the people displayed on the Person List. Each filer has a name and can be delete, diplay result always base on all filter request. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format: `filter [FILTERLISTNAME] fn/FILTERNAME [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [g/GENDER] [r/RACE] [s/SCHOOL] [pj/PAST_JOBS]...`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Filter have two mode, when Screen is All JOb Showing Screen (Jobs Open List shows), FILTERLISTNAME should be empty."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* When Screen is Job Detail Screen (4 job lists shows), FILTERLISTNAME is needed."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* FILTERLISTNAME indicate which Job list this command will used."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* FILTERLISTNAME can be full name of the job lists such as \"Applicant\", \"KIV\", \"Interview\", \"Shortlist\"."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* FILTERLISTNAME also can be prefix of the job lists such as \"a\", \"k\", \"i\", \"s\"."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Multiple filters can be added to filter people. All the filter labels will show on the display board."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Display board always display people base on all undeleted filters."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* `filter fn/nus s/nus` + "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Shows all persons whose school is NUS. "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a filter : `deleteFilter`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Delete a filter showing on the display board and renew the update display people list. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format: `deleteFilter FILTERNAME`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Multiple filters can be deleted in one command."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Display board always display people base on all undeleted filters."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* `filter fn/nus s/nus` + "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Shows all persons whose school is NUS. "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* `deleteFilter nus`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Shows all persons."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003d\u003d\u003d\u003d Display Analytics : `analytics`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Display the analytics of applicants for desired job list (applicant, kiv, interview, shortlist) or all applicants"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Format : `analytics LISTNAME` or  `analytics` (for all applicants)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "****"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* LISTNAME indicate which Job list this command will be used."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* LISTNAME can are the names of job lists such as \"applicant\", \"kiv\", \"interview\", \"shortlist\"."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* If no LISTNAME is entered, the analytis of all applicants in the slave system will be shown."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* If have never used the `DisplayJob` command before, using `analytics LISTNAME` will be empty analytics."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* If on all applicants and all jobs page, `analytics LISTNAME` will display analytics on the job last displayed using command `DisplayJob`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "****"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `analytics applicant` "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `analytics kiv`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* `analytics`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\u003d\u003d\u003d\u003d Select people into \"Interview\" List: `selectInterview` `Coming in v1.4`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Select people from display board to the Job Hiring Process\u0027s \"Interviewed\" list +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format : `selectInterview [INDEX] [INDEX-INDEX] [all]`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* You can add all people on the Person Display List to the \"Interview\" list by using `all` parameter."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* `selectInterview 2-10` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Selects the 2nd person to 10th people to the \"Interview\" list."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* `selectInterview 2 4`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Selects the 2nd person and 4th people to the \"Interview\" list."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* `selectInterview all`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Selects all the people on the Person Display List to the \"Interview\" list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003d\u003d\u003d\u003d Select people into \"To be sent to boss\" List: `selectfinal` `Coming in v2.0`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Select people from display board to the Job Hiring Process\u0027s \"To be sent to boss\" List +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format : `selectInterview [INDEX] [INDEX-INDEX] [all]`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* You can add all people on the Person Display List to the \"To be sent to boss\" list by using `all` parameter."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "// tag::interviews[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d\u003d Generate Interview Dates : `generateInterviews`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Generate interview dates for applicants in slaveFinder()."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Interview dates cannot be generated again if they are already present."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Dates generated exclude weekends and block out dates(see below)."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Format : `generateInterviews`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d\u003d Clear Interview Dates : `clearInterviews`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Clears the list of generated interview dates."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d\u003d Set maximum number of interviews a day : `setMaxInterviewsADay [NUMBER]`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Sets the maximum number of interviews to be generated in a day."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d\u003d Set block out dates for interviews : `setBlockOutDates [DD/MM/YYYY] OR [DD/MM/YYYY - DD/MM/YYYY] OR [DD/MM/YYYY], [DD/MM/YYYY - DD/MM/YYYY]`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Sets the block out dates(unavailable dates) which the interviewer is not available for interviews to be scheduled."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d\u003d\u003d Show interviews dates : `showInterviews`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "Shows the list of dates which the interviewees in slaveFinder() are assigned."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "// end::interviews[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003d\u003d\u003d\u003d Generate a final report for the Job Hiring Process : `report` `Coming in v2.0`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Generate `report.txt` to show 3 categories of applicants for a specific role:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "\"Applied\", \"Interview\", \"To be sent to boss\". in a Job Hiring Process. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "Format : `report JOBNAME`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS g/GENDER r/RACE m/MAJOR s/SCHOOL [pj/PAST_JOB]... ` +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "g/Male r/Chinese m/MATH s/NUS pj/Professor t/friend t/colleague`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "[g/GENDER] [r/RACE] [s/SCHOOL] [pj/PAST_JOBS] ` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Search* : `search [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "[g/GENDER] [r/RACE] [s/SCHOOL] [pj/PAST_JOBS] ` +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "e.g. `search s/NUS`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Arrange Interviews* : `arrangeInterviews`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Read to slaveFinder()* : `readAll`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Get ranked list* : `getRankedList`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Filter search results* : `filter [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "[g/GENDER] [r/RACE] [s/SCHOOL] [pj/PAST_JOBS] ` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "e.g. `filter r/Chinese`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Display Hiring Process* : `displayProcess`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "* *Display Analytics* : `analytics LISTNAME` or `analytics`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Create Job* : `createJob jn/JOBNAME`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Delete Job* : `deleteJob jn/JOBNAME`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Add list of people to Job* : `addAll jn/JOBNAME`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Add specific person to Job* : `addPersonToJob jn/JOBNAME nric/NRIC`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Display selected list in Job* : `DisplayJob ln/LISTNUMBER jn/JOBNAME`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Moves person from one list in Job to another* : `movePerson jn/JOBNAME nric/NRIC ln/FROM ln/TO`"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 59,
      "-": 215,
      "DanielDSSim": 50,
      "CaesarTY": 136,
      "WeeSooJun": 37
    }
  },
  {
    "path": "docs/team/WeeSooJun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d Wee Soo Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d PROJECT: slaveFinder()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "slaveFinder() is a desktop address book application used for people in the HR department of a company to help them filter people and schedule interviews. It also helps with analytics of the hiring process in the company."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Major enhancement*: added *Interview scheduling*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** What it does: allows the user to schedule interviews with block out dates."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Justification: This feature improves the product significantly because a user can improve his/her productivity as the app can take over the task of scheduling to the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Minor enhancement*: Added a school field which helped in the ranking and filtering of individuals for interviews"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*** Managed release `v1.3` on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*** Updated Model Component image of slaveFinder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W15-3/main/pull/44[#44]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "*** Integrated TravisCI, Appveyor, Codacy, and Coveralls to team repo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "include::../UserGuide.adoc[tag\u003dinterviews]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dinterviews]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 61
    }
  },
  {
    "path": "docs/team/danieldssim.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d Daniel Sim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d PROJECT: slaveFinder()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "slaveFinder() is a desktop address book application used for people in the HR department of a company to help them filter people and schedule interviews. It also helps with analytics of the hiring process in the company."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Major enhancement*: added *Job manipulation functionality*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** What it does: Allows users to interact with new Job object by creating and deleting jobs as well as adding, removing and moving people within the lists contained in job."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Justification: This feature allows the user to contain data for more than one job opening as well as to indicate progress of candidates through the job application process."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Highlights: Implementation of this class required a modification of the addressbook application across all components. Base addressbook database was enhanced to not only contain a database of people but also a database of jobs. Add command was modified to automatically add people who have applied for an available job to the first list (\"applicants\") of the job. When a job is created, all applicants for the specific job are automatically added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Minor enhancement*: Added a major field and known programming language field which helps in the ranking and filtering of individuals for interviews"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Code contributed*:https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dgithbub_username_in_lower_case (replace githbub_username_in_lower_case"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "*** Managed release `v1.3` on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "*** Updated Model Component image of slaveFinder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W15-3/main/pull/44[#44]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "*** Integrated TravisCI, Appveyor, Codacy, and Coveralls to team repo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dinterviews]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dinterviews]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing slaveFinder() ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        logger.info(\"Starting slaveFinder() \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 184,
      "WeeSooJun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid.\\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_INVALID_PREAMBLE \u003d \"The preamble information has wrong format.\\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "CaesarTY": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns true if the {@code word} in the range of {@code sentence}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *       valueInRange(\"1.5-2.0\", \"1.75\") \u003d\u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *       valueInRange(\"1.5-2.0\", \"1.5\") \u003d\u003d true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *       valueInRange(\"1.5-2.0\", \"2.0\") \u003d\u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static boolean valueInRange(String sentence, String word) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        float value \u003d Float.parseFloat(word);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String preppedSentence \u003d sentence.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        checkArgument(!preppedSentence.isEmpty(), \"Range parameter cannot be empty\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        int rangeParaSize \u003d preppedSentence.split(\"-\").length;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        checkArgument(rangeParaSize \u003d\u003d 2, \"Range parameter format wrong\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String[] values \u003d preppedSentence.split(\"-\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String preppedUpperBound \u003d values[1].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String preppedLowerBound \u003d values[0].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Boolean isValueSmallerThanUpper \u003d value \u003c\u003d Float.parseFloat(preppedUpperBound);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Boolean isValueBiggerThanLower \u003d value \u003e\u003d Float.parseFloat(preppedLowerBound);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return isValueSmallerThanUpper \u0026\u0026 isValueBiggerThanLower;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static String getSetString(Set s) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (Object obj : s) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (obj instanceof JobsApply) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                String jobsApply \u003d ((JobsApply) obj).value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                stringBuilder.append(jobsApply);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } else if (obj instanceof KnownProgLang) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                String knownProgLang \u003d ((KnownProgLang) obj).value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                stringBuilder.append(knownProgLang);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } else if (obj instanceof PastJob) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                String pastJob \u003d ((PastJob) obj).value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                stringBuilder.append(pastJob);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            stringBuilder.append(\" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "CaesarTY": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list people in job */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    ObservableList\u003cPerson\u003e getJobsList(int k);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of jobs */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    ObservableList\u003cJob\u003e getAllJobs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Selected job in the filtered job list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * null if no job is selected."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @see seedu.address.model.Model#selectedJobProperty()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    ReadOnlyProperty\u003cJob\u003e selectedJobProperty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Person)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedAll(Person person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedKiv(Person person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedInterviewed(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedSelected(Person person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedJob(Job job);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 25,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cPerson\u003e getJobsList(int k) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        switch (k) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return model.getJobsList(JobListName.APPLICANT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return model.getJobsList(JobListName.KIV);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return model.getJobsList(JobListName.INTERVIEW);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return model.getJobsList(JobListName.SHORTLIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return model.getJobsList(JobListName.STUB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cJob\u003e getAllJobs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return model.getAllJobs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ReadOnlyProperty\u003cJob\u003e selectedJobProperty() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return model.selectedJobProperty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedAll(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        model.setSelectedAll(person);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedKiv(Person person) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        model.setSelectedKiv(person);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedInterviewed(Person person) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        model.setSelectedInterviewed(person);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedSelected(Person person) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        model.setSelectedSelected(person);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedJob(Job job) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        model.setSelectedJob(job);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 38,
      "-": 108,
      "DanielDSSim": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_RACE + \"RACE \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + PREFIX_SCHOOL + \"SCHOOL \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_GRADE + \"GRADE \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_INTERVIEWSCORES + \"INTERVIEWSCORES \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_JOBSAPPLY + \"JOBSAPPLY...\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_PASTJOB + \"PASTJOB]...\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_KNOWNPROGLANG + \"KNOWNPROGLANG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_NRIC + \"S9671597H \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_RACE + \"Indian \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SCHOOL + \"NUS \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_MAJOR + \"Computer Science \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_GRADE + \"4.76 \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBSAPPLY + \"Software-Engineer \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_INTERVIEWSCORES + \"1,2,3,4,5 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_KNOWNPROGLANG + \"Python \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_PASTJOB + \"Software Engineer \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"The alias \\\"a\\\" can be used instead.\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_NAME \u003d \"Name field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_ADDRESS \u003d \"Address field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_EMAIL \u003d \"Email field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_GENDER \u003d \"Gender field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_GRADE \u003d \"Grade field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_JOBSAPPLY \u003d \"Jobs Apply field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_MAJOR \u003d \"Major field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_NRIC \u003d \"Nric field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_PHONE \u003d \"Phone field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_RACE \u003d \"Race field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_SCHOOL \u003d \"School field should not be empty.\\n%1$s\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_INFORMATION_WITHOUT_PREFIX \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"All information need a prefix for this command. \\n%1$s\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Iterator\u003cJobsApply\u003e itr \u003d toAdd.getJobsApply().iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            JobsApply job \u003d itr.next();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                model.addPersonToJob(new Job(new JobName(job.toString())), toAdd, JobListName.APPLICANT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 16,
      "-": 70,
      "DanielDSSim": 15,
      "CaesarTY": 22,
      "WeeSooJun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddListToJobCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class AddListToJobCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addAll\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"aa\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": adds all shown people to job . \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"DESTINATION-LIST-NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"SOURCE-LIST-NAME (Optional. Entire database if omitted.)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"JobName (Optional. Uses activeDisplayedJob if omitted.)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"kiv \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"applicant \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"Helper \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"The alias \\\"aa\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"kiv \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"applicant \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"Helper \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All people added to job: %1$s. Displaying the job\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_MISSING_JOB \u003d \"This job does not exist\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_NO_DESTINATION \u003d \"Please provide a destination list\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_NO_ACTIVE_JOB \u003d \"No active Job, please provide a JobName with prefix jn/\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final JobListName to;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final JobListName from;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private JobName toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Creates an AddCommand to add the specified {@code job}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public AddListToJobCommand(JobName name, JobListName toName, JobListName fromName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        toAdd \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        to \u003d toName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        from \u003d fromName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (toAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (model.getActiveJob() \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new CommandException(MESSAGE_NO_ACTIVE_JOB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            toAdd \u003d model.getActiveJob().getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job tempJob \u003d new Job(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!model.hasJob(tempJob)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_JOB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.addFilteredPersonsToJob(toAdd, from, to);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (toAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        String command \u003d String.format(MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new CommandResult(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            || (other instanceof AddListToJobCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddListToJobCommand) other).toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearInterviewsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Clears Interviews."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class ClearInterviewsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearInterviews\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Interviews has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        model.clearInterviews();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.analytics.Analytics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Analytics information should be shown to user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Analytics analytics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private JobName job;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private String interviews;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private boolean filter \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private UniqueFilterList filterList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private JobListName listName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public CommandResult(String feedbackToUser, Analytics results) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (isSuccessfulAnalytics()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d results;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public CommandResult(String feedbackToUser, JobListName name, UniqueFilterList list) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        filter \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        listName \u003d name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        filterList \u003d list;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public CommandResult(String feedbackToUser, JobName results) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (isSuccessfulDisplayJob()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            job \u003d results;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public CommandResult(String feedbackToUser, String results) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (isSuccessfulInterviews()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            interviews \u003d results;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean isSuccessfulAnalytics() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return feedbackToUser.equals(GenerateAnalyticsCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public boolean isSuccessfulInterviews() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return feedbackToUser.equals(ShowInterviewsCommand.COMMAND_SUCCESS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean isSuccessfulDisplayJob() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return feedbackToUser.equals(DisplayJobCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean isSuccessfulFilter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return filter;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean isList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return feedbackToUser.equals(ListCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //remember to handle null later"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Analytics getAnalytics() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return analytics;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public JobListName getJobListName() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return listName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public UniqueFilterList getFilterList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return filterList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public JobName getJob() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return job;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public String getInterviews() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return interviews;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 65,
      "-": 69,
      "CaesarTY": 18,
      "WeeSooJun": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateJobCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.predicate.JobsApplyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CreateJobCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"createJob\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"cj\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new job. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_JOBNAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_JOBNAME + \"Search Engineer \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The alias \\\"cj\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_JOBNAME + \"Search Engineer \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New job created. All applicants added\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_JOB \u003d \"This Job already exists in the list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Job toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code job}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CreateJobCommand(Job job) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d job;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasJob(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addJob(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArrayList\u003cString\u003e jobNameCollection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        jobNameCollection.add(toAdd.getName().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d new JobsApplyContainsKeywordsPredicate(jobNameCollection);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.updateFilteredPersonList(predicator);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.addFilteredPersonsToJob(toAdd.getName(), JobListName.STUB, JobListName.APPLICANT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.updateFilteredPersonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof CreateJobCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CreateJobCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "DanielDSSim": 11,
      "CaesarTY": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"The alias \\\"d\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "DanielDSSim": 2,
      "WeeSooJun": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteFilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.INTERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.KIV;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.SHORTLIST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.exceptions.FilterNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class DeleteFilterCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteFilter\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"df\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_USAGE_ALLJOB_SCREEN \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \": Deletes the filter identified by the filter name used in the All Job Showing Screen.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Parameters: NameFilterName \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" Chinese\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"The alias \\\"d\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Example: \" + COMMAND_ALIAS + \" Chinese\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_USAGE_DETAIL_SCREEN \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \": Deletes the filter identified by the filter name used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Parameters: [FilterList] NameFilterName \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" Applicant Chinese\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"The alias \\\"d\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Example: \" + COMMAND_ALIAS + \"Applicant Chinese\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_DELETE_FILTER_SUCCESS \u003d \"Deleted Filter: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_LISTNAME \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        \"Filter Command in Display Job page need indicate job list\\n%1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_CANOT_FOUND_TARGET_FILTER \u003d \"The filter you want to delete can not found\\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final String targetName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final JobListName filterListName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public DeleteFilterCommand(JobListName filterListName, String targetName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.filterListName \u003d filterListName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.targetName \u003d targetName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniqueFilterList predicateList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        boolean isAllJobScreen \u003d model.getIsAllJobScreen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        boolean hasListName \u003d filterListName !\u003d EMPTY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!isAllJobScreen \u0026\u0026 !hasListName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_LACK_LISTNAME, MESSAGE_USAGE_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        switch (filterListName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.removePredicateJobAllApplicants(targetName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (FilterNotFoundException ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    String.format(MESSAGE_CANOT_FOUND_TARGET_FILTER, MESSAGE_USAGE_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobAllApplicantsFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            predicateList \u003d model.getPredicateLists(APPLICANT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.removePredicateJobKiv(targetName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (FilterNotFoundException ex) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    String.format(MESSAGE_CANOT_FOUND_TARGET_FILTER, MESSAGE_USAGE_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobKivFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            predicateList \u003d model.getPredicateLists(KIV);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.removePredicateJobInterview(targetName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (FilterNotFoundException ex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    String.format(MESSAGE_CANOT_FOUND_TARGET_FILTER, MESSAGE_USAGE_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobInterviewFilteredPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            predicateList \u003d model.getPredicateLists(INTERVIEW);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.removePredicateJobShortlist(targetName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (FilterNotFoundException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    String.format(MESSAGE_CANOT_FOUND_TARGET_FILTER, MESSAGE_USAGE_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobShortlistFilteredPersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            predicateList \u003d model.getPredicateLists(SHORTLIST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.removePredicateAllPersons(targetName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (FilterNotFoundException ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    String.format(MESSAGE_CANOT_FOUND_TARGET_FILTER, MESSAGE_USAGE_ALLJOB_SCREEN));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateFilteredPersonList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicateList \u003d model.getPredicateLists(EMPTY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FILTER_SUCCESS, targetName), filterListName,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            predicateList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof DeleteFilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 (filterListName.equals(((DeleteFilterCommand) other).filterListName))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 (targetName.equals(((DeleteFilterCommand) other).targetName))); // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 7,
      "CaesarTY": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteJobCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class DeleteJobCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteJob\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rmj\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new job. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"Search Engineer \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"The alias \\\"rmj\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"Search Engineer \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Removed Job: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_MISSING_JOB \u003d \"This Job doesn\u0027t exist in the list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final Job toRm;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Creates an AddCommand to add the specified {@code job}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public DeleteJobCommand(Job job) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        toRm \u003d job;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!model.hasJob(toRm)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_JOB);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.deleteJob(toRm);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRm));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                || (other instanceof DeleteJobCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                \u0026\u0026 toRm.equals(((DeleteJobCommand) other).toRm));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DisplayJobCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class DisplayJobCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"DisplayJob\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"dj\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": displays a list from a job. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        + PREFIX_JOBNAME + \"JobName \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        + PREFIX_JOBNAME + \"Helper \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        + \"The alias \\\"dj\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        + \"Example: \" + COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        + PREFIX_JOBNAME + \"Helper \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displaying job\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_MISSING_JOB \u003d \"This job does not exist\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final JobName toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Creates an AddCommand to add the specified {@code job}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public DisplayJobCommand(JobName name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        toAdd \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job tempJob \u003d new Job(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!model.hasJob(tempJob)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_JOB);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        model.getJob(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.clearJobFilteredLists();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            || (other instanceof DisplayJobCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            \u0026\u0026 toAdd.equals(((DisplayJobCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 2,
      "DanielDSSim": 61,
      "CaesarTY": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ed\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + \"[\" + PREFIX_RACE + \"RACE] \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"[\" + PREFIX_SCHOOL + \"SCHOOL] \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_MAJOR + \"MAJOR] \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + \"[\" + PREFIX_GRADE + \"GRADE] \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_SCHOOL + \"SCHOOL] \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_KNOWNPROGLANG + \"KNOWNPROGLANG] \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_PASTJOB + \"PASTJOB] \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + \"[\" + PREFIX_JOBSAPPLY + \"JOBSAPPLY] \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + \"[\" + PREFIX_INTERVIEWSCORES + \"INTERVIEWSCORES] \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_NRIC + \"S9671597H \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_RACE + \"Indian \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + PREFIX_SCHOOL + \"NUS \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + PREFIX_MAJOR + \"Computer Science \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_GRADE + \"4.76 \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_JOBSAPPLY + \"Software Engineer \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PREFIX_INTERVIEWSCORES + \"5,8,2,4,10 \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_KNOWNPROGLANG + \"Python \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_PASTJOB + \"Software Engineer \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"The alias \\\"ed\\\" can be used instead.\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.revertList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.updateBaseFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Race updatedRace \u003d editPersonDescriptor.getRace().orElse(personToEdit.getRace());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        School updatedSchool \u003d editPersonDescriptor.getSchool().orElse(personToEdit.getSchool());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Major updatedMajor \u003d editPersonDescriptor.getMajor().orElse(personToEdit.getMajor());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Grade updatedGrade \u003d editPersonDescriptor.getGrade().orElse(personToEdit.getGrade());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        InterviewScores updatedInterviewScores \u003d editPersonDescriptor.getInterviewScores()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .orElse(personToEdit.getInterviewScores());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cKnownProgLang\u003e updatedKnownProgLangs \u003d editPersonDescriptor.getKnownProgLangs()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElse(personToEdit.getKnownProgLangs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Set\u003cPastJob\u003e updatedPastJobs \u003d editPersonDescriptor.getPastJobs().orElse(personToEdit.getPastJobs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Set\u003cJobsApply\u003e updatedJobsApply \u003d editPersonDescriptor.getJobsApply().orElse(personToEdit.getJobsApply());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedNric, updatedGender, updatedRace,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                updatedAddress, updatedSchool, updatedMajor, updatedGrade, updatedKnownProgLangs, updatedPastJobs,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                updatedJobsApply, updatedInterviewScores, updatedTags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        private Race race;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        private School school;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        private Major major;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        private Grade grade;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        private InterviewScores interviewScores;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        private Set\u003cJobsApply\u003e jobsApply;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cKnownProgLang\u003e knownProgLangs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cPastJob\u003e pastjobs;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * * A defensive copy of {@code pastjobs} is used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            setRace(toCopy.race);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            setSchool(toCopy.school);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            setMajor(toCopy.major);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            setGrade(toCopy.grade);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            setKnownProgLangs(toCopy.knownProgLangs);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            setPastJobs(toCopy.pastjobs);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            setJobsApply(toCopy.jobsApply);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            setInterviewScores(toCopy.interviewScores);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, nric, gender, race, address, school,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    major, grade, knownProgLangs, pastjobs, jobsApply, interviewScores, tags);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public void setRace(Race race) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            this.race \u003d race;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Optional\u003cRace\u003e getRace() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return Optional.ofNullable(race);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void setSchool(School school) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            this.school \u003d school;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public Optional\u003cSchool\u003e getSchool() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return Optional.ofNullable(school);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setMajor(Major major) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            this.major \u003d major;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cMajor\u003e getMajor() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            this.grade \u003d grade;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public void setInterviewScores(InterviewScores interviewScores) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            this.interviewScores \u003d interviewScores;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Optional\u003cInterviewScores\u003e getInterviewScores() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return Optional.ofNullable(interviewScores);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code knownProgLangs} to this object\u0027s {@code knownProgLangs}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code knownProgLangs} is used internally."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setKnownProgLangs(Set\u003cKnownProgLang\u003e knownProgLangs) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            this.knownProgLangs \u003d (knownProgLangs !\u003d null) ? new HashSet\u003c\u003e(knownProgLangs) : null;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable pastjob set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code pastjobs} is null."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cKnownProgLang\u003e\u003e getKnownProgLangs() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            return (knownProgLangs !\u003d null) ? Optional.of(Collections"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                    .unmodifiableSet(knownProgLangs)) : Optional.empty();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Sets {@code pastjobs} to this object\u0027s {@code pastjobs}."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * A defensive copy of {@code pastjobs} is used internally."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setPastJobs(Set\u003cPastJob\u003e pastjobs) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.pastjobs \u003d (pastjobs !\u003d null) ? new HashSet\u003c\u003e(pastjobs) : null;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Returns an unmodifiable pastjob set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code pastjobs} is null."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cPastJob\u003e\u003e getPastJobs() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return (pastjobs !\u003d null) ? Optional.of(Collections.unmodifiableSet(pastjobs)) : Optional.empty();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         * Sets {@code jobsApply} to this object\u0027s {@code jobsApply}."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         * A defensive copy of {@code jobsApply} is used internally."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public void setJobsApply(Set\u003cJobsApply\u003e jobsApply) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            this.jobsApply \u003d (jobsApply !\u003d null) ? new HashSet\u003c\u003e(jobsApply) : null;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         * Returns an unmodifiable jobsApply set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code jobsApply} is null."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Optional\u003cSet\u003cJobsApply\u003e\u003e getJobsApply() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return (jobsApply !\u003d null) ? Optional.of(Collections.unmodifiableSet(jobsApply)) : Optional.empty();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    \u0026\u0026 getRace().equals(e.getRace())"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    \u0026\u0026 getSchool().equals(e.getSchool())"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getMajor().equals(e.getMajor())"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    \u0026\u0026 getGrade().equals(e.getGrade())"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getKnownProgLangs().equals(e.getKnownProgLangs())"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPastJobs().equals(e.getPastJobs())"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    \u0026\u0026 getJobsApply().equals(e.getJobsApply())"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    \u0026\u0026 getInterviewScores().equals(e.getInterviewScores());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 110,
      "-": 263,
      "DanielDSSim": 2,
      "CaesarTY": 32,
      "WeeSooJun": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ex\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.INTERVIEW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.KIV;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.SHORTLIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateFilterException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.GenderContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.GradeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.InterviewScoreContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.JobsApplyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.KnownProgLangContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.MajorContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.NricContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.PastJobContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.PredicateManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.RaceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.SchoolContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Searches and lists all persons in address book whose information contains any of the argument keywords."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_USAGE_PARAMETERS \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        \"[\" + PREFIX_FILTERNAME + \"FILTERNAME] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME KEYWORD] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE KEYWORD] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL KEYWORD] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC KEYWORD] \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER KEYWORD] \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_RACE + \"RACE KEYWORD] \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS KEYWORD] \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_SCHOOL + \"SCHOOL KEYWORD] \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_MAJOR + \"MAJOR KEYWORD] \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_SCHOOL + \"SCHOOL KEYWORD] \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_KNOWNPROGLANG + \"KNOWNPROGLANG KEYWORD] \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_PASTJOB + \"PASTJOB KEYWORD] \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"[\" + PREFIX_JOBSAPPLY + \"JOBSAPPLY KEYWORD] \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_NRIC + \"S9671597H \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_RACE + \"Indian \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_SCHOOL + \"NUS \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_MAJOR + \"Computer Science \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"The alias \\\"sh \\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_NRIC + \"S9671597H \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_RACE + \"Indian \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_SCHOOL + \"NUS \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_MAJOR + \"Computer Science \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PREFIX_JOBSAPPLY + \"Software Engineer \\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_USAGE_ALLJOB_SCREEN \u003d COMMAND_WORD + \": (In All Jobs shows mode)\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Filter all persons whose informations contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Parameters: FILTERNAME [KEYWORDS]...\\n\" + MESSAGE_USAGE_PARAMETERS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_USAGE_JOB_DETAIL_SCREEN \u003d COMMAND_WORD + \": (In Job Detail mode)\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Filter indicated job list whose informations contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Parameters: LISTNAME FILTERNAME [KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"LISTNAME \" + MESSAGE_USAGE_PARAMETERS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_FILTERNAME \u003d \"Filter Command need a name\\n%1$s\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_LACK_LISTNAME \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        \"Filter Command in Display Job page need indicate job list\\n%1$s\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_REDUNDANT_LISTNAME \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        \"Filter Command in All Jobs page no need indicate job list\\n%1$s\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        \"Not a valid range, the right format should be value-value;value-value...\" + \"\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"For example: 1.2-1.3; 1.3-1.4\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_REDUNDANT_FILTERNAME \u003d \"Filter name has already been used.\" + \"\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        + \"Filter Command need a unique name\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final PredicatePersonDescriptor predicatePersonDescriptor;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final JobListName listName;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final String commandName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param commandName               command name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param listName                  which job list to predicate the person with"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor details to predicate the person with"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public FilterCommand(String commandName, JobListName listName,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                         PredicatePersonDescriptor predicatePersonDescriptor) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(commandName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(listName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.predicatePersonDescriptor \u003d new PredicatePersonDescriptor(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.predicate \u003d this.predicatePersonDescriptor.toPredicate();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.listName \u003d listName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        UniqueFilterList predicateList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        boolean isAllJobScreen \u003d model.getIsAllJobScreen();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        boolean hasListName \u003d listName !\u003d EMPTY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        checkException(isAllJobScreen, hasListName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        int size \u003d model.getJobsList(listName).size();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        switch (listName) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.addPredicateJobAllApplicants(commandName, predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (DuplicateFilterException ex) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException(MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobAllApplicantsFilteredPersonList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicateList \u003d model.getPredicateLists(APPLICANT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.addPredicateJobKiv(commandName, predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (DuplicateFilterException ex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException(MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobKivFilteredPersonList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicateList \u003d model.getPredicateLists(KIV);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.addPredicateJobInterview(commandName, predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (DuplicateFilterException ex) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException(MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobInterviewFilteredPersonList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicateList \u003d model.getPredicateLists(INTERVIEW);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.addPredicateJobShortlist(commandName, predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (DuplicateFilterException ex) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException(MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateJobShortlistFilteredPersonList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicateList \u003d model.getPredicateLists(SHORTLIST);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                model.addPredicateAllPersons(commandName, predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } catch (DuplicateFilterException ex) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new CommandException(MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            model.updateFilteredPersonList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            size \u003d model.getFilteredPersonList().size();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicateList \u003d model.getPredicateLists(EMPTY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, size), listName,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            predicateList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param isAllJobScreen Indicate the current screen, true if screen on all jobs screen"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param hasListName    Indicate whether command parser parse the List name"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws CommandException throw exception and catch by function excute()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void checkException(boolean isAllJobScreen, boolean hasListName)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String showMessage \u003d isAllJobScreen ? MESSAGE_USAGE_ALLJOB_SCREEN : MESSAGE_USAGE_JOB_DETAIL_SCREEN;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!isAllJobScreen \u0026\u0026 !hasListName) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_LACK_LISTNAME, showMessage));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (isAllJobScreen \u0026\u0026 hasListName) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_REDUNDANT_LISTNAME, showMessage));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!(other instanceof FilterCommand)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand e \u003d (FilterCommand) other;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return predicatePersonDescriptor.equals(e.predicatePersonDescriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static class PredicatePersonDescriptor {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e name;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e phone;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e email;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e nric;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e gender;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e race;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e interviewScoreQ1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e interviewScoreQ2;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e interviewScoreQ3;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e interviewScoreQ4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e interviewScoreQ5;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e grade;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e address;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e school;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e major;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e jobsApply;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e knownProgLangs;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Set\u003cString\u003e pastJobs;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public PredicatePersonDescriptor() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * A defensive copy"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public PredicatePersonDescriptor(PredicatePersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setRace(toCopy.race);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setInterviewScoreQ1(toCopy.interviewScoreQ1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setInterviewScoreQ2(toCopy.interviewScoreQ2);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setInterviewScoreQ3(toCopy.interviewScoreQ3);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setInterviewScoreQ4(toCopy.interviewScoreQ4);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setInterviewScoreQ5(toCopy.interviewScoreQ5);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setGrade(toCopy.grade);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setSchool(toCopy.school);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setMajor(toCopy.major);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setKnownProgLangs(toCopy.knownProgLangs);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setPastJobs(toCopy.pastJobs);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            setJobsApply(toCopy.jobsApply);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for name"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e nameToPredicate() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getName().isPresent()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getName().get())));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for phone"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e phoneToPredicate() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getPhone().isPresent()) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new PhoneContainsKeywordsPredicate("
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getPhone().get())));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for email"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e emailToPredicate() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new EmailContainsKeywordsPredicate("
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getEmail().get())));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for race"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e raceToPredicate() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getRace().isPresent()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new RaceContainsKeywordsPredicate("
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getRace().get())));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for address"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e addressToPredicate() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new AddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getAddress().get())));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for school"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e schoolToPredicate() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getSchool().isPresent()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new SchoolContainsKeywordsPredicate("
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getSchool().get())));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for major"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e majorToPredicate() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getMajor().isPresent()) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new MajorContainsKeywordsPredicate("
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getMajor().get())));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for gender"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e genderToPredicate() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getGender().isPresent()) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new GenderContainsKeywordsPredicate("
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getGender().get())));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for grade"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e gradeToPredicate() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getGrade().isPresent()) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new GradeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getGrade().get())));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for iq1"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e interviewQ1ToPredicate() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getInterviewScoreQ1().isPresent()) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new InterviewScoreContainsKeywordsPredicate(1,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getInterviewScoreQ1().get())));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for iq2"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e interviewQ2ToPredicate() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getInterviewScoreQ2().isPresent()) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new InterviewScoreContainsKeywordsPredicate(2,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getInterviewScoreQ2().get())));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for iq3"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e interviewQ3ToPredicate() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getInterviewScoreQ3().isPresent()) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new InterviewScoreContainsKeywordsPredicate(3,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getInterviewScoreQ3().get())));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for iq4"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e interviewQ4ToPredicate() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getInterviewScoreQ4().isPresent()) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new InterviewScoreContainsKeywordsPredicate(4,"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getInterviewScoreQ4().get())));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for iq5"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e interviewQ5ToPredicate() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getInterviewScoreQ5().isPresent()) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new InterviewScoreContainsKeywordsPredicate(5,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getInterviewScoreQ5().get())));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for nric"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e nricToPredicate() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getNric().isPresent()) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new NricContainsKeywordsPredicate("
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getNric().get())));"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for pastJob"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e pastJobToPredicate() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getPastJobs().isPresent()) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new PastJobContainsKeywordsPredicate("
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getPastJobs().get())));"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for jobsApply"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e jobsApplyToPredicate() {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getJobsApply().isPresent()) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new JobsApplyContainsKeywordsPredicate("
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getJobsApply().get())));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for knownProgLang"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        private Predicate\u003cPerson\u003e knownProgLangToPredicate() {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (this.getKnownProgLangs().isPresent()) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                predicator \u003d predicator.and(new KnownProgLangContainsKeywordsPredicate("
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    new ArrayList\u003c\u003e(this.getKnownProgLangs().get())));"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         * Translate and returns a Predicate object for search command"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Predicate\u003cPerson\u003e toPredicate() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Predicate\u003cPerson\u003e predicator \u003d new PredicateManager();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicator \u003d predicator.and(nameToPredicate().and(phoneToPredicate()"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                .and(emailToPredicate().and(raceToPredicate().and(addressToPredicate()"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                    .and(majorToPredicate().and(genderToPredicate().and(schoolToPredicate()"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                        .and(gradeToPredicate().and(interviewQ1ToPredicate().and(interviewQ2ToPredicate()"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                            .and(interviewQ3ToPredicate().and(interviewQ4ToPredicate().and(interviewQ5ToPredicate()"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                                .and(nricToPredicate().and(pastJobToPredicate().and(jobsApplyToPredicate()"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                                    .and(knownProgLangToPredicate()))))))))))))))))));"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return predicator;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setName(Set\u003cString\u003e name) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getName() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setPhone(Set\u003cString\u003e phone) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getPhone() {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setEmail(Set\u003cString\u003e email) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getEmail() {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setNric(Set\u003cString\u003e nric) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getNric() {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setGender(Set\u003cString\u003e gender) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getGender() {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setRace(Set\u003cString\u003e race) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.race \u003d race;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getRace() {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(race);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setGrade(Set\u003cString\u003e grade) {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.grade \u003d grade;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getGrade() {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setInterviewScoreQ1(Set\u003cString\u003e interviewScoreQ1) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.interviewScoreQ1 \u003d interviewScoreQ1;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getInterviewScoreQ1() {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(interviewScoreQ1);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setInterviewScoreQ2(Set\u003cString\u003e interviewScoreQ2) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.interviewScoreQ2 \u003d interviewScoreQ2;"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getInterviewScoreQ2() {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(interviewScoreQ2);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setInterviewScoreQ3(Set\u003cString\u003e interviewScoreQ3) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.interviewScoreQ3 \u003d interviewScoreQ3;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getInterviewScoreQ3() {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(interviewScoreQ3);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setInterviewScoreQ4(Set\u003cString\u003e interviewScoreQ4) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.interviewScoreQ4 \u003d interviewScoreQ4;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getInterviewScoreQ4() {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(interviewScoreQ4);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setInterviewScoreQ5(Set\u003cString\u003e interviewScoreQ5) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.interviewScoreQ5 \u003d interviewScoreQ5;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getInterviewScoreQ5() {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(interviewScoreQ5);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setAddress(Set\u003cString\u003e address) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getAddress() {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSchool(Set\u003cString\u003e school) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.school \u003d school;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getSchool() {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(school);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setMajor(Set\u003cString\u003e major) {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.major \u003d major;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getMajor() {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setKnownProgLangs(Set\u003cString\u003e knownProgLangs) {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.knownProgLangs \u003d knownProgLangs;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getKnownProgLangs() {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(knownProgLangs);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setPastJobs(Set\u003cString\u003e pastJobs) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.pastJobs \u003d pastJobs;"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getPastJobs() {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(pastJobs);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setJobsApply(Set\u003cString\u003e jobsApply) {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.jobsApply \u003d jobsApply;"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Optional\u003cSet\u003cString\u003e\u003e getJobsApply() {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.ofNullable(jobsApply);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!(other instanceof PredicatePersonDescriptor)) {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            PredicatePersonDescriptor e \u003d (PredicatePersonDescriptor) other;"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getRace().equals(e.getRace())"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getGrade().equals(e.getGrade())"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getInterviewScoreQ1().equals(e.getInterviewScoreQ1())"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getInterviewScoreQ2().equals(e.getInterviewScoreQ2())"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getInterviewScoreQ3().equals(e.getInterviewScoreQ3())"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getInterviewScoreQ4().equals(e.getInterviewScoreQ4())"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getInterviewScoreQ5().equals(e.getInterviewScoreQ5())"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getSchool().equals(e.getSchool())"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getMajor().equals(e.getMajor())"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getKnownProgLangs().equals(e.getKnownProgLangs())"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getPastJobs().equals(e.getPastJobs())"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 getJobsApply().equals(e.getJobsApply());"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 3,
      "DanielDSSim": 3,
      "CaesarTY": 691
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fi\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"The alias \\\"f\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.updateBaseFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "DanielDSSim": 1,
      "CaesarTY": 2,
      "WeeSooJun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenerateAnalyticsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.model.job.JobListName.INTERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.model.job.JobListName.KIV;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.model.job.JobListName.SHORTLIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.model.job.JobListName.STUB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.analytics.Analytics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Generates analytics report based on selected list of persons"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class GenerateAnalyticsCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"analytics\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Analytics generated!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        + \": Generates analytics of desired list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        + \"Parameters: list name (If no list name provided, analytics of all applicants will be shown)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        + \"\\n\" + \"Possible lists are: applicant, kiv, interview, shortlist\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        + \"\\n\" + \"Example: \" + COMMAND_WORD + \" \" + \"kiv\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final JobListName listName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public GenerateAnalyticsCommand(JobListName listName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(listName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.listName \u003d listName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public GenerateAnalyticsCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.listName \u003d STUB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Analytics analytics;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        switch (listName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d model.generateAnalytics(APPLICANT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d model.generateAnalytics(KIV);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d model.generateAnalytics(INTERVIEW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d model.generateAnalytics(SHORTLIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case STUB:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d model.generateAnalytics();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d model.generateAnalytics();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, analytics);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenerateInterviewsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.exceptions.InterviewsPresentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Generates an interview date list from existing persons in the addressbook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class GenerateInterviewsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generateInterviews\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Interviews generated\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_PRESENT \u003d \"Interviews already present\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            model.generateInterviews();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        } catch (InterviewsPresentException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new CommandException(MESSAGE_PRESENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"he\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hi\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportResumesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Imports resume txt files from a given directory into slavefinder()."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class ImportResumesCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"importResumes\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ir\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Resumes have been imported\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"There is a person who already exists in the address book\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cPerson\u003e toAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ImportResumesCommand(Set\u003cPerson\u003e people) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d people;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Iterator\u003cPerson\u003e setIterator \u003d toAdd.iterator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        while (setIterator.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Person currentPerson \u003d setIterator.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (model.hasPerson(currentPerson)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(currentPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ImportResumesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ImportResumesCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "WeeSooJun": 15,
      "CaesarTY": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons and jobs\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.revertList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.clearJobFilteredLists();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.clearPredicateAllPersons();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.updateFilteredPersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 1,
      "-": 22,
      "DanielDSSim": 1,
      "WeeSooJun": 1,
      "CaesarTY": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MovePersonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class MovePersonCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"movePeople\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"mp\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \": copies person to dest list from source list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Displayed job is used unless optional JobName is provided. \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"DESTINATION_LIST_NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"SOURCE_LIST_NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"applicant indexes\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"JobName (OPTIONAL)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"applicant \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"kiv \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"1, 2, 3 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"King-Of-The-World \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"The alias \\\"mp\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"applicant \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"kiv \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"1, 2, 3 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + PREFIX_JOBNAME + \"High-On-Drugs \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All selected people added to job: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"The dest list already has a person with this NRIC\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_NO_DISPLAYED_JOB \u003d \"No job is displayed. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Please enter a jobName with jn/ prefixed\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_NO_DESTINATION \u003d \"Please provide a destination list\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_NO_SOURCE \u003d \"Please provide a source list\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_BAD_INDEX \u003d \"One of the indexes is bad\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_JOB_NOT_FOUND \u003d \"Given job does not exist in database\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final JobListName to;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final JobListName from;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final ArrayList\u003cIndex\u003e indexes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final JobName toAdd;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Creates an AddCommand to add the specified {@code job}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public MovePersonCommand(JobListName to, JobListName from, ArrayList\u003cIndex\u003e indexes, JobName jobName) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(to);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(from);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(indexes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.toAdd \u003d jobName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job tempJob;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (toAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (model.getIsAllJobScreen()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new CommandException(MESSAGE_NO_DISPLAYED_JOB);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            tempJob \u003d model.getActiveJob();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            tempJob \u003d new Job(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                model.getJob(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new CommandException(MESSAGE_JOB_NOT_FOUND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        List\u003cPerson\u003e fromList \u003d model.getJobsList(from);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (indexes.get(i).getZeroBased() \u003e\u003d fromList.size()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            Person toAdd \u003d fromList.get(indexes.get(i).getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            model.addPersonToJob(tempJob, toAdd, to);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        String command \u003d String.format(MESSAGE_SUCCESS, tempJob);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new CommandResult(command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.updateBaseFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "DanielDSSim": 1,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveFromListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class RemoveFromListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \": Removes the person identified by the index number used in the specified list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Parameters: LIST_NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" kiv\" + \" 1\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"The alias \\\"d\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" kiv\" + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Removed People\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_NO_LIST_NAME \u003d \"Please specify which list to remove from\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_NO_DISPLAYED_JOB \u003d \"No job is displayed. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \"remove command can only be used when there is an active job.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_BAD_INDEX \u003d \"One of the indexes is bad\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final JobListName targetList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final ArrayList\u003cIndex\u003e indexes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public RemoveFromListCommand(JobListName targetList, ArrayList\u003cIndex\u003e indexes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.targetList \u003d targetList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.indexes \u003d indexes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (model.getIsAllJobScreen()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new CommandException(MESSAGE_NO_DISPLAYED_JOB);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        List\u003cPerson\u003e list \u003d model.getJobsList(targetList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (indexes.get(i).getZeroBased() \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c indexes.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            Person personToDelete \u003d list.get(indexes.get(i).getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            model.deletePersonFromJobList(personToDelete, model.getActiveJob().getName(), targetList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new CommandResult(MESSAGE_DELETE_PERSON_SUCCESS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"The alias \\\"s\\\" can be used instead.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_ALIAS + \" 1\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedPerson(filteredPersonList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "WeeSooJun": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetBlockOutDatesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Sets the block out dates for user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class SetBlockOutDatesCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setBlockOutDates\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Block Out Dates set:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \": Sets block out dates.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Parameters: dd/mm/yyyy - dd/mm/yyyy or dd/mm/yyyy\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 01/04/2019 - 04/04/2019, 06/04/2019\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final List\u003cCalendar\u003e blockOutDates;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public SetBlockOutDatesCommand(List\u003cCalendar\u003e blockOutDates) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.blockOutDates \u003d blockOutDates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        model.setBlockOutDates(blockOutDates);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetMaxInterviewsADayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Sets the maximum number of interviews that can be held in a day."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class SetMaxInterviewsADayCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setMaxInterviewsADay\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Maximum number of interviews per day set\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \": Sets the maximum number of interviews a day.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final int maxInterviewsADay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public SetMaxInterviewsADayCommand(int maxInterviewsADay) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.maxInterviewsADay \u003d maxInterviewsADay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        model.setMaxInterviewsADay(maxInterviewsADay);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowInterviewsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Shows an interview date list from existing persons in the addressbook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class ShowInterviewsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showInterviews\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_SUCCESS \u003d \"Interviews shown\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_INTERVIEWS_NOT_PRESENT \u003d \"Interviews not present\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String result \u003d model.getInterviews().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new CommandResult(MESSAGE_INTERVIEWS_NOT_PRESENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return new CommandResult(COMMAND_SUCCESS, result);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.updateBaseFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "DanielDSSim": 1,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_INFORMATION_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_GRADE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_JOBSAPPLY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_MAJOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_NRIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_RACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_LACK_SCHOOL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        PREFIX_GENDER, PREFIX_RACE, PREFIX_ADDRESS, PREFIX_SCHOOL, PREFIX_MAJOR, PREFIX_GRADE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                        PREFIX_KNOWNPROGLANG, PREFIX_PASTJOB, PREFIX_JOBSAPPLY, PREFIX_INTERVIEWSCORES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                PREFIX_GENDER, PREFIX_RACE, PREFIX_SCHOOL, PREFIX_MAJOR, PREFIX_GRADE, PREFIX_JOBSAPPLY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INFORMATION_WITHOUT_PREFIX, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_NAME, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_ADDRESS, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_PHONE, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_EMAIL, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_NRIC, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_GENDER, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_RACE).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_RACE, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_SCHOOL, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_MAJOR).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_MAJOR, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_GRADE, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (!argMultimap.getValue(PREFIX_JOBSAPPLY).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_JOBSAPPLY, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Race race \u003d ParserUtil.parseRace(argMultimap.getValue(PREFIX_RACE).get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        School school \u003d ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL).get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Major major \u003d ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        InterviewScores interviewScores;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INTERVIEWSCORES).isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            interviewScores \u003d ParserUtil.parseInterviewScores(argMultimap"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    .getValue(PREFIX_INTERVIEWSCORES).get());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            interviewScores \u003d new InterviewScores(InterviewScores.NO_RECORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cKnownProgLang\u003e knownProgLangsList \u003d ParserUtil.parseKnownProgLangs(argMultimap"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .getAllValues(PREFIX_KNOWNPROGLANG));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Set\u003cPastJob\u003e pastjobList \u003d ParserUtil.parsePastJobs(argMultimap.getAllValues(PREFIX_PASTJOB));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Set\u003cJobsApply\u003e jobsApplyList \u003d ParserUtil.parseJobsApply(argMultimap.getAllValues(PREFIX_JOBSAPPLY));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Person person \u003d new Person(name, phone, email, nric, gender, race, address, school, major, grade,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                knownProgLangsList, pastjobList, jobsApplyList, interviewScores, tagList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 28,
      "-": 61,
      "CaesarTY": 47,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddListToJobCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.AddListToJobCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class AddListToJobCommandParser implements Parser\u003cAddListToJobCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPersonToJobCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * and returns an AddPersonToJobCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public AddListToJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_JOBNAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobListName toListName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobListName fromListName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobName toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        String preambleString \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        String toListNameString \u003d preambleString.split(\"\\\\s+\")[0].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            toListName \u003d ParserUtil.parseJobListName(toListNameString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (toListName \u003d\u003d JobListName.EMPTY) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new ParseException(String.format(AddListToJobCommand.MESSAGE_NO_DESTINATION,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                        AddListToJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new ParseException(String.format(AddListToJobCommand.MESSAGE_NO_DESTINATION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    AddListToJobCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            String fromListNameString \u003d preambleString.split(\"\\\\s+\")[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            fromListName \u003d ParserUtil.parseJobListName(fromListNameString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                toAdd \u003d ParserUtil.parseJobName(argMultimap.getValue(PREFIX_JOBNAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            } catch (Exception noJob) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                toAdd \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } catch (Exception noSource) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            fromListName \u003d JobListName.STUB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                toAdd \u003d ParserUtil.parseJobName(argMultimap.getValue(PREFIX_JOBNAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            } catch (Exception noJob) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                toAdd \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new AddListToJobCommand(toAdd, toListName, fromListName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.AddListToJobCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.ClearInterviewsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.CreateJobCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.DeleteFilterCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.DeleteJobCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.DisplayJobCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.GenerateAnalyticsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.GenerateInterviewsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImportResumesCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.MovePersonCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.RemoveFromListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.SetBlockOutDatesCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.SetMaxInterviewsADayCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.ShowInterviewsCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ImportResumesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ImportResumesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ImportResumesCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ImportResumesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case CreateJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CreateJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case CreateJobCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CreateJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case DeleteFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new DeleteFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case DeleteFilterCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return new DeleteFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case FilterCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case GenerateInterviewsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new GenerateInterviewsCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case ShowInterviewsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new ShowInterviewsCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case SetMaxInterviewsADayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new SetMaxInterviewsADayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case ClearInterviewsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new ClearInterviewsCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case GenerateAnalyticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return new AnalyticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        case SetBlockOutDatesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new SetBlockOutDatesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case DisplayJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new DisplayJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case DisplayJobCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new DisplayJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case MovePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new MovePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case MovePersonCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new MovePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case DeleteJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new DeleteJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case DeleteJobCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new DeleteJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case AddListToJobCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new AddListToJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case AddListToJobCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new AddListToJobCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case RemoveFromListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new RemoveFromListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case RemoveFromListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return new RemoveFromListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 2,
      "-": 100,
      "DanielDSSim": 37,
      "WeeSooJun": 52,
      "CaesarTY": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AnalyticsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.logic.commands.GenerateAnalyticsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class AnalyticsCommandParser implements Parser\u003cGenerateAnalyticsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GenerateAnalyticsCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * and returns an GenerateAnalyticsCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public GenerateAnalyticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return new GenerateAnalyticsCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            JobListName listName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                listName \u003d ParserUtil.parseJobListName(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        GenerateAnalyticsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return new GenerateAnalyticsCommand(listName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nric/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Prefix PREFIX_RACE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"gr/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_KNOWNPROGLANG \u003d new Prefix(\"kpl/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Prefix PREFIX_PASTJOB \u003d new Prefix(\"pj/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Prefix PREFIX_JOBSAPPLY \u003d new Prefix(\"j/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Prefix PREFIX_INTERVIEWSCORES \u003d new Prefix(\"is/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Prefix PREFIX_INTERVIEWSCORESQ1 \u003d new Prefix(\"is1/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Prefix PREFIX_INTERVIEWSCORESQ2 \u003d new Prefix(\"is2/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Prefix PREFIX_INTERVIEWSCORESQ3 \u003d new Prefix(\"is3/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Prefix PREFIX_INTERVIEWSCORESQ4 \u003d new Prefix(\"is4/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Prefix PREFIX_INTERVIEWSCORESQ5 \u003d new Prefix(\"is5/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final Prefix PREFIX_SCHOOL \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_JOBNAME \u003d new Prefix(\"jn/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Prefix PREFIX_FILTERNAME \u003d new Prefix(\"fn/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final Prefix PREFIX_LISTNUMBER \u003d new Prefix(\"ln/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 6,
      "-": 18,
      "DanielDSSim": 1,
      "CaesarTY": 7,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteFilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.DeleteFilterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class DeleteFilterCommandParser implements Parser\u003cDeleteFilterCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public DeleteFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JobListName listName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String trimedString \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        boolean hasListName \u003d trimedString.split(\"\\\\s+\").length \u003d\u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String listNameString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String commandName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!hasListName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            listNameString \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            commandName \u003d trimedString.split(\"\\\\s+\")[0].trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            listNameString \u003d trimedString.split(\"\\\\s+\")[0].trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            commandName \u003d trimedString.split(\"\\\\s+\")[1].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            listName \u003d ParserUtil.parseJobListName(listNameString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return new DeleteFilterCommand(listName, commandName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(pe.getMessage(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                DeleteFilterCommand.MESSAGE_USAGE_ALLJOB_SCREEN + DeleteFilterCommand.MESSAGE_USAGE_DETAIL_SCREEN), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteJobCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.DeleteJobCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class DeleteJobCommandParser implements Parser\u003cDeleteJobCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateJobCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * and returns an CreateJobCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public DeleteJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_JOBNAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_JOBNAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobName name \u003d ParserUtil.parseJobName(argMultimap.getValue(PREFIX_JOBNAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d new Job(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new DeleteJobCommand(job);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DisplayJobCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.DisplayJobCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class DisplayJobCommandParser implements Parser\u003cDisplayJobCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisplayJobCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * and returns an DisplayJobCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public DisplayJobCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_JOBNAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_JOBNAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    DisplayJobCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobName job \u003d ParserUtil.parseJobName(argMultimap.getValue(PREFIX_JOBNAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new DisplayJobCommand(job);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PREAMBLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC, PREFIX_GENDER,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        PREFIX_RACE, PREFIX_ADDRESS, PREFIX_SCHOOL, PREFIX_MAJOR, PREFIX_GRADE, PREFIX_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                        PREFIX_PASTJOB, PREFIX_JOBSAPPLY, PREFIX_INTERVIEWSCORES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PREAMBLE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RACE).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            editPersonDescriptor.setRace(ParserUtil.parseRace(argMultimap.getValue(PREFIX_RACE).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            editPersonDescriptor.setSchool(ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAJOR).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setMajor(ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            editPersonDescriptor.setGrade(ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INTERVIEWSCORES).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            editPersonDescriptor.setInterviewScores(ParserUtil.parseInterviewScores(argMultimap"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    .getValue(PREFIX_INTERVIEWSCORES).get()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        parseKnownProgLangsForEdit(argMultimap.getAllValues(PREFIX_KNOWNPROGLANG))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .ifPresent(editPersonDescriptor::setKnownProgLangs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parsePastJobsForEdit(argMultimap.getAllValues(PREFIX_PASTJOB)).ifPresent(editPersonDescriptor::setPastJobs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        parseJobsApplyForEdit(argMultimap.getAllValues(PREFIX_JOBSAPPLY)).ifPresent(editPersonDescriptor::setJobsApply);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e pastjobs} into a {@code Set\u003cPastJob\u003e} if {@code pastjobs} is non-empty."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code pastjobs} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cPastJob\u003e} containing zero past jobs."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cKnownProgLang\u003e\u003e parseKnownProgLangsForEdit(Collection\u003cString\u003e knownProjLang)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assert knownProjLang !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (knownProjLang.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e knownProgLangSet \u003d knownProjLang.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 knownProjLang.contains(\"\") ? Collections.emptySet() : knownProjLang;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseKnownProgLangs(knownProgLangSet));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e pastjobs} into a {@code Set\u003cPastJob\u003e} if {@code pastjobs} is non-empty."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * If {@code pastjobs} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * {@code Set\u003cPastJob\u003e} containing zero past jobs."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Optional\u003cSet\u003cJobsApply\u003e\u003e parseJobsApplyForEdit(Collection\u003cString\u003e jobsApply) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assert jobsApply !\u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (jobsApply.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Collection\u003cString\u003e jobsApplySet \u003d jobsApply.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 jobsApply.contains(\"\") ? Collections.emptySet() : jobsApply;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return Optional.of(ParserUtil.parseJobsApply(jobsApplySet));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e jobsApply} into a {@code Set\u003cJobsApply} if {@code jobsApply} is non-empty."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * If {@code jobsApply} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * {@code Set\u003cJobsApply\u003e} containing zero jobsApply."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private Optional\u003cSet\u003cPastJob\u003e\u003e parsePastJobsForEdit(Collection\u003cString\u003e pastjobs) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assert pastjobs !\u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (pastjobs.isEmpty()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Collection\u003cString\u003e pastjobSet \u003d pastjobs.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 pastjobs.contains(\"\") ? Collections.emptySet() : pastjobs;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return Optional.of(ParserUtil.parsePastJobs(pastjobSet));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 42,
      "-": 102,
      "CaesarTY": 25,
      "WeeSooJun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_INVALID_RANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_LACK_FILTERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_USAGE_ALLJOB_SCREEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_USAGE_JOB_DETAIL_SCREEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.isValidValueRange;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.FilterCommand.PredicatePersonDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_RACE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                PREFIX_SCHOOL, PREFIX_MAJOR, PREFIX_PASTJOB, PREFIX_TAG, PREFIX_GENDER, PREFIX_GRADE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                PREFIX_NRIC, PREFIX_JOBSAPPLY, PREFIX_KNOWNPROGLANG, PREFIX_INTERVIEWSCORESQ1,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                PREFIX_INTERVIEWSCORESQ2, PREFIX_INTERVIEWSCORESQ3, PREFIX_INTERVIEWSCORESQ4,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                PREFIX_INTERVIEWSCORESQ5, PREFIX_FILTERNAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JobListName listName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String commandName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String preambleString \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String listNameString \u003d preambleString.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            listName \u003d ParserUtil.parseJobListName(listNameString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                pe.getMessage(), MESSAGE_USAGE_ALLJOB_SCREEN + MESSAGE_USAGE_JOB_DETAIL_SCREEN), pe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PredicatePersonDescriptor predicatePersonDescriptor \u003d new PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILTERNAME).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            commandName \u003d argMultimap.getValue(PREFIX_FILTERNAME).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_LACK_FILTERNAME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                MESSAGE_USAGE_ALLJOB_SCREEN + MESSAGE_USAGE_JOB_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseEmail(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseAddress(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseGender(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseGrade(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseInterviewQ1(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseInterviewQ2(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseInterviewQ3(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseInterviewQ4(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseInterviewQ5(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseJobsApply(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseKnowParaLang(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseMajor(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseName(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseNric(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parsePastJob(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parsePhone(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseRace(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        parseSchool(predicatePersonDescriptor, argMultimap);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return new FilterCommand(commandName, listName, predicatePersonDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Name field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseName(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setName(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Phone field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parsePhone(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setPhone(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Email field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseEmail(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setEmail(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Race field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseRace(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RACE).isPresent()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setRace(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_RACE).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Address field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseAddress(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setAddress(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_ADDRESS).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse School field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseSchool(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setSchool(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_SCHOOL).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Major field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseMajor(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAJOR).isPresent()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setMajor(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_MAJOR).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Gender field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseGender(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setGender(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_GENDER).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Grade field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException the exception throws if parse value is not in format"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseGrade(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            List\u003cString\u003e rangeList \u003d Arrays.asList(argMultimap.getValue(PREFIX_GRADE).get().split(\";\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!isValidValueRange(rangeList)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setGrade(new HashSet\u003c\u003e(rangeList));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Interview Q1 field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException the exception throws if parse value is not in format"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseInterviewQ1(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INTERVIEWSCORESQ1).isPresent()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            List\u003cString\u003e rangeList \u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_INTERVIEWSCORESQ1).get().split(\";\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!isValidValueRange(rangeList)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setInterviewScoreQ1(new HashSet\u003c\u003e(rangeList));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Interview Q2 field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException the exception throws if parse value is not in format"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseInterviewQ2(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INTERVIEWSCORESQ2).isPresent()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            List\u003cString\u003e rangeList \u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_INTERVIEWSCORESQ2).get().split(\";\"));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!isValidValueRange(rangeList)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setInterviewScoreQ2(new HashSet\u003c\u003e(rangeList));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Interview Q3 field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException the exception throws if parse value is not in format"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseInterviewQ3(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INTERVIEWSCORESQ3).isPresent()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            List\u003cString\u003e rangeList \u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_INTERVIEWSCORESQ3).get().split(\";\"));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!isValidValueRange(rangeList)) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setInterviewScoreQ3(new HashSet\u003c\u003e(rangeList));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Interview Q4 field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException the exception throws if parse value is not in format"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseInterviewQ4(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INTERVIEWSCORESQ4).isPresent()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            List\u003cString\u003e rangeList \u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_INTERVIEWSCORESQ4).get().split(\";\"));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!isValidValueRange(rangeList)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setInterviewScoreQ4(new HashSet\u003c\u003e(rangeList));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Interview Q5 field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException the exception throws if parse value is not in format"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseInterviewQ5(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INTERVIEWSCORESQ5).isPresent()) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            List\u003cString\u003e rangeList \u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_INTERVIEWSCORESQ5).get().split(\";\"));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!isValidValueRange(rangeList)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setInterviewScoreQ5(new HashSet\u003c\u003e(rangeList));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Nric field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseNric(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setNric(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_NRIC).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Past Job field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parsePastJob(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PASTJOB).isPresent()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setPastJobs(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_PASTJOB).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Jobs Apply field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseJobsApply(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_JOBSAPPLY).isPresent()) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setJobsApply(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_JOBSAPPLY).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * parse Known Programming Language field to the Predicate Descriptor if field exist"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicatePersonDescriptor the predicate descriptor"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param argMultimap               the argMultimap contains value for each fields"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private void parseKnowParaLang(PredicatePersonDescriptor predicatePersonDescriptor, ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicatePersonDescriptor);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (argMultimap.getValue(PREFIX_KNOWNPROGLANG).isPresent()) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicatePersonDescriptor.setKnownProgLangs(new HashSet\u003c\u003e(("
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                Arrays.asList(argMultimap.getValue(PREFIX_KNOWNPROGLANG).get().split(\"\\\\s+\")))));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 3,
      "CaesarTY": 399
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportResumesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImportResumesCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new ImportResumesCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ImportResumesCommandParser implements Parser\u003cImportResumesCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_NOT_FOUND_MESSAGE \u003d \"The specified file cannot be found.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String READER_ERROR_MESSAGE \u003d \"There is a problem reading your file\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_DIRECTORY_MESSAGE \u003d \"The given path does not specify a folder.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMPTY_DIRECTORY_MESSAGE \u003d \"The given path does not contain any files.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportResumesCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an ImportResumesCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ImportResumesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        File folder \u003d new File(args.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        File[] filesList \u003d folder.listFiles();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filesList \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(INVALID_DIRECTORY_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (filesList.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EMPTY_DIRECTORY_MESSAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cPerson\u003e peopleToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c filesList.length; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Person currentPerson \u003d parseOnePerson(filesList[i]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            peopleToAdd.add(currentPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ImportResumesCommand(peopleToAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the given (@code File), and parses its contents in the context of the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * ImportResumesCommand. It returns a Person object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person parseOnePerson(File resumeFile) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(resumeFile));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(reader.readLine());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(reader.readLine());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(reader.readLine());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(reader.readLine());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Gender gender \u003d ParserUtil.parseGender(reader.readLine());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Race race \u003d ParserUtil.parseRace(reader.readLine());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(reader.readLine());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            School school \u003d ParserUtil.parseSchool(reader.readLine());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Major major \u003d ParserUtil.parseMajor(reader.readLine());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Grade grade \u003d ParserUtil.parseGrade(reader.readLine());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            String langString \u003d reader.readLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] langArray \u003d langString.split(\",\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Collection\u003cString\u003e langsStringList \u003d Arrays.asList(langArray);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cKnownProgLang\u003e knownProgLangsList \u003d ParserUtil.parseKnownProgLangs(langsStringList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            String pastJobsString \u003d reader.readLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] jobsArray \u003d pastJobsString.split(\",\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Collection\u003cString\u003e jobsStringList \u003d Arrays.asList(jobsArray);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cPastJob\u003e pastjobList \u003d ParserUtil.parsePastJobs(jobsStringList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            String jobsApplyString \u003d reader.readLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] jobsApplyArray \u003d jobsApplyString.split(\",\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Collection\u003cString\u003e jobsApplyStringList \u003d Arrays.asList(jobsApplyArray);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cJobsApply\u003e jobsApplyList \u003d ParserUtil.parseJobsApply(jobsApplyStringList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            InterviewScores interviewScores \u003d ParserUtil.parseInterviewScores(reader.readLine());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            //always empty"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            person \u003d new Person(name, phone, email, nric, gender, race, address, school, major, grade,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    knownProgLangsList, pastjobList, jobsApplyList, interviewScores, tagList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(FILE_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(READER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "CaesarTY": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MovePersonCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.MovePersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class MovePersonCommandParser implements Parser\u003cMovePersonCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPersonToJobCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * and returns an AddPersonToJobCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public MovePersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_JOBNAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobListName to;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobListName from;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobName toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            to \u003d ParserUtil.parseJobListName(args.split(\"\\\\b\\\\s\")[0].trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new ParseException(MovePersonCommand.MESSAGE_NO_DESTINATION + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    + MovePersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            from \u003d ParserUtil.parseJobListName(args.split(\"\\\\b\\\\s\")[1].trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new ParseException(MovePersonCommand.MESSAGE_NO_SOURCE + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    + MovePersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        String indexString \u003d args.split(\"\\\\b\\\\s\")[2].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArrayList\u003cString\u003e numbers \u003d new ArrayList\u003c\u003e(Arrays.asList(indexString.split(\"[,\\\\s]+\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c numbers.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                indexes.add(ParserUtil.parseIndex(numbers.get(i)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, MovePersonCommand.MESSAGE_BAD_INDEX), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            toAdd \u003d ParserUtil.parseJobName(argMultimap.getValue(PREFIX_JOBNAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            toAdd \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new MovePersonCommand(to, from, indexes, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.model.interviews.Interviews.HOUR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.model.interviews.Interviews.MILLISECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.model.interviews.Interviews.MINUTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.model.interviews.Interviews.SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.INTERVIEW_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.INTERVIEW_PREFIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.KIV_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.KIV_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.SHORTLIST_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.SHORTLIST_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_INVALID_MAX_INTERVIEWS_A_DAY \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            \"Maximum number of interviews a day is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Not a valid date.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses a {@code String value} into a {@code JobListName}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException if the given {@code value} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static JobListName parseJobListName(String value) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String trimmedName \u003d value.trim().toLowerCase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!JobListName.isValidJobListName(trimmedName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(JobListName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (value.equals(APPLICANT_NAME) || value.equals(APPLICANT_PREFIX)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return JobListName.APPLICANT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (value.equals(KIV_NAME) || value.equals(KIV_PREFIX)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return JobListName.KIV;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (value.equals(INTERVIEW_NAME) || value.equals(INTERVIEW_PREFIX)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return JobListName.INTERVIEW;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else if (value.equals(SHORTLIST_NAME) || value.equals(SHORTLIST_PREFIX)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return JobListName.SHORTLIST;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return JobListName.EMPTY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses a {@code String grade} into an {@code Grade}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static Grade parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String trimmedGrade \u003d grade.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new Grade(trimmedGrade);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses a {@code String nric} into an {@code Nric}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses a {@code String interviewScores} into an {@code InterviewScores}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws ParseException if the given {@code interviewScores} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static InterviewScores parseInterviewScores(String interviewScores) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(interviewScores);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String trimmedInterviewScores \u003d interviewScores.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!InterviewScores.isValidInterviewScores(trimmedInterviewScores)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new ParseException(InterviewScores.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new InterviewScores(trimmedInterviewScores);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String major} into an {@code Major}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code major} is invalid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Major parseMajor(String major) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedMajor \u003d major.trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Major.isValidMajor(trimmedMajor)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Major(trimmedMajor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses a {@code String race} into an {@code Race}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws ParseException if the given {@code race} is invalid."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static Race parseRace(String race) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(race);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String trimmedRace \u003d race.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Race.isValidRace(trimmedRace)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new ParseException(Race.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new Race(trimmedRace);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Parses a {@code String school} into an {@code School}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @throws ParseException if the given {@code school} is invalid."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static School parseSchool(String school) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String trimmedSchool \u003d school.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (!School.isValidSchool(trimmedSchool)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new ParseException(School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return new School(trimmedSchool);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String knownproglang} into a {@code KnownProgLang}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code knownproglang} is invalid."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public static KnownProgLang parseKnownProgLang(String knownProgLang) throws ParseException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(knownProgLang);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedKnownProgLang \u003d knownProgLang.trim();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!KnownProgLang.isValidKnownProgLang(trimmedKnownProgLang)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(KnownProgLang.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return new KnownProgLang(trimmedKnownProgLang);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e knownproglangs} into a {@code Set\u003cKnownProgLang\u003e}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cKnownProgLang\u003e parseKnownProgLangs(Collection\u003cString\u003e knownProgLangs) throws ParseException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(knownProgLangs);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cKnownProgLang\u003e knownProgLangSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String knownProgLangName : knownProgLangs) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            knownProgLangSet.add(parseKnownProgLang(knownProgLangName));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        return knownProgLangSet;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses a {@code String jobsApply} into a {@code JobsApply}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws ParseException if the given {@code jobsApply} is invalid."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static JobsApply parseJobsApply(String jobsApply) throws ParseException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(jobsApply);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String trimmedJobsApply \u003d jobsApply.trim();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!JobsApply.isValidJobsApply(trimmedJobsApply)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new ParseException(JobsApply.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new JobsApply(trimmedJobsApply);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e jobsApply} into a {@code Set\u003cJobsApply\u003e}."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static Set\u003cJobsApply\u003e parseJobsApply(Collection\u003cString\u003e jobsApply) throws ParseException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(jobsApply);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final Set\u003cJobsApply\u003e jobsApplySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (String jobsApplyName : jobsApply) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            jobsApplySet.add(parseJobsApply(jobsApplyName));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return jobsApplySet;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses a {@code String pastjob} into a {@code PastJob}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws ParseException if the given {@code pastjob} is invalid."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static PastJob parsePastJob(String pastjob) throws ParseException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(pastjob);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String trimmedPastJob \u003d pastjob.trim();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!PastJob.isValidPastJob(trimmedPastJob)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new ParseException(PastJob.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return new PastJob(trimmedPastJob);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e pastjobs} into a {@code Set\u003cPastJob\u003e}."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static Set\u003cPastJob\u003e parsePastJobs(Collection\u003cString\u003e pastjobs) throws ParseException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(pastjobs);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        final Set\u003cPastJob\u003e pastjobSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (String pastjobName : pastjobs) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            pastjobSet.add(parsePastJob(pastjobName));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return pastjobSet;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code JobName}."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    public static JobName parseJobName(String name) throws ParseException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!JobName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(JobName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JobName(trimmedName);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Parses a {@code String name} into a {@code int}."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @throws ParseException if the given {@code maxInterviewsADay} is invalid."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static int parseMaxInterviewsADay(String maxInterviewsADay) throws ParseException {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(maxInterviewsADay);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String trimmedMaxInterviewsADay \u003d maxInterviewsADay.trim();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedMaxInterviewsADay)) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_MAX_INTERVIEWS_A_DAY);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return Integer.parseInt(trimmedMaxInterviewsADay);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Parses a {@code String name} into a {@code List\u003cCalendar\u003e}."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @throws ParseException if the given {@code blockOutDates} is invalid."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static List\u003cCalendar\u003e parseBlockOutDates(String blockOutDates) throws ParseException {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(blockOutDates);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        List\u003cCalendar\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String trimmedBlockOutDates \u003d blockOutDates.trim();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String[] stringArray \u003d trimmedBlockOutDates.split(\",\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (String date : stringArray) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            int day \u003d Integer.parseInt(date.substring(0, 2));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            int month \u003d Integer.parseInt(date.substring(3, 5));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            int year \u003d Integer.parseInt(date.substring(6, 10));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            Calendar currentCalendar \u003d new GregorianCalendar(year, month - 1, day, HOUR, MINUTE, SECOND);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            currentCalendar.set(Calendar.MILLISECOND, MILLISECOND);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            if (isValidDateRange(date)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                int endDay \u003d Integer.parseInt(date.substring(13, 15));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                int endMonth \u003d Integer.parseInt(date.substring(16, 18));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                int endYear \u003d Integer.parseInt(date.substring(19, 23));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                Calendar endCalendar \u003d new GregorianCalendar(endYear, endMonth - 1, endDay, HOUR, MINUTE, SECOND);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                endCalendar.set(Calendar.MILLISECOND, MILLISECOND);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                while (currentCalendar.compareTo(endCalendar) \u003c 0) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    result.add(currentCalendar);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    currentCalendar \u003d (Calendar) currentCalendar.clone();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    currentCalendar.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                result.add(endCalendar);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            } else if (isValidDate(date)) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                result.add(currentCalendar);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Returns a boolean testing for validity of date."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    protected static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (!date.matches(\"\\\\d\\\\d/\\\\d\\\\d/\\\\d\\\\d\\\\d\\\\d\")) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int day \u003d Integer.parseInt(date.substring(0, 2));"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int month \u003d Integer.parseInt(date.substring(3, 5));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int year \u003d Integer.parseInt(date.substring(6, 10));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            if (isLeapYear(year)) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                if (day \u003c\u003d 29) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                if (day \u003c\u003d 28) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (month % 2 \u003d\u003d 1 \u0026\u0026 day \u003c\u003d 31 \u0026\u0026 day \u003e\u003d 1) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (month % 2 \u003d\u003d 0 \u0026\u0026 day \u003c\u003d 30 \u0026\u0026 day \u003e\u003d 1) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Checks if year is a leap year."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    protected static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if ((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        } else if ((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 \u003d\u003d 0) \u0026\u0026 (year % 400 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Check if the date range provided is valid.value"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    protected static boolean isValidValueRange(String range) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(range);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String trimedRange \u003d range.trim();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String[] bounds \u003d trimedRange.split(\"-\");"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (bounds.length !\u003d 2) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String trimedLower \u003d bounds[0].trim();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String trimedUpper \u003d bounds[1].trim();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String floatFarmat \u003d \"\\\\d+\" + \".\" + \"\\\\d+\";"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String integerFarmat \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        boolean isValidLower \u003d trimedLower.matches(floatFarmat) || trimedLower.matches(integerFarmat);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        boolean isValidUpper \u003d trimedUpper.matches(floatFarmat) || trimedLower.matches(integerFarmat);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return isValidLower \u0026\u0026 isValidUpper;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Check if the value range provided is valid. Takes a list of string"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    protected static boolean isValidValueRange(List\u003cString\u003e rangeList) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(rangeList);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (String range : rangeList) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (!isValidValueRange(range)) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Check if the date range provided is valid."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    protected static boolean isValidDateRange(String dateRange) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (!dateRange.matches(\"\\\\d\\\\d/\\\\d\\\\d/\\\\d\\\\d\\\\d\\\\d - \\\\d\\\\d/\\\\d\\\\d/\\\\d\\\\d\\\\d\\\\d\")) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return isValidDate(dateRange.substring(0, 10)) \u0026\u0026 isValidDate(dateRange.substring(13, 23));"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 108,
      "-": 184,
      "DanielDSSim": 3,
      "WeeSooJun": 146,
      "CaesarTY": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveFromListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.commands.RemoveFromListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class RemoveFromListCommandParser implements Parser\u003cRemoveFromListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPersonToJobCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * and returns an AddPersonToJobCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public RemoveFromListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobListName chosenList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            chosenList \u003d ParserUtil.parseJobListName(args.split(\"\\\\b\\\\s\")[0].trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new ParseException(RemoveFromListCommand.MESSAGE_NO_LIST_NAME + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    + RemoveFromListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            String indexString \u003d args.split(\"\\\\b\\\\s\")[1].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            ArrayList\u003cString\u003e numbers \u003d new ArrayList\u003c\u003e(Arrays.asList(indexString.split(\"[,\\\\s]+\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            for (int i \u003d 0; i \u003c numbers.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    indexes.add(ParserUtil.parseIndex(numbers.get(i)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveFromListCommand.MESSAGE_BAD_INDEX), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveFromListCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new RemoveFromListCommand(chosenList, indexes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetBlockOutDatesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.SetBlockOutDatesCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Parses input arguments and creates a new SetBlockOutDatesCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class SetBlockOutDatesCommandParser implements Parser\u003cSetBlockOutDatesCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetMaxInterviewsADayCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * and returns an SetMaxInterviewsADayCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public SetBlockOutDatesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            List\u003cCalendar\u003e value \u003d ParserUtil.parseBlockOutDates(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new SetBlockOutDatesCommand(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetBlockOutDatesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetMaxInterviewsADayCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.commands.SetMaxInterviewsADayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Parses input arguments and creates a new SetMaxInterviewsADayCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class SetMaxInterviewsADayCommandParser implements Parser\u003cSetMaxInterviewsADayCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetMaxInterviewsADayCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * and returns an SetMaxInterviewsADayCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public SetMaxInterviewsADayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            int value \u003d ParserUtil.parseMaxInterviewsADay(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return new SetMaxInterviewsADayCommand(value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetMaxInterviewsADayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.Interviews;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.UniqueJobList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.UniqueNricMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final UniqueNricMap nrics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueJobList jobs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final Interviews interviews;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        nrics \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        jobs \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews \u003d new Interviews();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.nrics.setNricMap(persons);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setInterviews(Interviews interviews) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.interviews.setInterviews(interviews);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setJobs(List\u003cJob\u003e jobs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.jobs.setJobs(jobs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setBlockOutDates(List\u003cCalendar\u003e blockOutDates) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.interviews.setBlockOutDates(blockOutDates);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        setInterviews(newData.getInterviews());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        setJobs(newData.getJobList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        nrics.add(p.getNric(), p);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the job."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the job."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds to the first list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void addPersonToJob(Person person, Job toAdd, JobListName list) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d getJob(toAdd.getName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        int destination;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        switch (list) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            destination \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            destination \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            destination \u003d 2;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            destination \u003d 3;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            destination \u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        job.add(person, destination);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.jobs.setJob(job, job);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Adds a person to the job."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * The person must not already exist in the job."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Adds to the first list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * This version directly adds from job"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void addFilteredListToJob(FilteredList\u003cPerson\u003e filteredPersons, JobName jobName, JobListName to) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d jobs.getJob(jobName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        switch(to) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            job.addFilteredList(filteredPersons, 0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            job.addFilteredList(filteredPersons, 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            job.addFilteredList(filteredPersons, 2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            job.addFilteredList(filteredPersons, 3);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            job.addFilteredList(filteredPersons, 0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.jobs.setJob(job, job);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Retrieves a job in the addressbook"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Job getJob(JobName jobName) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return jobs.getJob(jobName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a job to the address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * The job must not already exist in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addJob(Job j) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        jobs.add(j);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Deletes a job in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * The job must exist in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void deleteJob(Job j) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        jobs.remove(j);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns true if a job with the same identity as {@code job} exists in the address book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public int movePerson(Job job, Person person, int source, int dest) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return job.move(person, source, dest);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a job with the same identity as {@code job} exists in the address book."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return jobs.contains(job);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        nrics.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Replaces the given job {@code target} in the list with {@code editedJob}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setJob(Job target, Job editedJob) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(editedJob);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        jobs.setJob(target, editedJob);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        nrics.remove(key.getNric());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        jobs.removePerson(key);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.removePerson(key);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Removes {@code key} from this {@code job}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * in {@code list}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void deletePersonFromJobList(Person toDelete, JobName job, Integer list) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        jobs.removePersonFromJobList(toDelete, job, list);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public ObservableList\u003cJob\u003e getJobList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return jobs.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public UniquePersonList getUniquePersonList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Generates interviews"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void generateInterviews() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.generate(getPersonList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public Interviews getInterviews() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return interviews;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setMaxInterviewsADay(int maxInterviewsADay) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.setMaxInterviewsADay(maxInterviewsADay);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void clearInterviews() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.clear();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cJob\u003e getAllJobList() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return jobs.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return nrics.hashCode();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 15,
      "-": 181,
      "DanielDSSim": 104,
      "WeeSooJun": 33,
      "CaesarTY": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.analytics.Analytics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.Interviews;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a job with the same identity as {@code job} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasJob(Job job);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * adds all persons in filtered personlist to {@code job}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void addFilteredPersonsToJob(JobName jobName, JobListName from, JobListName to);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * adds person with {@code nric} to {@code job}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void addPersonToJob(Job job, Person person, JobListName list);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given job."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code job} must not already exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void addJob(Job job);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Deletes the given job."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code job} must exist in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void deleteJob(Job job);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Deletes the given job list of a job"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code job} must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void deletePersonFromJobList(Person toRemove, JobName job, JobListName list);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Moves Person with {@code nric} in Job with {@code jobName}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * from list {@code source} to list {@code dest}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code job} must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    Integer movePerson(Job job, Person person, Integer source, Integer dest);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * add Predicate to All persons list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void addPredicateAllPersons(String predicateName, Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * add Predicate to JobShortlist"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void addPredicateJobShortlist(String predicateName, Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * add Predicate to JobInterview"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void addPredicateJobInterview(String predicateName, Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * add Predicate to JobKiv"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void addPredicateJobKiv(String predicateName, Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * add Predicate to JobAllApplicants"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void addPredicateJobAllApplicants(String predicateName, Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * remove Predicate to All persons"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void removePredicateAllPersons(String predicateName);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * remove Predicate to All persons"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void clearPredicateAllPersons();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * remove Predicate to JobShortlist"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void removePredicateJobShortlist(String predicateName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * remove Predicate to JobInterview"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void removePredicateJobInterview(String predicateName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * remove Predicate to JobKiv"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void removePredicateJobKiv(String predicateName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * remove Predicate to JobAllApplicants"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void removePredicateJobAllApplicants(String predicateName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns one of the UniqueFilterList in the job"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    UniqueFilterList getPredicateList(JobName name, Integer listNumber);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns one of the UniquePersonList in the job"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    UniquePersonList getJobList(JobName name, Integer listNumber);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns the job and makes it the active job"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    Job getJob(JobName name);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns the current active Job."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    Job getActiveJob();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /** Returns an unmodifiable view of the filtered  people list in job"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @param list*/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    ObservableList\u003cPerson\u003e getJobsList(JobListName list);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /** Returns an unmodifiable view of the filtered job list */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    ObservableList\u003cJob\u003e getAllJobs();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns an unmodifiable view of the filtered job list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    UniqueFilterList getPredicateLists(JobListName listName);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void updateBaseFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Updates the filter of the active filtered person list to filter."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void updateFilteredPersonList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Updates the filter of the JobAllApplcants filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void updateJobAllApplicantsFilteredPersonList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Updates the filter of the JobKiv filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void updateJobKivFilteredPersonList();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Updates the filter of the JobInterview filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void updateJobInterviewFilteredPersonList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Updates the filter of the JobShortlist filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void updateJobShortlistFilteredPersonList();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Clear four filter list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void clearJobFilteredLists();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Changes the filtered person list to the given {@code list}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void changeFilteredPersonList(UniquePersonList list);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Revert the display list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    void revertList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    ObservableList\u003cJob\u003e getFilteredJobList();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    ObservableList\u003cPerson\u003e getBaseFilteredPersonList();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered person list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Selected job in the filtered job list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * null if no job is selected."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    ReadOnlyProperty\u003cJob\u003e selectedJobProperty();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected person in the filtered person list."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    Person getSelectedPerson();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * return whether it is at the all jobs screen ordisplay job screen"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    boolean getIsAllJobScreen();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * set whether it is at the all jobs screen ordisplay job screen"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    void setIsAllJobScreen(boolean staus);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Person person);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedAll(Person person);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedKiv(Person person);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedInterviewed(Person person);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedSelected(Person person);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void setSelectedJob(Job job);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Generates an interview list."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    void generateInterviews();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Returns Interviews."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    Interviews getInterviews();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Sets the maximum number of interviews a day."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    void setMaxInterviewsADay(int maxInterviewsADay);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Clears the generated interviews."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    void clearInterviews();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Sets Block Out Dates."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    void setBlockOutDates(List\u003cCalendar\u003e blockOutDates);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates analytics."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    Analytics generateAnalytics();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    Analytics generateAnalytics(JobListName listName);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 29,
      "-": 144,
      "DanielDSSim": 66,
      "WeeSooJun": 30,
      "CaesarTY": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.analytics.Analytics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.Interviews;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.Filter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.PredicateManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final SimpleObjectProperty\u003cJob\u003e selectedJob \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private FilteredList\u003cPerson\u003e originalFilteredPersons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private FilteredList\u003cPerson\u003e displayedFilteredPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private FilteredList\u003cJob\u003e filteredJobs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private Job activeJob;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private boolean isAllJobScreen;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private FilteredList\u003cPerson\u003e activeJobAllApplicants;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private FilteredList\u003cPerson\u003e activeJobKiv;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private FilteredList\u003cPerson\u003e activeJobInterview;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private FilteredList\u003cPerson\u003e activeJobShortlist;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private UniqueFilterList filterListAllPersons;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private UniqueFilterList filterListJobAllApplicants;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private UniqueFilterList filterListJobKiv;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private UniqueFilterList filterListJobInterview;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private UniqueFilterList filterListJobShortlist;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private FilteredList\u003cJob\u003e allJobsList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        originalFilteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        filteredJobs \u003d new FilteredList\u003c\u003e(versionedAddressBook.getJobList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        originalFilteredPersons.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        filteredJobs.addListener(this::ensureSelectedJobIsValid);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        displayedFilteredPersons \u003d originalFilteredPersons;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        isAllJobScreen \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniquePersonList fakeList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        activeJobAllApplicants \u003d new FilteredList\u003c\u003e(fakeList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        activeJobKiv \u003d new FilteredList\u003c\u003e(fakeList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        activeJobShortlist \u003d new FilteredList\u003c\u003e(fakeList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        activeJobInterview \u003d new FilteredList\u003c\u003e(fakeList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobAllApplicants \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobKiv \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobInterview \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobShortlist \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListAllPersons \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        allJobsList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getAllJobList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(job);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasJob(job);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean getIsAllJobScreen() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return isAllJobScreen;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void setIsAllJobScreen(boolean staus) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.isAllJobScreen \u003d staus;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void addFilteredPersonsToJob(JobName jobName, JobListName from, JobListName to) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (activeJob \u003d\u003d null || !activeJob.getName().equals(jobName)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.getJob(jobName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.activeJob \u003d null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        switch (from) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.addFilteredListToJob(activeJobAllApplicants, jobName, to);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.addFilteredListToJob(activeJobKiv, jobName, to);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.addFilteredListToJob(activeJobInterview, jobName, to);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.addFilteredListToJob(activeJobShortlist, jobName, to);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.addFilteredListToJob(displayedFilteredPersons, jobName, to);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void addPersonToJob(Job job, Person person, JobListName list) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireAllNonNull(job, person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        versionedAddressBook.addPersonToJob(person, job, list);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void deletePersonFromJobList(Person toRemove, JobName job, JobListName list) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        switch (list) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.deletePersonFromJobList(toRemove, job, 0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.deletePersonFromJobList(toRemove, job, 1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.deletePersonFromJobList(toRemove, job, 2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.deletePersonFromJobList(toRemove, job, 3);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            versionedAddressBook.deletePersonFromJobList(toRemove, job, 0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        updateBaseFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addJob(Job job) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addJob(job);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void deleteJob(Job job) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        versionedAddressBook.deleteJob(job);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        revertList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Integer movePerson(Job job, Person person, Integer source, Integer dest) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return versionedAddressBook.movePerson(job, person, source, dest);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public UniqueFilterList getPredicateLists(JobListName listName) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        switch (listName) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return filterListJobAllApplicants;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return filterListJobKiv;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return filterListJobInterview;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return filterListJobShortlist;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return filterListAllPersons;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public UniquePersonList getJobList(JobName name, Integer listNumber) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d getJob(name);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return job.getList(listNumber);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cJob\u003e getAllJobs() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return allJobsList;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public ObservableList\u003cPerson\u003e getJobsList(JobListName list) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        switch (list) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return activeJobAllApplicants;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return activeJobKiv;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return activeJobInterview;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return activeJobShortlist;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return displayedFilteredPersons;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Job getJob(JobName name) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.activeJob \u003d versionedAddressBook.getJob(name);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.activeJobAllApplicants \u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                new FilteredList\u003c\u003e(activeJob.getList(0).asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.activeJobKiv \u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                new FilteredList\u003c\u003e(activeJob.getList(1).asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.activeJobInterview \u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                new FilteredList\u003c\u003e(activeJob.getList(2).asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.activeJobShortlist \u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                new FilteredList\u003c\u003e(activeJob.getList(3).asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return activeJob;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Job getActiveJob() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return activeJob;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return displayedFilteredPersons;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public ObservableList\u003cPerson\u003e getBaseFilteredPersonList() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return originalFilteredPersons;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public UniqueFilterList getPredicateList(JobName name, Integer listNumber) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Job job \u003d getJob(name);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return job.getPredicateList(listNumber);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void updateBaseFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        originalFilteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void updateJobAllApplicantsFilteredPersonList() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicater \u003d new PredicateManager();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (Filter filter : filterListJobAllApplicants) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicater \u003d predicater.and(filter.getPredicate());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        activeJobAllApplicants.setPredicate(predicater);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void updateJobKivFilteredPersonList() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicater \u003d new PredicateManager();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (Filter filter : filterListJobKiv) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicater \u003d predicater.and(filter.getPredicate());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        activeJobKiv.setPredicate(predicater);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void updateJobInterviewFilteredPersonList() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicater \u003d new PredicateManager();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (Filter filter : filterListJobInterview) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicater \u003d predicater.and(filter.getPredicate());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        activeJobInterview.setPredicate(predicater);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void updateJobShortlistFilteredPersonList() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicater \u003d new PredicateManager();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (Filter filter : filterListJobShortlist) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicater \u003d predicater.and(filter.getPredicate());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        activeJobShortlist.setPredicate(predicater);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        displayedFilteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void updateFilteredPersonList() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicater \u003d new PredicateManager();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (Filter filter : filterListAllPersons) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            predicater \u003d predicater.and(filter.getPredicate());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        displayedFilteredPersons.setPredicate(predicater);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void clearJobFilteredLists() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobAllApplicants \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobKiv \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobInterview \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobShortlist \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void clearPredicateAllPersons() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListAllPersons \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void addPredicateJobShortlist(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobShortlist.add(new Filter(predicateName, predicate));"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void addPredicateJobInterview(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobInterview.add(new Filter(predicateName, predicate));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void addPredicateJobKiv(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobKiv.add(new Filter(predicateName, predicate));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void addPredicateJobAllApplicants(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobAllApplicants.add(new Filter(predicateName, predicate));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void addPredicateAllPersons(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListAllPersons.add(new Filter(predicateName, predicate));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void removePredicateAllPersons(String predicateName) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicateName);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListAllPersons.remove(new Filter(predicateName));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void removePredicateJobShortlist(String predicateName) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicateName);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobShortlist.remove(new Filter(predicateName));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void removePredicateJobInterview(String predicateName) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicateName);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobInterview.remove(new Filter(predicateName));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void removePredicateJobKiv(String predicateName) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicateName);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobKiv.remove(new Filter(predicateName));"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void removePredicateJobAllApplicants(String predicateName) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(predicateName);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        filterListJobAllApplicants.remove(new Filter(predicateName));"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void changeFilteredPersonList(UniquePersonList list) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(list);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.displayedFilteredPersons \u003d new FilteredList\u003c\u003e(list.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void revertList() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.displayedFilteredPersons \u003d originalFilteredPersons;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Job List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Job} backed by the internal list of"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public ObservableList\u003cJob\u003e getFilteredJobList() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return filteredJobs;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ReadOnlyProperty\u003cJob\u003e selectedJobProperty() {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return selectedJob;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !displayedFilteredPersons.contains(person)) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedAll(Person person) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !activeJobAllApplicants.contains(person)) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedKiv(Person person) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !activeJobKiv.contains(person)) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedInterviewed(Person person) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !activeJobInterview.contains(person)) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedSelected(Person person) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (person !\u003d null \u0026\u0026 !activeJobShortlist.contains(person)) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.setValue(person);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setSelectedJob(Job job) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (job !\u003d null \u0026\u0026 !allJobsList.contains(job)) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        selectedJob.setValue(job);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid person in {@code filteredPersons}."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Person\u003e change) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected person, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSamePerson(removedPerson));"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the person that came before it in the list,"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such person."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Ensures {@code selectedJob} is a valid job in {@code filteredJob}."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private void ensureSelectedJobIsValid(ListChangeListener.Change\u003c? extends Job\u003e change) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (selectedJob.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                // null is always a valid selected job, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            boolean wasSelectedJobChanged \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedJob.getValue());"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (wasSelectedJobChanged) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                // Update selectedJob to its new value."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedJob.getValue());"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                selectedJob.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            boolean wasSelectedJobRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    .anyMatch(removedJob -\u003e selectedJob.getValue().isSameJob(removedJob));"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (wasSelectedJobChanged) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                // Select the job that came before it in the list,"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                // or clear the selection if there is no such job."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                selectedJob.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void generateInterviews() {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        versionedAddressBook.generateInterviews();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public Interviews getInterviews() {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return versionedAddressBook.getInterviews();"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setMaxInterviewsADay(int maxInterviewsADay) {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        versionedAddressBook.setMaxInterviewsADay(maxInterviewsADay);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void clearInterviews() {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        versionedAddressBook.clearInterviews();"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Obtains current viewed list and generate analytics based on it"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Analytics generateAnalytics() {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Analytics analytics \u003d new Analytics(getFilteredPersonList());"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return analytics;"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Analytics generateAnalytics(JobListName listName) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Analytics analytics;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        switch (listName) {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d new Analytics(activeJobAllApplicants);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d new Analytics(activeJobKiv);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d new Analytics(activeJobInterview);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d new Analytics(activeJobShortlist);"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            analytics \u003d new Analytics(getFilteredPersonList());"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return analytics;"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setBlockOutDates(List\u003cCalendar\u003e blockOutDates) {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        versionedAddressBook.setBlockOutDates(blockOutDates);"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                \u0026\u0026 originalFilteredPersons.equals(other.originalFilteredPersons)"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 83,
      "-": 249,
      "DanielDSSim": 166,
      "WeeSooJun": 28,
      "CaesarTY": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.Interviews;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    Interviews getInterviews();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    ObservableList\u003cJob\u003e getJobList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "DanielDSSim": 2,
      "WeeSooJun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/analytics/Analytics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Provides analytics data on job applicants, based on their data fields obtained from {@code Person}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class Analytics {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private List\u003cPerson\u003e personList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private int numPeople;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Analytics(List\u003cPerson\u003e list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        personList \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        numPeople \u003d list.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates Barchart data from job application breakdown list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e generateJobApplicationData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return generateBarChartDataFromSet(jobApplicationBreakdown());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates Barchart data from major breakdown list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e generateMajorData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return generateBarChartDataFromSet(majorBreakdown());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates Barchart data from school breakdown list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e generateSchoolData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return generateBarChartDataFromSet(schoolBreakdown());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates Barchart data from past job breakdown list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e generatePastJobData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return generateBarChartDataFromSet(pastJobBreakdown());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Return mean grade data"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String generateMeanGradeData() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return df.format(meanGrade());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates Barchart data from interview scores breakdown list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cXYChart.Series\u003cString, Float\u003e\u003e generateInterviewScoresData() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ObservableList\u003cXYChart.Series\u003cString, Float\u003e\u003e data \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ArrayList\u003cFloat\u003e scores \u003d meanInterviewScores();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        XYChart.Series\u003cString, Float\u003e q1 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        XYChart.Series\u003cString, Float\u003e q2 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        XYChart.Series\u003cString, Float\u003e q3 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        XYChart.Series\u003cString, Float\u003e q4 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        XYChart.Series\u003cString, Float\u003e q5 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q1.setName(\"Q1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q2.setName(\"Q2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q3.setName(\"Q3\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q4.setName(\"Q4\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q5.setName(\"Q5\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q1.getData().add(new XYChart.Data\u003c\u003e(\"\", scores.get(0)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q2.getData().add(new XYChart.Data\u003c\u003e(\"\", scores.get(1)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q3.getData().add(new XYChart.Data\u003c\u003e(\"\", scores.get(2)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q4.getData().add(new XYChart.Data\u003c\u003e(\"\", scores.get(3)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        q5.getData().add(new XYChart.Data\u003c\u003e(\"\", scores.get(4)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.addAll(q1, q2, q3, q4, q5);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates Piechart data from race breakdown list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e generateRaceData() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e data \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ArrayList\u003cInteger\u003e race \u003d raceBreakdown();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.add(new PieChart.Data(\"Chinese\", race.get(0)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.add(new PieChart.Data(\"Malay\", race.get(1)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.add(new PieChart.Data(\"Indian\", race.get(2)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.add(new PieChart.Data(\"Others\", race.get(3)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates Piechart data from gender breakdown list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e generateGenderData() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e data \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ArrayList\u003cInteger\u003e gender \u003d genderBreakdown();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.add(new PieChart.Data(\"Female\", gender.get(0)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.add(new PieChart.Data(\"Male\", gender.get(1)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        data.add(new PieChart.Data(\"Others\", gender.get(2)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns the average grade of all applicants in the list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Float meanGrade() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Float sumGrade \u003d 0F;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            sumGrade +\u003d Float.valueOf(personList.get(i).getGrade().value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return sumGrade / numPeople;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Provides the number of applicants for each open job role"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * A {@code Person} with more than one job applied will be counted multiple times, once for each role."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private HashMap\u003cString, Integer\u003e jobApplicationBreakdown() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        HashMap\u003cString, Integer\u003e jobApplicantsCounter \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Iterator\u003cJobsApply\u003e itr \u003d personList.get(i).getJobsApply().iterator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            while (itr.hasNext()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                JobsApply job \u003d itr.next();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                if (!jobApplicantsCounter.containsKey(job.value)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    jobApplicantsCounter.put(job.value, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    jobApplicantsCounter.put(job.value, jobApplicantsCounter.get(job.value) + 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return jobApplicantsCounter;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Provides an average score for each interview question from selected list of applicants"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Applicants not required to all have interview scores"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private ArrayList\u003cFloat\u003e meanInterviewScores() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ArrayList\u003cFloat\u003e averageScores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            averageScores.add(0F);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        int interviewed \u003d numPeople;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Person curr \u003d personList.get(i);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (curr.getInterviewScores().value.equals(\"No Record\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                interviewed--;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                String[] personScores;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                personScores \u003d curr.getInterviewScores().value.split(\",\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                for (int j \u003d 0; j \u003c 5; j++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    averageScores.set(j, averageScores.get(j) + Integer.valueOf(personScores[j]));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            averageScores.set(i, averageScores.get(i) / interviewed);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return averageScores;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns the number of applicants for each gender category"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private ArrayList\u003cInteger\u003e genderBreakdown() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ArrayList\u003cInteger\u003e genderCount \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            genderCount.add(0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            genderCount.set(i, 0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String currGender \u003d personList.get(i).getGender().value;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (currGender.equals(\"Female\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                genderCount.set(0, genderCount.get(0) + 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else if (currGender.equals(\"Male\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                genderCount.set(1, genderCount.get(1) + 1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                genderCount.set(2, genderCount.get(2) + 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return genderCount;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns the number of applicants for each race category"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private ArrayList\u003cInteger\u003e raceBreakdown() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ArrayList\u003cInteger\u003e raceCount \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            raceCount.add(0);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String currRace \u003d personList.get(i).getRace().value;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (currRace.equals(\"Chinese\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                raceCount.set(0, raceCount.get(0) + 1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else if (currRace.equals(\"Malay\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                raceCount.set(1, raceCount.get(1) + 1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else if (currRace.equals(\"Indian\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                raceCount.set(2, raceCount.get(2) + 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                raceCount.set(3, raceCount.get(3) + 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return raceCount;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Provides the number of applicants studying in each major"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private HashMap\u003cString, Integer\u003e majorBreakdown() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        HashMap\u003cString, Integer\u003e majorCounter \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String currMajor \u003d personList.get(i).getMajor().value;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (!majorCounter.containsKey(currMajor)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                majorCounter.put(currMajor, 1);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                majorCounter.put(currMajor, majorCounter.get(currMajor) + 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return majorCounter;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Provides the number of applicants studying in each school"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private HashMap\u003cString, Integer\u003e schoolBreakdown() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        HashMap\u003cString, Integer\u003e schoolCounter \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String currSchool \u003d personList.get(i).getSchool().value;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (!schoolCounter.containsKey(currSchool)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                schoolCounter.put(currSchool, 1);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                schoolCounter.put(currSchool, schoolCounter.get(currSchool) + 1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return schoolCounter;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Provides the number of applicants for each past job"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * A {@code Person} with more than one past job applied will be counted multiple times, once for each job."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private HashMap\u003cString, Integer\u003e pastJobBreakdown() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        HashMap\u003cString, Integer\u003e pastJobCounter \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c numPeople; i++) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Iterator\u003cPastJob\u003e itr \u003d personList.get(i).getPastJobs().iterator();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            while (itr.hasNext()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                PastJob job \u003d itr.next();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                if (!pastJobCounter.containsKey(job.value)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    pastJobCounter.put(job.value, 1);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    pastJobCounter.put(job.value, pastJobCounter.get(job.value) + 1);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return pastJobCounter;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Generates the dataset to be put into a Barchart from any Hashmap with a String key and Integer value"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e generateBarChartDataFromSet(HashMap\u003cString, Integer\u003e map) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e output \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Iterator\u003cString\u003e itr \u003d map.keySet().iterator();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String curr \u003d itr.next();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            XYChart.Series\u003cString, Integer\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            series.setName(curr);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(\"\", map.get(curr)));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            output.add(series);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 316
    }
  },
  {
    "path": "src/main/java/seedu/address/model/interviews/Interviews.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.model.interviews;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.exceptions.InterviewsPresentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Represents the association class between person and calendar."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class Interviews {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final int SECOND \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final int MINUTE \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final int HOUR \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final int MILLISECOND \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private int maxInterviewsADay \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final HashMap\u003cCalendar, List\u003cPerson\u003e\u003e interviewsHashMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final ArrayList\u003cCalendar\u003e blockOutDates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public Interviews() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.interviewsHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.blockOutDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Helper method for test."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    protected Interviews(HashMap\u003cCalendar, List\u003cPerson\u003e\u003e interviewsHashMap) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.interviewsHashMap \u003d interviewsHashMap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.blockOutDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Generates a interviews date list where there are multiple interviewees in a day."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void generate(List\u003cPerson\u003e persons) throws InterviewsPresentException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (!interviewsHashMap.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new InterviewsPresentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int year \u003d now.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int month \u003d now.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int day \u003d now.get(Calendar.DATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Calendar calendar \u003d new GregorianCalendar(year, month, day);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        calendar \u003d nextAvailableDay(calendar);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviewsHashMap.put(calendar, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            List\u003cPerson\u003e personList \u003d interviewsHashMap.get(calendar);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            if (personList.size() \u003c maxInterviewsADay) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                personList.add(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                calendar \u003d nextAvailableDay(calendar);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                interviewsHashMap.put(calendar, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                interviewsHashMap.get(calendar).add(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setBlockOutDates(List\u003cCalendar\u003e availableDates) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (Calendar dates : availableDates) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            this.blockOutDates.add((Calendar) dates.clone());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setInterviews(Interviews other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.maxInterviewsADay \u003d other.maxInterviewsADay;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.interviewsHashMap.clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        other.interviewsHashMap.forEach(((calendar, personList) -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                this.interviewsHashMap.put(calendar, new ArrayList\u003c\u003e(personList))));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.blockOutDates.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (Calendar calendar : other.blockOutDates) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            this.blockOutDates.add(calendar);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviewsHashMap.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void setMaxInterviewsADay(int maxInterviewsADay) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.maxInterviewsADay \u003d maxInterviewsADay;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        PriorityQueue\u003cCalendar\u003e calendarPriorityQueue \u003d new PriorityQueue\u003c\u003e(interviewsHashMap.keySet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        while (!calendarPriorityQueue.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            Calendar currentCalendar \u003d calendarPriorityQueue.poll();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            List\u003cPerson\u003e currentPersonList \u003d interviewsHashMap.get(currentCalendar);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            result +\u003d currentCalendar.get(Calendar.DATE) + \"/\" + (currentCalendar.get(Calendar.MONTH) + 1)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    + \"/\" + currentCalendar.get(Calendar.YEAR) + \": \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            for (Person person : currentPersonList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                result +\u003d person.getName() + \", \";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            result \u003d result.substring(0, result.length() - 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            result +\u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return result.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Removes the person from the interviewsHashMap."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @param person to be removed from interviewsHashMap."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @return true if person to be removed is present, else returns false."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public boolean removePerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Collection\u003cList\u003cPerson\u003e\u003e listOfPersonList \u003d interviewsHashMap.values();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (List\u003cPerson\u003e personList : listOfPersonList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            if (personList.remove(person)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    protected HashMap\u003cCalendar, List\u003cPerson\u003e\u003e getInterviewsHashMap() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return interviewsHashMap;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Returns a new instance of the next available day in calendar format."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private Calendar nextAvailableDay(Calendar calendar) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Calendar result \u003d (Calendar) calendar.clone();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        result.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        while ((result.get(Calendar.DAY_OF_WEEK) \u003d\u003d Calendar.SATURDAY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                || (result.get(Calendar.DAY_OF_WEEK) \u003d\u003d Calendar.SUNDAY)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                || (containsDate(blockOutDates, result))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            result.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Checks if the calendarList contains the date."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    protected static boolean containsDate(List\u003cCalendar\u003e calendarList, Calendar date) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int year \u003d date.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int month \u003d date.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        int day \u003d date.get(Calendar.DATE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (Calendar calendar : calendarList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            if (calendar.get(Calendar.YEAR) \u003d\u003d year"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    \u0026\u0026 calendar.get(Calendar.MONTH) \u003d\u003d month"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    \u0026\u0026 calendar.get(Calendar.DATE) \u003d\u003d day) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/model/interviews/exceptions/InterviewsPresentException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.model.interviews.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Signals that the interview has already been generated"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class InterviewsPresentException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/job/Job.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.job;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Job {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int NUMBER_OF_LISTS \u003d 4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JobName name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private UniquePersonList personsInJob \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private ArrayList\u003cUniquePersonList\u003e personsList \u003d new ArrayList\u003c\u003e(NUMBER_OF_LISTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private ArrayList\u003cSet\u003cNric\u003e\u003e personsNricList \u003d new ArrayList\u003c\u003e(NUMBER_OF_LISTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private ArrayList\u003cUniqueFilterList\u003e predicateList \u003d new ArrayList\u003c\u003e(NUMBER_OF_LISTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Job(JobName name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            personsList.add(new UniquePersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            personsNricList.add(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Job(JobName name, ArrayList\u003cUniquePersonList\u003e personList, ArrayList\u003cSet\u003cNric\u003e\u003e nricList,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "               UniquePersonList personsInJob) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireAllNonNull(name, personList, nricList, personsInJob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.personsList \u003d personList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.personsNricList \u003d nricList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.personsInJob \u003d personsInJob;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public JobName getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Adds all persons on displayed filter list to first list of job."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Only adds if not already in job."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void addFilteredList(FilteredList\u003cPerson\u003e filteredPersons, Integer to) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredPersons.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (personsList.get(to).contains(filteredPersons.get(i))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (!personsInJob.contains(filteredPersons.get(i))) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                personsInJob.add(filteredPersons.get(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            add(filteredPersons.get(i), to);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Removes a person from a job"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!personsInJob.contains(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (personsList.get(i).contains(toRemove)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                personsList.get(i).remove(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                personsNricList.get(i).remove(toRemove.getNric());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsInJob.remove(toRemove);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Removes a person from a job list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void removeFromList(Person toRemove, Integer listNumber) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        boolean shouldStillExist \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!personsInJob.contains(toRemove)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (i \u003d\u003d listNumber) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (personsList.get(i).contains(toRemove)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                shouldStillExist \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsList.get(listNumber).remove(toRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!shouldStillExist) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            personsInJob.remove(toRemove);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to a job."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Goes to the first list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void add(Person person, Integer destination) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (personsList.get(destination).contains(person)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!personsInJob.contains(person)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            personsInJob.add(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsList.get(destination).add(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsNricList.get(destination).add(person.getNric());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns one of the four UniqurePredicateLists"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public UniqueFilterList getPredicateList(Integer listNumber) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return predicateList.get(listNumber);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns one of the four UniqurePersonLists"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public UniquePersonList getList(Integer listNumber) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return personsList.get(listNumber);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Moves a person from one list to another"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public int move(Person target, Integer source, Integer dest) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!(personsList.get(source).contains(target))) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (personsList.get(dest).contains(target)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsList.get(dest).add(target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsNricList.get(dest).add(target.getNric());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return 2;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns an UniquePerson list using {@code listNumber}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public final UniquePersonList getPeople(Integer listNumber) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return personsList.get(listNumber);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns true if Job contains Person"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public final boolean contains(Person person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return personsInJob.contains(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Returns an immutable known programming language set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public final Set\u003cNric\u003e getPersonsNric(Integer listNumber) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return Collections.unmodifiableSet(personsNricList.get(listNumber));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ArrayList\u003cName\u003e getPeopleNames(List\u003cPerson\u003e peopleList) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cName\u003e names \u003d new ArrayList\u003c\u003e(peopleList.size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c peopleList.size(); i++) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            names.add(peopleList.get(i).getName());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both jobs have the same name."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two jobs."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameJob(Job otherJob) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireNonNull(otherJob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherJob \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return ((otherJob.getName()).equals(this.getName()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both jobs have the same identity and data fields."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two jobs."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Job)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Job otherJob \u003d (Job) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherJob.getName().equals(getName());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "DanielDSSim": 133,
      "CaesarTY": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/job/JobListName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.job;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Represents a JobListName in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public enum JobListName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    APPLICANT(), KIV(), INTERVIEW(), SHORTLIST(), STUB(), EMPTY();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        \"Job List Name should either be empty when you are in All Job Showing Screen or be name (prefix)\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \" of four job list when you are in Job Detail Screen.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"If you are in you are in Job Detail Screen,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \" the valid job list name should be in following set:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \"{Applicant, KIV, Interview, Shortlist, a, k, i, s}(case insensitive)\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String APPLICANT_NAME \u003d \"applicant\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String KIV_NAME \u003d \"kiv\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INTERVIEW_NAME \u003d \"interview\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String SHORTLIST_NAME \u003d \"shortlist\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String APPLICANT_PREFIX \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String KIV_PREFIX \u003d \"k\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INTERVIEW_PREFIX \u003d \"i\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String SHORTLIST_PREFIX \u003d \"s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String STUB_NAME \u003d \"stub\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private static final String[] POSSIBLE_ListName \u003d {APPLICANT_NAME, KIV_NAME, INTERVIEW_NAME, SHORTLIST_NAME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        APPLICANT_PREFIX, KIV_PREFIX, INTERVIEW_PREFIX, SHORTLIST_PREFIX, STUB_NAME, EMPTY_STRING};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private static final TreeSet\u003cString\u003e POSSIBLE_ListName_TREE \u003d new TreeSet\u003c\u003e(Arrays.asList(POSSIBLE_ListName));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns true if a given string is a valid list name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static boolean isValidJobListName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (test \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new NullPointerException(\"Parameter Type cannot be null\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return POSSIBLE_ListName_TREE.contains(test);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 1,
      "CaesarTY": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/job/JobName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.job;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a job\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class JobName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Jobs applied should not start with a whitespace char\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    + \", and it should not be blank. Multiple word jobs are to be seperated by \u0027-\u0027.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\b\\\\S+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JobName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof JobName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((JobName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "DanielDSSim": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/job/UniqueJobList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.job;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.exceptions.DuplicateJobException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.exceptions.JobNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of jobs that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A job is considered unique by comparing using {@code Job#isSameJob(Job)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * jobs uses Job#isSameJob(Job) for equality so as to ensure that the job being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniqueJobList. However, the removal of a job uses Job#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the job with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Job#isSameJob(Job)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueJobList implements Iterable\u003cJob\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cJob\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cJob\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent job as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Job toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameJob);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a job to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The job must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Job toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateJobException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Removes Person from all jobs."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void removePerson(Person toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (internalList.get(i).contains(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                internalList.get(i).remove(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Removes Person from all jobs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void removePersonFromJobList(Person toRemove, JobName job, Integer listNumber) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job toEdit \u003d getJob(job);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        toEdit.removeFromList(toRemove, listNumber);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent job from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The job must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Job toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new JobNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Job getJob(JobName name) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d new Job(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (internalList.get(i).isSameJob(job)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                return internalList.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        throw new JobNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Replaces the Job {@code target} in the list with {@code editedJob}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * The Job identity of {@code editedJob} must not be the same as another existing Job in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setJob(Job target, Job editedJob) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireAllNonNull(target, editedJob);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new JobNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!target.isSameJob(editedJob) \u0026\u0026 contains(editedJob)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new DuplicateJobException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        internalList.set(index, editedJob);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code jobs}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code jobs} must not contain duplicate jobs."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setJobs(List\u003cJob\u003e jobs) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(jobs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jobsAreUnique(jobs)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateJobException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(jobs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cJob\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cJob\u003e iterator() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueJobList // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueJobList) other).internalList));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code jobs} contains only unique jobs."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean jobsAreUnique(List\u003cJob\u003e jobs) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c jobs.size() - 1; i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c jobs.size(); j++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                if (jobs.get(i).isSameJob(jobs.get(j))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "DanielDSSim": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \"Not among list of possible genders: [Female, Male, Others]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String[] POSSIBLE_GENDERS \u003d {\"Female\", \"Male\", \"Others\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final TreeSet\u003cString\u003e POSSIBLE_GENDERS_TREE \u003d new TreeSet\u003c\u003e(Arrays.asList(POSSIBLE_GENDERS));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        value \u003d gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (test \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new NullPointerException(\"Parameter Type cannot be null\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return POSSIBLE_GENDERS_TREE.contains(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Grade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Represents a Person\u0027s grade in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Grade should only contain positive numbers equals to or less than 5,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + \" and must be in exactly 2 decimal places\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-4]\" + \".\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALIDATION_REGEX_FULL \u003d \"5.00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Constructs a {@code Grade}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @param grade A valid grade."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Grade(String grade) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        checkArgument(isValidGrade(grade), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        value \u003d grade;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static boolean isValidGrade(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return test.matches(VALIDATION_REGEX) || test.matches(VALIDATION_REGEX_FULL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                || (other instanceof Grade // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 value.equals(((Grade) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 54,
      "CaesarTY": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/InterviewScores.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Represents a Person\u0027s interview scores in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidInterviewScores(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class InterviewScores {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        \"Interview Scores should be exactly 5 set of numbers, each number separated by a comma\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\" + \",\" + \"\\\\d+\" + \",\" + \"\\\\d+\" + \",\" + \"\\\\d+\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        + \",\" + \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String NO_RECORD \u003d \"No Record\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Constructs a {@code InterviewScores}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @param interviewScores A valid set of interview scores."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public InterviewScores(String interviewScores) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(interviewScores);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        checkArgument(isValidInterviewScores(interviewScores), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        value \u003d interviewScores;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if a given string is a valid set of interview scores."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static boolean isValidInterviewScores(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            test.matches(VALIDATION_REGEX) || test.matches(NO_RECORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean hasRecord() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return !value.matches(NO_RECORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public String getInterviewScore(int questionNum) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assert (hasRecord());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String[] scores \u003d value.split(\",\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String score \u003d scores[questionNum - 1].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            || (other instanceof InterviewScores // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u0026\u0026 value.equals(((InterviewScores) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 56,
      "CaesarTY": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/JobsApply.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Represents a Person\u0027s Jobs Applying For in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidJobsApply(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class JobsApply {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Jobs applied should not start with a whitespace char\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            + \", and it should not be blank. Multiple word jobs are to be seperated by \u0027-\u0027.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * The first character of the job must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\b\\\\S+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Constructs an {@code JobsApply}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @param jobsApply A valid job applying for."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public JobsApply(String jobsApply) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(jobsApply);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        checkArgument(isValidJobsApply(jobsApply), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        value \u003d jobsApply;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if a given string is a valid job applying for."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static boolean isValidJobsApply(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                || (other instanceof JobsApply // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 value.equals(((JobsApply) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 54,
      "DanielDSSim": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/KnownProgLang.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s Known Programming Languages in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidKnownProgLang(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class KnownProgLang {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Known programming languages can take any values\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the programming language must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code KnownProgLang}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param progLang A valid programming language."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public KnownProgLang(String progLang) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(progLang);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidKnownProgLang(progLang), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d progLang;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid programming language."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidKnownProgLang(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof KnownProgLang // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((KnownProgLang) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Major.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s major in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \"Major should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Major}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param major A valid major."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Major(String major) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidMajor(major), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d major;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid major."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidMajor(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Major // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Major) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Represents a Person\u0027s Nric in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \"NRIC must be unique. It should start with \u0027S\u0027, followed by exactly 7 numbers, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    + \"and end with an alphabet in capital letter\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"S\" + \"\\\\d{7}\" + \"[A-Z]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @param nric A valid NRIC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        value \u003d nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if a given string is a valid NRIC."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 value.equals(((Nric) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PastJob.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Represents a Person\u0027s past job in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPastJob(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PastJob {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Past jobs can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * The first character of the past job must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Constructs an {@code PastJob}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param pastJob A valid past job."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public PastJob(String pastJob) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(pastJob);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        checkArgument(isValidPastJob(pastJob), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        value \u003d pastJob;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns true if a given string is a valid past job."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static boolean isValidPastJob(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                || (other instanceof PastJob // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 value.equals(((PastJob) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Race race;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final School school;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Major major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Grade grade;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final InterviewScores interviewScores;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cKnownProgLang\u003e knownProgLangs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final Set\u003cPastJob\u003e pastjobs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Set\u003cJobsApply\u003e jobsApply \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Nric nric, Gender gender, Race race, Address address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            School school, Major major, Grade grade, Set\u003cKnownProgLang\u003e knownProgLangs, Set\u003cPastJob\u003e pastjobs,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  Set\u003cJobsApply\u003e jobsApply, InterviewScores interviewScores, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireAllNonNull(name, phone, email, nric, gender, race, address, school, major, grade,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                knownProgLangs, pastjobs, jobsApply, interviewScores, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.race \u003d race;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.knownProgLangs.addAll(knownProgLangs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.pastjobs.addAll(pastjobs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.jobsApply.addAll(jobsApply);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.interviewScores \u003d interviewScores;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Nric nric) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.gender \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.race \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.school \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.grade \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.interviewScores \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Race getRace() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return race;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public School getSchool() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return school;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public Major getMajor() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Grade getGrade() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public InterviewScores getInterviewScores() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return interviewScores;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public String getInterviewScores(int questionNum) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return interviewScores.getInterviewScore(questionNum);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable known programming language set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Set\u003cKnownProgLang\u003e getKnownProgLangs() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(knownProgLangs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns an immutable past job set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public final Set\u003cPastJob\u003e getPastJobs() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return Collections.unmodifiableSet(pastjobs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns an immutable jobs applying for set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final Set\u003cJobsApply\u003e getJobsApply() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return Collections.unmodifiableSet(jobsApply);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(getGender())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 otherPerson.getRace().equals(getRace())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                \u0026\u0026 otherPerson.getSchool().equals(getSchool())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 otherPerson.getPastJobs().equals(getPastJobs())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getKnownProgLangs().equals(getKnownProgLangs())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 otherPerson.getJobsApply().equals(getJobsApply())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 otherPerson.getInterviewScores().equals(getInterviewScores())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getMajor().equals(getMajor())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 otherPerson.getGrade().equals(getGrade());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return Objects.hash(name, phone, email, nric, gender, race, address, school, major, grade,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                knownProgLangs, pastjobs, jobsApply, interviewScores, tags);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(\" Nric: \")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(\" Race: \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(getRace())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                .append(\" School: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                .append(getSchool())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Major: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(getMajor())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(\" Grade: \")"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(getGrade())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(\" Interview Scores: \")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .append(getInterviewScores());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Past jobs: \");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        getPastJobs().forEach(builder::append);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        builder.append(\" Known Programming Language(s): \");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        getKnownProgLangs().forEach(builder::append);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        builder.append(\" Job(s) Applying For: \");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        getJobsApply().forEach(builder::append);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 67,
      "-": 150,
      "WeeSooJun": 9,
      "CaesarTY": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Race.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Represents a Person\u0027s race in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRace(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class Race {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \"Not among list of possible races: [Chinese, Malay, Indian, Others]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String[] POSSIBLE_RACES \u003d {\"Chinese\", \"Malay\", \"Indian\", \"Others\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final TreeSet\u003cString\u003e POSSIBLE_RACES_TREE \u003d new TreeSet\u003c\u003e(Arrays.asList(POSSIBLE_RACES));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Constructs a {@code Race}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @param race A valid race."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Race(String race) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(race);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        checkArgument(isValidRace(race), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        value \u003d race;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if a given string is a valid race."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static boolean isValidRace(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (test \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new NullPointerException(\"Parameter Type cannot be null\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return POSSIBLE_RACES_TREE.contains(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                || (other instanceof Race // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 value.equals(((Race) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/School.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSchool(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class School {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Schools can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public School(String school) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        checkArgument(isValidSchool(school), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        value \u003d school;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static boolean isValidSchool(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                || (other instanceof School // instanceof handles null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                \u0026\u0026 value.equals(((School) other).value)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueNricMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * A mapping of unique NRIC to person that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * A person is solely defined as unique by it\u0027s NRIC, regardless of update of other fields of a person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class UniqueNricMap {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final ObservableMap\u003cNric, Person\u003e internalMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final ObservableMap\u003cNric, Person\u003e internalUnmodifiableMap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            FXCollections.unmodifiableObservableMap(internalMap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if the list contains an equivalent NRIC as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean contains(Nric toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return internalMap.containsKey(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Adds a NRIC and corresponding person to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * The NRIC must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void add(Nric nric, Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (contains(nric)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        internalMap.put(nric, person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * {@code target} must exist in the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Both {@code target} and {@code editedPerson} must have same NRIC."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Nric targetNric \u003d target.getNric();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Nric editedPersonNric \u003d editedPerson.getNric();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!contains(targetNric)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!targetNric.equals(editedPersonNric) \u0026\u0026 contains(editedPersonNric)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!targetNric.equals(editedPersonNric)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            internalMap.remove(targetNric);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        internalMap.put(editedPersonNric, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Removes the NRIC and equivalent person from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * The NRIC must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void remove(Nric toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!contains(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            internalMap.remove(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableMap\u003cNric, Person\u003e asUnmodifiableObservableMap() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return internalUnmodifiableMap;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setNricMap(UniqueNricMap replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (Nric nric : replacement.internalMap.keySet()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            internalMap.put(nric, replacement.internalMap.get(nric));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setNricMap(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            internalMap.put(persons.get(i).getNric(), persons.get(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                || (other instanceof UniqueNricMap // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 internalMap.equals(((UniqueNricMap) other).internalMap));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return internalMap.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Person getPerson(Nric nric) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        requireAllNonNull(nric);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(nric);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (internalList.get(i).isSamePerson(person)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return internalList.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns number of people in the list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 6,
      "-": 146,
      "DanielDSSim": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateFilterException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Signals that the operation will result in duplicate filter (Filters are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * filter name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class DuplicateFilterException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public DuplicateFilterException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        super(\"Operation would result in duplicate filter\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/FilterNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Signals that the operation is unable to find the specified filter."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class FilterNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/AddressContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class AddressContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/EmailContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class EmailContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/Filter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Represents a filter in the address book job list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class Filter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private String filterName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Constructs a {@code Filter}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param filterName A valid filter name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public Filter(String filterName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.filterName \u003d filterName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Constructs a {@code Filter}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param filterName A valid filter name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @param predicate A valid filter name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public Filter(String filterName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.filterName \u003d filterName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns true if both filters of the same name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * This defines a weaker notion of equality between two filters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean isSameFilter(Filter otherFilter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (otherFilter \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return otherFilter !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 otherFilter.getFilterName().equals(this.getFilterName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public Predicate\u003cPerson\u003e getPredicate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public String getFilterName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return filterName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof Filter // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 filterName.equals(((Filter) other).getFilterName())); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/GenderContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Gender} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class GenderContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public GenderContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getGender().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof GenderContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((GenderContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/GradeContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class GradeContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public GradeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.valueInRange(keyword, person.getGrade().value));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof GradeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((GradeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/InterviewScoreContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class InterviewScoreContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final int questionNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public InterviewScoreContainsKeywordsPredicate(int questionNum, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.questionNum \u003d questionNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.valueInRange(keyword, person.getInterviewScores(questionNum)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof InterviewScoreContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((InterviewScoreContainsKeywordsPredicate) other).keywords))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 questionNum \u003d\u003d ((InterviewScoreContainsKeywordsPredicate) other).questionNum; // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/JobsApplyContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Gender} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class JobsApplyContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public JobsApplyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(StringUtil.getSetString"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                (person.getJobsApply()), keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof JobsApplyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((JobsApplyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/KnownProgLangContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Gender} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class KnownProgLangContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public KnownProgLangContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(StringUtil.getSetString"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                (person.getKnownProgLangs()), keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof KnownProgLangContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((KnownProgLangContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/MajorContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Major} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class MajorContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public MajorContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getMajor().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof MajorContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((MajorContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class NameContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "CaesarTY": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/NricContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class NricContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public NricContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getNric().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof NricContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((NricContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/PastJobContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Gender} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PastJobContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public PastJobContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(StringUtil.getSetString"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                (person.getPastJobs()), keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof PastJobContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((PastJobContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/PhoneContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PhoneContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/PredicateManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PredicateManager implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof PredicateManager); // instanceof handles null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/RaceContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class RaceContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public RaceContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getRace().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof RaceContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((RaceContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/SchoolContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class SchoolContainsKeywordsPredicate extends PredicateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public SchoolContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return (keywords \u003d\u003d null) || keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getSchool().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof SchoolContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 keywords.equals(((SchoolContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicate/UniqueFilterList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateFilterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.exceptions.FilterNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * A list of filters that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * A filter is considered unique by comparing using {@code Filter#isSameFilter(Filter)}. As such, adding and updating of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * filters uses  Filter#isSameFilter(Filter) for equality so as to ensure that the filter being added or updated is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * unique in terms of identity in the UniqueFilterList. However, the removal of a filter uses Filter#equals(Object) so"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * as to ensure that the filter with exactly the same fields will be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * @see Filter#isSameFilter(Filter)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class UniqueFilterList implements Iterable\u003cFilter\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final ObservableList\u003cFilter\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean contains(Filter toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFilter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void add(Filter toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new DuplicateFilterException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void remove(Filter toRemove) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new FilterNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public Iterator\u003cFilter\u003e iterator() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            || (other instanceof UniqueFilterList // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFilterList) other).internalList));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns tag name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * A list keeping track of all Tags, and for each tag, keeps track of every person that has the tag."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class UniqueTagList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final ObservableMap\u003cTag, ObservableList\u003cPerson\u003e\u003e tagAndPersonList \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final ObservableMap\u003cTag, ObservableList\u003cPerson\u003e\u003e unmodifiableTagAndPersonList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            FXCollections.unmodifiableObservableMap(tagAndPersonList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Adds person to the list of every tag that this person is tagged in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void addPerson(Person toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Set\u003cTag\u003e personTagList \u003d toAdd.getTags();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (Tag i : personTagList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (tagAndPersonList.containsKey(i)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                tagAndPersonList.get(i).add(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                ObservableList\u003cPerson\u003e newList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                newList.add(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                tagAndPersonList.put(i, newList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Find person in every tag that contains the person and remove the person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void removePerson(Person toRemove) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Set\u003cTag\u003e personTagList \u003d toRemove.getTags();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (Tag i : personTagList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (tagAndPersonList.containsKey(i)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                tagAndPersonList.get(i).remove(toRemove);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Removes the entire tag from tag list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void removeEntireTag(Tag tag) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        tagAndPersonList.remove(tag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableList\u003cPerson\u003e getListOfPerson(Tag tag) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return tagAndPersonList.get(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ObservableMap\u003cTag, ObservableList\u003cPerson\u003e\u003e asUnmodifiableObservableMap() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return unmodifiableTagAndPersonList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Nric(\"S9671597H\"), new Gender(\"Male\"), new Race(\"Chinese\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new School(\"NUS\"), new Major(\"CS\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Grade(\"4.56\"), getKnownProgLangSet(\"python\"), getPastJobSet(\"Professor\", \"SDE\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    getJobsApplySet(\"Software-Engineer\"), new InterviewScores(\"5,5,1,1,3\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Nric(\"S9412345A\"), new Gender(\"Female\"), new Race(\"Chinese\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new School(\"NTU\"), new Major(\"CS\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Grade(\"3.59\"), getKnownProgLangSet(\"python\"), getPastJobSet(\"Lawyer\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    getJobsApplySet(\"Lawyer-Intern\"), new InterviewScores(\"10,9,8,7,6\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Nric(\"S9354321R\"), new Gender(\"Female\"), new Race(\"Others\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new School(\"SMU\"), new Major(\"CS\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Grade(\"4.00\"), getKnownProgLangSet(\"python\"), getPastJobSet(\"Doctor\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    getJobsApplySet(\"Data-Analyst\"), new InterviewScores(\"5,6,7,8,10\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Nric(\"S9212345Z\"), new Gender(\"Male\"), new Race(\"Chinese\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new School(\"SUSS\"), new Major(\"CS\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Grade(\"5.00\"), getKnownProgLangSet(\"python\"), getPastJobSet(\"Data Scientist\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    getJobsApplySet(\"Investment-Analyst\"), new InterviewScores(\"10,10,10,10,10\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Nric(\"S9123456G\"), new Gender(\"Male\"), new Race(\"Malay\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new School(\"SIT\"), new Major(\"CS\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Grade(\"4.96\"), getKnownProgLangSet(\"python\"), getPastJobSet(\"Software Engineer\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                    getJobsApplySet(\"Software-Engineer\"), new InterviewScores(\"9,8,2,1,10\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Nric(\"S9012312T\"), new Gender(\"Male\"), new Race(\"Indian\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new School(\"SUTD\"), new Major(\"CS\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    new Grade(\"3.29\"), getKnownProgLangSet(\"python\"), getPastJobSet(\"Professor\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    getJobsApplySet(\"Security\"), new InterviewScores(\"1,1,1,1,1\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a past job set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cKnownProgLang\u003e getKnownProgLangSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(KnownProgLang::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Returns a past job set containing the list of strings given."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static Set\u003cPastJob\u003e getPastJobSet(String... strings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .map(PastJob::new)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns a jobs applying for set containing the list of strings given."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static Set\u003cJobsApply\u003e getJobsApplySet(String... strings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .map(JobsApply::new)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 38,
      "-": 65,
      "DanielDSSim": 5,
      "CaesarTY": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedJob.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Jackson-friendly version of {@link Job}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "class JsonAdaptedJob {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"job %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final String jobName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final List\u003cJsonAdaptedJobPersonList\u003e list1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final List\u003cJsonAdaptedJobPersonList\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final List\u003cJsonAdaptedJobPersonList\u003e list3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final List\u003cJsonAdaptedJobPersonList\u003e list4 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public JsonAdaptedJob(@JsonProperty(\"jobName\") String jobName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                          @JsonProperty(\"list1\") List\u003cJsonAdaptedJobPersonList\u003e list1,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                          @JsonProperty(\"list2\") List\u003cJsonAdaptedJobPersonList\u003e list2,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                          @JsonProperty(\"list3\") List\u003cJsonAdaptedJobPersonList\u003e list3,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                          @JsonProperty(\"list4\") List\u003cJsonAdaptedJobPersonList\u003e list4) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.jobName \u003d jobName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (list1 !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.list1.addAll(list1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (list2 !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.list2.addAll(list2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (list3 !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.list3.addAll(list3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (list4 !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.list4.addAll(list4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Converts a given {@code Job} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public JsonAdaptedJob(Job source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        jobName \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        list1.addAll(source.getPersonsNric(0).stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .map(JsonAdaptedJobPersonList::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        list2.addAll(source.getPersonsNric(1).stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .map(JsonAdaptedJobPersonList::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        list3.addAll(source.getPersonsNric(2).stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .map(JsonAdaptedJobPersonList::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        list4.addAll(source.getPersonsNric(3).stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .map(JsonAdaptedJobPersonList::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public Job toModelType(UniquePersonList ab) throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        final List\u003cNric\u003e firstList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        final List\u003cNric\u003e secondList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        final List\u003cNric\u003e thirdList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        final List\u003cNric\u003e fourthList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniquePersonList personsInJob \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (JsonAdaptedJobPersonList nric : list1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            firstList.add(nric.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Set\u003cNric\u003e firstNricSet \u003d new HashSet\u003c\u003e(firstList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniquePersonList firstPList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c firstList.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Person tempPerson \u003d ab.getPerson(firstList.get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (tempPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (!personsInJob.contains(tempPerson)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                personsInJob.add(tempPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            firstPList.add(tempPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (JsonAdaptedJobPersonList nric : list2) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            secondList.add(nric.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Set\u003cNric\u003e secondNricSet \u003d new HashSet\u003c\u003e(secondList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniquePersonList secondPList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c secondList.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Person tempPerson \u003d ab.getPerson(secondList.get(i));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (tempPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (!personsInJob.contains(tempPerson)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                personsInJob.add(tempPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            secondPList.add(tempPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (JsonAdaptedJobPersonList nric : list3) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            thirdList.add(nric.toModelType());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Set\u003cNric\u003e thirdNricSet \u003d new HashSet\u003c\u003e(thirdList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniquePersonList thirdPList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c thirdList.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Person tempPerson \u003d ab.getPerson(thirdList.get(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (tempPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (!personsInJob.contains(tempPerson)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                personsInJob.add(tempPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            thirdPList.add(tempPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (JsonAdaptedJobPersonList nric : list4) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            fourthList.add(nric.toModelType());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Set\u003cNric\u003e fourthNricSet \u003d new HashSet\u003c\u003e(fourthList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniquePersonList fourthPList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c fourthList.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Person tempPerson \u003d ab.getPerson(fourthList.get(i));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (tempPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (!personsInJob.contains(tempPerson)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                personsInJob.add(tempPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            fourthPList.add(tempPerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArrayList\u003cUniquePersonList\u003e personsHash \u003d new ArrayList\u003c\u003e (4);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsHash.add(firstPList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsHash.add(secondPList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsHash.add(thirdPList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsHash.add(fourthPList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        ArrayList\u003cSet\u003cNric\u003e\u003e personsNricList \u003d new ArrayList\u003c\u003e(4);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsNricList.add(firstNricSet);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsNricList.add(secondNricSet);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsNricList.add(thirdNricSet);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        personsNricList.add(fourthNricSet);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (jobName \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, JobName.class.getSimpleName()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!JobName.isValidName(jobName)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new IllegalValueException(JobName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        final JobName modelName \u003d new JobName(jobName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new Job(modelName, personsHash, personsNricList, personsInJob);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 5,
      "DanielDSSim": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedJobPersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " * Jackson-friendly version of {@link Nric}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "class JsonAdaptedJobPersonList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Constructs a {@code JsonAdaptedJobPersonList} with the given {@code Nric}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public JsonAdaptedJobPersonList(String nric) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Converts a given {@code JsonAdaptedJobPersonList} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public JsonAdaptedJobPersonList(Nric source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        nric \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public String getNricName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Converts this Jackson-friendly adapted nric object into the model\u0027s {@code Nric} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted nric."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public Nric toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new Nric(nric);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedJobsApply.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Jackson-friendly version of {@link JobsApply}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "class JsonAdaptedJobsApply {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final String jobsApplyName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Constructs a {@code JsonAdaptedJobsApply} with the given {@code jobsApplyName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public JsonAdaptedJobsApply(String jobsApplyName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.jobsApplyName \u003d jobsApplyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Converts a given {@code JobsApply} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public JsonAdaptedJobsApply(JobsApply source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsApplyName \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String getJobsApplyName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return jobsApplyName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Converts this Jackson-friendly adapted jobs apply object into the model\u0027s {@code JobsApply} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted jobsApply."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public JobsApply toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!JobsApply.isValidJobsApply(jobsApplyName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(JobsApply.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new JobsApply(jobsApplyName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPastJob.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Jackson-friendly version of {@link PastJob}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "class JsonAdaptedPastJob {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final String pastjobName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Constructs a {@code JsonAdaptedPastJob} with the given {@code pastjobName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public JsonAdaptedPastJob(String pastjobName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.pastjobName \u003d pastjobName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Converts a given {@code PastJob} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public JsonAdaptedPastJob(PastJob source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        pastjobName \u003d source.value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public String getPastJobName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return pastjobName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Converts this Jackson-friendly adapted pastjob object into the model\u0027s {@code PastJob} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted pastjob."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public PastJob toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (!PastJob.isValidPastJob(pastjobName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new IllegalValueException(PastJob.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return new PastJob(pastjobName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final String race;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final String school;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final String interviewScores;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cJsonAdaptedPastJob\u003e pastjobed \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedKnownProgLang\u003e knownProgLang \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final List\u003cJsonAdaptedJobsApply\u003e jobsApply \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                             @JsonProperty(\"gender\") String gender, @JsonProperty(\"race\") String race,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                             @JsonProperty(\"address\") String address, @JsonProperty(\"school\") String school,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                             @JsonProperty(\"major\") String major, @JsonProperty(\"grade\") String grade,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"knownProgLang\") List\u003cJsonAdaptedKnownProgLang\u003e knownProgLang,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"pastjobed\") List\u003cJsonAdaptedPastJob\u003e pastjobed,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                             @JsonProperty(\"jobsApply\") List\u003cJsonAdaptedJobsApply\u003e jobsApply,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                             @JsonProperty(\"interviewScores\") String interviewScores,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.race \u003d race;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.interviewScores \u003d interviewScores;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (knownProgLang !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            this.knownProgLang.addAll(knownProgLang);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (pastjobed !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            this.pastjobed.addAll(pastjobed);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (jobsApply !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            this.jobsApply.addAll(jobsApply);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        nric \u003d source.getNric().value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        race \u003d source.getRace().value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        school \u003d source.getSchool().value;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        major \u003d source.getMajor().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        grade \u003d source.getGrade().value;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewScores \u003d source.getInterviewScores().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        knownProgLang.addAll(source.getKnownProgLangs().stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedKnownProgLang::new)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        pastjobed.addAll(source.getPastJobs().stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                .map(JsonAdaptedPastJob::new)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsApply.addAll(source.getJobsApply().stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .map(JsonAdaptedJobsApply::new)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        final List\u003cPastJob\u003e personPastJobs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cKnownProgLang\u003e personKnownProgLang \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final List\u003cJobsApply\u003e personJobsApply \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        for (JsonAdaptedPastJob pastjob : pastjobed) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            personPastJobs.add(pastjob.toModelType());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedKnownProgLang knownProgLang : knownProgLang) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            personKnownProgLang.add(knownProgLang.toModelType());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        for (JsonAdaptedJobsApply jobapply : jobsApply) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            personJobsApply.add(jobapply.toModelType());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (race \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Race.class.getSimpleName()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Race.isValidRace(race)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(Race.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final Race modelRace \u003d new Race(race);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (school \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        if (!School.isValidSchool(school)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new IllegalValueException(School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        final School modelSchool \u003d new School(school);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major \u003d\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Major.isValidMajor(major)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        final Major modelMajor \u003d new Major(major);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (grade \u003d\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!Grade.isValidGrade(grade)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final Grade modelGrade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (interviewScores \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, InterviewScores"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    .class.getSimpleName()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!InterviewScores.isValidInterviewScores(interviewScores)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new IllegalValueException(InterviewScores.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final InterviewScores modelInterviewScores \u003d new InterviewScores(interviewScores);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cKnownProgLang\u003e modelKnownProgLang \u003d new HashSet\u003c\u003e(personKnownProgLang);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        final Set\u003cPastJob\u003e modelPastJobs \u003d new HashSet\u003c\u003e(personPastJobs);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        final Set\u003cJobsApply\u003e modelJobsApply \u003d new HashSet\u003c\u003e(personJobsApply);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelNric, modelGender, modelRace, modelAddress,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                modelSchool, modelMajor, modelGrade, modelKnownProgLang, modelPastJobs, modelJobsApply,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                modelInterviewScores, modelTags);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 84,
      "-": 135,
      "CaesarTY": 13,
      "WeeSooJun": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_JOB \u003d \"Jobs list contains duplicate job(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final List\u003cJsonAdaptedJob\u003e jobs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        jobs.addAll(source.getJobList().stream().map(JsonAdaptedJob::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (JsonAdaptedJob jsonAdaptedJob : jobs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            Job job \u003d jsonAdaptedJob.toModelType(addressBook.getUniquePersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            if (addressBook.hasJob(job)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            addressBook.addJob(job);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "DanielDSSim": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AnalyticsWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.analytics.Analytics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Controller for a analytics page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class AnalyticsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AnalyticsWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String FXML \u003d \"AnalyticsChart.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private BarChart jobApplicationsChart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private BarChart interviewScoresChart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private TextArea gradeText;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private PieChart genderChart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private PieChart raceChart;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private BarChart schoolChart;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private BarChart majorChart;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private BarChart pastJobsChart;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Creates a new AnalyticsWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @param root Stage to use as the root of the AnalyticsWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public AnalyticsWindow(Stage root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Creates a new AnalyticsWindow."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public AnalyticsWindow() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Shows the Analytics window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void show(Analytics analytics) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        logger.fine(\"Showing analytics results.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobApplicationsChart.setData(analytics.generateJobApplicationData());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewScoresChart.setData(analytics.generateInterviewScoresData());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        gradeText.setText(\"Mean Grade: \" + analytics.generateMeanGradeData());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        genderChart.setData(analytics.generateGenderData());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        raceChart.setData(analytics.generateRaceData());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        schoolChart.setData(analytics.generateSchoolData());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        majorChart.setData(analytics.generateMajorData());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        pastJobsChart.setData(analytics.generateJobApplicationData());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Returns true if the analytics window is currently being shown."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Hides the analytics window."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Focuses on the analytics window."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InterviewsWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " * Controller for a analytics page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class InterviewsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InterviewsWindow.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private static final String FXML \u003d \"InterviewsWindow.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private TextArea interviewsDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Creates a new AnalyticsWindow."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @param root Stage to use as the root of the AnalyticsWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public InterviewsWindow(Stage root) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Creates a new AnalyticsWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public InterviewsWindow() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Shows the Analytics window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void show(String interviews) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        logger.fine(\"Showing interviews results.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviewsDisplay.setText(interviews);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Returns true if the interviews window is currently being shown."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Hides the interviews window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Focuses on the interviews window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/JobCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class JobCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String FXML \u003d \"JobListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public final Job job;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label applicants;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label kiv;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label interviewed;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label shortlist;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public JobCard(Job job, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.job \u003d job;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        name.setText(job.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        applicants.setText(\"Applicants: \" + job.getList(0).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        kiv.setText(\"KIV: \" + job.getList(1).size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewed.setText(\"Interviewed: \" + job.getList(2).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        shortlist.setText(\"Shortlist: \" + job.getList(3).size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (!(other instanceof JobCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JobCard card \u003d (JobCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 job.equals(card.job);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/JobListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class JobListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String FXML \u003d \"JobListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(JobListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private ListView\u003cJob\u003e jobListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public JobListPanel(ObservableList\u003cJob\u003e jobList, ObservableValue\u003cJob\u003e selectedJob,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           Consumer\u003cJob\u003e onSelectedJobChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobListView.setItems(jobList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobListView.setCellFactory(listView -\u003e new JobListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            logger.fine(\"Selection in job list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            onSelectedJobChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        selectedJob.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            logger.fine(\"Selected job changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected job,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (Objects.equals(jobListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                jobListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                int index \u003d jobListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                jobListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                jobListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    class JobListViewCell extends ListCell\u003cJob\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        protected void updateItem(Job job, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            super.updateItem(job, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (empty || job \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                setGraphic(new JobCard(job, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String FXML \u003d \"MainJobWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private String currScene;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private PersonListPanel allApplicantsListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private PersonListPanel kivListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private PersonListPanel interviewedListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private PersonListPanel selectedListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private PersonListPanel allListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private JobListPanel jobsListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private StackPane allApplicantsPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private StackPane kivPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private StackPane interviewedPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private StackPane selectedPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private FlowPane allFilter;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private FlowPane kivFilter;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private FlowPane interviewFilter;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private FlowPane shortlistFilter;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private FlowPane allAppFilter;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private StackPane allPlaceholder;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private StackPane jobsPlaceholder;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Fills up all the placeholders of this window when in display all jobs and applicants scene."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    void fillAllJobsParts() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            switchToAllJobsScene();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        allListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        allPlaceholder.getChildren().add(allListPanel.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsListPanel \u003d new JobListPanel(logic.getAllJobs(), logic.selectedJobProperty(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                logic::setSelectedJob);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsPlaceholder.getChildren().add(jobsListPanel.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Change scene to display all jobs and applicants"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private void switchToAllJobsScene() throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        currScene \u003d \"allJobs\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader(getClass().getResource(\"/view/displayAllScene.fxml\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        loader.setController(this);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        primaryStage.setScene(loader.load());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Change scene to display a specific job and its four lists"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private void switchToDisplayJobScene() throws IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        currScene \u003d \"displayJobs\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader(getClass().getResource(\"/view/displayJobScene.fxml\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        loader.setController(this);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        primaryStage.setScene(loader.load());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Refreshes the jobPersonListPanel"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private void fillDisplayJobParts() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            switchToDisplayJobScene();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        allApplicantsListPanel \u003d new PersonListPanel(logic.getJobsList(0), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                logic::setSelectedAll);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        allApplicantsPlaceholder.getChildren().add(allApplicantsListPanel.getRoot());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        kivListPanel \u003d new PersonListPanel(logic.getJobsList(1), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                logic::setSelectedKiv);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        kivPlaceholder.getChildren().add(kivListPanel.getRoot());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewedListPanel \u003d new PersonListPanel(logic.getJobsList(2), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                logic::setSelectedInterviewed);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewedPlaceholder.getChildren().add(interviewedListPanel.getRoot());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        selectedListPanel \u003d new PersonListPanel(logic.getJobsList(3), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                logic::setSelectedSelected);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        selectedPlaceholder.getChildren().add(selectedListPanel.getRoot());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * stores and updates the filtered parameters for each list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private void updateFilterTags(JobListName listName, UniqueFilterList list) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        switch (listName) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case APPLICANT:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            allFilter.getChildren().clear();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            list.forEach(filter -\u003e allFilter.getChildren().add(new Label(filter.getFilterName())));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case KIV:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            kivFilter.getChildren().clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            list.forEach(filter -\u003e kivFilter.getChildren().add(new Label(filter.getFilterName())));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case INTERVIEW:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            interviewFilter.getChildren().clear();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            list.forEach(filter -\u003e interviewFilter.getChildren().add(new Label(filter.getFilterName())));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        case SHORTLIST:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            shortlistFilter.getChildren().clear();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            list.forEach(filter -\u003e shortlistFilter.getChildren().add(new Label(filter.getFilterName())));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            allAppFilter.getChildren().clear();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            list.forEach(filter -\u003e allAppFilter.getChildren().add(new Label(filter.getFilterName())));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (commandResult.isSuccessfulAnalytics()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                AnalyticsWindow analytics \u003d new AnalyticsWindow();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                analytics.show(commandResult.getAnalytics());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (commandResult.isSuccessfulFilter()) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                updateFilterTags(commandResult.getJobListName(), commandResult.getFilterList());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (commandResult.isSuccessfulDisplayJob()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                fillDisplayJobParts();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (commandResult.isSuccessfulInterviews()) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                InterviewsWindow interviews \u003d new InterviewsWindow();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                interviews.show(commandResult.getInterviews());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (commandResult.isList()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                fillAllJobsParts();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 177,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label race;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private Label school;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label major;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label grade;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private FlowPane pastjobs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private FlowPane jobsApply;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Label interviewScores;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //nric.setText(person.getNric().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        gender.setText(person.getGender().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        race.setText(person.getRace().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        school.setText(person.getSchool().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        major.setText(person.getMajor().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        grade.setText(person.getGrade().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewScores.setText(person.getInterviewScores().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        person.getPastJobs().forEach(pastjob -\u003e pastjobs.getChildren().add(new Label(pastjob.value)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        person.getJobsApply().forEach(jobApply -\u003e jobsApply.getChildren().add(new Label(jobApply.value)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 20,
      "-": 71,
      "WeeSooJun": 3,
      "CaesarTY": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            mainWindow.fillAllJobsParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/AnalyticsChart.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cfx:root title\u003d\"Analytics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cVBox alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cScrollPane prefHeight\u003d\"605.0\" prefWidth\u003d\"806.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                   \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cBarChart fx:id\u003d\"jobApplicationsChart\" layoutX\u003d\"3.0\" layoutY\u003d\"25.0\" prefHeight\u003d\"342.0\" prefWidth\u003d\"786.0\" title\u003d\"Job Applications\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cBarChart fx:id\u003d\"interviewScoresChart\" layoutX\u003d\"3.0\" layoutY\u003d\"367.0\" prefHeight\u003d\"342.0\" prefWidth\u003d\"786.0\" title\u003d\"Average Interview Scores\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cCategoryAxis prefHeight\u003d\"0.0\" prefWidth\u003d\"444.0\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cTextArea fx:id\u003d\"gradeText\" editable\u003d\"false\" layoutX\u003d\"44.0\" layoutY\u003d\"724.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"740.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cPieChart fx:id\u003d\"genderChart\" layoutX\u003d\"3.0\" layoutY\u003d\"795.0\" prefHeight\u003d\"311.0\" prefWidth\u003d\"348.0\" title\u003d\"Gender\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cPieChart fx:id\u003d\"raceChart\" layoutX\u003d\"400.0\" layoutY\u003d\"793.0\" prefHeight\u003d\"314.0\" prefWidth\u003d\"387.0\" title\u003d\"Race\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cBarChart fx:id\u003d\"majorChart\" layoutX\u003d\"3.0\" layoutY\u003d\"1107.0\" prefHeight\u003d\"342.0\" prefWidth\u003d\"786.0\" title\u003d\"Major\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cBarChart fx:id\u003d\"schoolChart\" layoutX\u003d\"3.0\" layoutY\u003d\"1456.0\" prefHeight\u003d\"342.0\" prefWidth\u003d\"786.0\" title\u003d\"School\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cBarChart fx:id\u003d\"pastJobsChart\" layoutX\u003d\"3.0\" layoutY\u003d\"1830.0\" prefHeight\u003d\"342.0\" prefWidth\u003d\"786.0\" title\u003d\"Past Jobs\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                                 \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                 \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 74
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#E57373, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    background-color: #E57373; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: #ad3c4d;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-base: #E57373;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-control-inner-background: #E57373;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #E57373;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-color: transparent transparent transparent transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-color: #ad3c4d;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #a83043;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     -fx-background-color: derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     -fx-background-color: derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     -fx-border-color: derive(transparent, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-color: derive(#ad3c4d, 25%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-color: derive(#C71585, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 50%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #DB7093;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "  -fx-text-fill: #DB7093;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #DB7093;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 25%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 50%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #ad3c4d;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-color: #ffffff #ffffff #ffffff #ffffff;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-width: 0.5;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent #DB7093 transparent #DB7093;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-color: #ad3c4d #ad3c4d #ffffff #ad3c4d;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-width: 0.5;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-effect: innershadow(gaussian, #ad3c4d, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #DB7093, #ad3c4d, #DB7093, #ad3c4d;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#allFilter {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent, derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#kivFilter{"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 20%), derive(#ad3c4d, 20%)  , derive(#ad3c4d, 20%), derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#interviewFilter{"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent,derive(#ad3c4d, 20%), transparent, derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#shortlistFilter {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent, derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#fourList{"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: derive(#ad3c4d, 20%), derive(#ad3c4d, 20%), derive(#ad3c4d, 20%), derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #880E4F;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#allFilter .label {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #B71C1C;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-padding: 1 3 2 3;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#kivFilter .label {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #B71C1C;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-padding: 1 3 2 3;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#interviewFilter .label {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #B71C1C;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-padding: 1 3 2 3;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#shortlistFilter .label {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #B71C1C;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-padding: 1 3 2 3;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#allAppFilter .label {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: #B71C1C;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-padding: 1 3 2 3;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "#pastjobs {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "#pastjobs .label {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#applicantsLabel {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent,derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#kivLabel {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent, derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#interviewLabel{"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent, derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#shortlistLabel{"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent,derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#allLabel {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent, derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#jobsLabel {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background-color: transparent, derive(#ad3c4d, 20%), transparent, derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#jobsApply .label {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-weight: regular;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-family: \"Segoe\";"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "#phoneL, #raceL, #genderL, #interviewScoresL, #gradeL, #schoolL, #emailL, #majorL, #jobApplyL, #pastJobsL {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 178,
      "-": 312,
      "CaesarTY": 12
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    -fx-background: derive(#ad3c4d, 20%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/InterviewsWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" title\u003d\"Interviews\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"650.0\" prefWidth\u003d\"871.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    \u003cTextArea fx:id\u003d\"interviewsDisplay\" editable\u003d \"false\" layoutX\u003d\"45.0\" layoutY\u003d\"42.0\" prefHeight\u003d\"567.0\" prefWidth\u003d\"770.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 17
    }
  },
  {
    "path": "src/main/resources/view/JobListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" minHeight\u003d\"100.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"90.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cLabel fx:id\u003d\"applicants\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$applicants\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cLabel fx:id\u003d\"kiv\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$kiv\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cLabel fx:id\u003d\"interviewed\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$interviewed\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cLabel fx:id\u003d\"shortlist\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$shortlist\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 39
    }
  },
  {
    "path": "src/main/resources/view/JobListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cListView fx:id\u003d\"jobListView\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 6
    }
  },
  {
    "path": "src/main/resources/view/MainJobWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cfx:root fx:id\u003d\"parentStage\" minHeight\u003d\"590.0\" minWidth\u003d\"1400.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"slaveFinder() - Your trusted Slave System!\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cImage url\u003d\"@/images/Broom.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cScene fx:id\u003d\"mainJobScene\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cVBox stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cMenuBar fx:id\u003d\"menuBar\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox fx:id\u003d\"fourList\" focusTraversable\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cVBox fx:id\u003d\"allList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cLabel fx:id\u003d\"allLabel\" prefHeight\u003d\"31.0\" prefWidth\u003d\"413.0\" text\u003d\"All Applicants\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"allPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cVBox fx:id\u003d\"kivList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cLabel fx:id\u003d\"jobsLabel\" prefHeight\u003d\"31.0\" prefWidth\u003d\"407.0\" text\u003d\"Jobs Open\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"jobsPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 75
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" minHeight\u003d\"200.0\" prefWidth\u003d\"250.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"phoneL\" minWidth\u003d\"-Infinity\" text\u003d\"Phone: \"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"genderL\" text\u003d\"Gender: \"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"interviewScoresL\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"18.0\" prefWidth\u003d\"110.0\" text\u003d\"Interview Scores: \"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"interviewScores\" prefHeight\u003d\"18.0\" prefWidth\u003d\"133.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$interviewScores\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"gradeL\" text\u003d\"Grade: \"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"grade\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$grade\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"raceL\" text\u003d\"Race: \"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"race\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$race\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"emailL\" text\u003d\"Email: \"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" prefHeight\u003d\"18.0\" prefWidth\u003d\"184.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"schoolL\" text\u003d\"School: \"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"school\" prefHeight\u003d\"18.0\" prefWidth\u003d\"180.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$school\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"majorL\" minWidth\u003d\"-Infinity\" text\u003d\"Major: \"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cLabel fx:id\u003d\"major\" prefHeight\u003d\"18.0\" prefWidth\u003d\"193.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$major\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"pastJobsL\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"18.0\" prefWidth\u003d\"67.0\" text\u003d\"Past Jobs: \"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"pastjobs\" prefHeight\u003d\"18.0\" prefWidth\u003d\"162.0\" styleClass\u003d\"cell_small_label\"\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cLabel fx:id\u003d\"jobApplyL\" prefHeight\u003d\"18.0\" prefWidth\u003d\"87.0\" text\u003d\"Jobs Applied: \"\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"jobsApply\" prefHeight\u003d\"18.0\" prefWidth\u003d\"155.0\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 146,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/displayAllScene.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cScene fx:id\u003d\"mainJobScene\" fill\u003d\"#ad3c4d\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003croot\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cVBox fx:id\u003d\"allDisplayVBox\" style\u003d\"-fx-background-color: derive(#ad3c4d, 20%);\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cmenus\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003citems\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/items\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003citems\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/items\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/menus\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"12.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cHBox fx:id\u003d\"fourList\" focusTraversable\u003d\"true\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"580.0\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cVBox fx:id\u003d\"allList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cLabel fx:id\u003d\"allLabel\" prefHeight\u003d\"31.0\" prefWidth\u003d\"413.0\" text\u003d\"All Applicants\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"allAppFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"allPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cVBox fx:id\u003d\"kivList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cLabel fx:id\u003d\"jobsLabel\" prefHeight\u003d\"31.0\" prefWidth\u003d\"407.0\" text\u003d\"Jobs Open\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"allJobFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"jobsPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/root\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c/Scene\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 75
    }
  },
  {
    "path": "src/main/resources/view/displayJobScene.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cScene fx:id\u003d\"displayScene\" fill\u003d\"#9c1616\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003croot\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cVBox fx:id\u003d\"jobDisplayVBox\" style\u003d\"-fx-background-color: derive(#ad3c4d, 20%);\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cmenus\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003citems\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/items\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003citems\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/items\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/menus\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"12.0\" prefWidth\u003d\"892.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"1134.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cHBox fx:id\u003d\"fourList\" focusTraversable\u003d\"true\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"580.0\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cVBox fx:id\u003d\"allList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"350.0\" prefWidth\u003d\"350.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cLabel fx:id\u003d\"applicantsLabel\" text\u003d\"Applicants\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"allFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"allApplicantsPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cVBox fx:id\u003d\"kivList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"350.0\" prefWidth\u003d\"350.0\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cLabel fx:id\u003d\"kivLabel\" text\u003d\"KIV\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"kivFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"column-header\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"kivPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cVBox fx:id\u003d\"interviewedList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"350.0\" prefWidth\u003d\"350.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cLabel fx:id\u003d\"interviewLabel\" prefWidth\u003d\"405.0\" text\u003d\"Interviewed\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"interviewFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"interviewedPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cVBox fx:id\u003d\"selectedList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"350.0\" prefWidth\u003d\"350.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cLabel fx:id\u003d\"shortlistLabel\" text\u003d\"Shortlist\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"shortlistFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"selectedPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/root\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c/Scene\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 95
    }
  },
  {
    "path": "src/main/resources/view/jobDisplayWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"slaveFinder() - Your trusted Slave System!\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cImage url\u003d\"@/images/Broom.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003cVBox fx:id\u003d\"jobDisplayVBox\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cMenuBar fx:id\u003d\"menuBar\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cmenus\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/menus\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cHBox fx:id\u003d\"fourList\" focusTraversable\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cVBox fx:id\u003d\"allList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cLabel fx:id\u003d\"applicantsLabel\" text\u003d\"Applicants\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cFlowPane fx:id\u003d\"allFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"allApplicantsPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cVBox fx:id\u003d\"kivList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cLabel fx:id\u003d\"kivLabel\" text\u003d\"KIV\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cFlowPane fx:id\u003d\"kivFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"column-header\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"kivPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cVBox fx:id\u003d\"interviewedList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cLabel fx:id\u003d\"interviewLabel\" prefWidth\u003d\"405.0\" text\u003d\"Interviewed\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cFlowPane fx:id\u003d\"interviewFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"interviewedPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cVBox fx:id\u003d\"selectedList\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cLabel fx:id\u003d\"shortlistLabel\" text\u003d\"Shortlist\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cFlowPane fx:id\u003d\"shortlistFilter\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"selectedPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                              \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 102
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\": \"S9123456A\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\": \"Female\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Indian\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"NUS\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\": \"4.00\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"jobsApply\": [ \"Software Engineer\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\": \"S9123456A\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\": \"Female\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Others\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"NTU\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\": \"4.00\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"jobsApply\": [ \"Software Engineer\" ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 12,
      "-": 13,
      "WeeSooJun": 2
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\": \"S1234567L\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\": \"Male\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Ang Moh\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"SMU\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\": \"3.00\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"jobsApply\": [ \"Analyst\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 6,
      "-": 8,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\": \"S9345678K\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\": \"Female\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Others\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\": \"NUS\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\": \"4.54\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"jobsApply\": [ \"Accountant\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\": \"10,8,5,10,1\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\": \"S9345678K\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\": \"Female\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Others\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"NUS\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\": \"4.54\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"jobsApply\": [ \"Accountant\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\": \"10,8,5,10,1\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 14,
      "-": 15,
      "WeeSooJun": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\": \"S9345679K\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\": \"Female\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Japan\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"NUS\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\": \"4.56\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"jobsApply\": [ \"Accountant\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 6,
      "-": 8,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\" : \"S9345678K\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Others\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\" : \"NUS\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\" : \"CS\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\" : \"4.54\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"knownProgLang\" : [ \"Python\" ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    \"pastjobed\" : [ \"Professor\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"jobsApply\" : [ \"Accountant\" ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\" : \"10,8,5,10,1\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\" : \"S9421423F\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Chinese\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\" : \"NTU\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\" : \"4.00\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"knownProgLang\" : [ \"Python\" ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    \"pastjobed\" : [ \"Lawyer\", \"SDE\" ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    \"jobsApply\" : [ \"Data-Analyst\" ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\" : \"10,2,10,10,10\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\" : \"S9123121F\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Others\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\" : \"SMU\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\" : \"4.12\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"knownProgLang\" : [ \"Python\" ],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    \"pastjobed\" : [ \"Professor\" ],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    \"jobsApply\" : [ \"Data-Analyst\" ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\" : \"1,2,1,1,1\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\" : \"S9098983R\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Chinese\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\" : \"SIM\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\" : \"5.00\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \"knownProgLang\" : [ \"Python\" ],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    \"pastjobed\" : [ \"Professor\" ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    \"jobsApply\" : [ \"Chief-Financial-Officer\" ],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\" : \"10,10,10,10,10\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\" : \"S9876523T\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Others\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\" : \"SUTD\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\" : \"4.85\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \"knownProgLang\" : [ \"Python\" ],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    \"pastjobed\" : [ \"SDE\" ],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    \"jobsApply\" : [ \"Chief-Executive-Officer\" ],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\" : \"10,10,10,10,10\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\" : \"S7951769H\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\" : \"Female\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Malay\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\" : \"SIT\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\" : \"5.00\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    \"knownProgLang\" : [ \"Python\" ],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    \"pastjobed\": [ ],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    \"jobsApply\" : [ \"Chief-Operating-Officer\" ],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\" : \"9,9,9,10,10\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"nric\" : \"S0101011Y\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"gender\" : \"Male\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"race\": \"Indian\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    \"school\" : \"SUSS\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \"major\": \"CS\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"grade\" : \"2.10\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"knownProgLang\" : [ \"Python\" ],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    \"pastjobed\": [ ],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    \"jobsApply\" : [ \"Human-Resource-Manager\" ],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    \"interviewScores\" : \"1,3,4,10,4\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 36,
      "-": 60,
      "DanielDSSim": 6,
      "WeeSooJun": 7,
      "CaesarTY": 7
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String GENDER_FIELD_ID \u003d \"#gender\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String RACE_FIELD_ID \u003d \"#race\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private static final String SCHOOL_FIELD_ID \u003d \"#school\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MAJOR_FIELD_ID \u003d \"#major\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String GRADE_FIELD_ID \u003d \"#grade\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private static final String PASTJOBS_FIELD_ID \u003d \"#pastjobs\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String JOBSAPPLY_FIELD_ID \u003d \"#jobsApply\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String INTERVIEWSCORES_FIELD_ID \u003d \"#interviewScores\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Label genderLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Label raceLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private final Label schoolLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label majorLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Label gradeLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final Label interviewScoresLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final List\u003cLabel\u003e pastjobLabels;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final List\u003cLabel\u003e jobsApplyLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        schoolLabel \u003d getChildNode(SCHOOL_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        majorLabel \u003d getChildNode(MAJOR_FIELD_ID);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        raceLabel \u003d getChildNode(RACE_FIELD_ID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        genderLabel \u003d getChildNode(GENDER_FIELD_ID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        gradeLabel \u003d getChildNode(GRADE_FIELD_ID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewScoresLabel \u003d getChildNode(INTERVIEWSCORES_FIELD_ID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Region pastjobsContainer \u003d getChildNode(PASTJOBS_FIELD_ID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        pastjobLabels \u003d pastjobsContainer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Region jobsApplyContainer \u003d getChildNode(JOBSAPPLY_FIELD_ID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsApplyLabel \u003d jobsApplyContainer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return genderLabel.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String getRace() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return raceLabel.getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public String getSchool() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return schoolLabel.getText();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public List\u003cString\u003e getPastJobs() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return pastjobLabels"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMajor() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return majorLabel.getText();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return gradeLabel.getText();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public String getInterviewScores() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return interviewScoresLabel.getText();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public List\u003cString\u003e getJobsApply() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return jobsApplyLabel"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 getGender().equals(person.getGender().value)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 getRace().equals(person.getRace().value)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                \u0026\u0026 getSchool().equals(person.getSchool().value)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getPastJobs()).equals(ImmutableMultiset.copyOf(person.getPastJobs().stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .map(pastjob -\u003e pastjob.value).collect(Collectors.toList())))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getMajor().equals(person.getMajor().value)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 getGrade().equals(person.getGrade().value)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getJobsApply()).equals(ImmutableMultiset"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .copyOf(person.getJobsApply().stream().map(jobsApply -\u003e jobsApply.value).collect(Collectors.toList())))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                \u0026\u0026 getInterviewScores().equals(person.getInterviewScores().value);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 40,
      "-": 79,
      "WeeSooJun": 8,
      "CaesarTY": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void valueInRange_validInputs_correctResult() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(StringUtil.valueInRange(\" 1.00-2.00 \", \"1.5\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(StringUtil.valueInRange(\"1.00 - 2.00\", \"1.5\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(StringUtil.valueInRange(\" 1-2\", \"1.5\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 159,
      "CaesarTY": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBSAPPLY_DESC_TRADER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.KNOWNPROGLANG_DESC_PYTHON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASTJOB_DESC_PROFESSOR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RACE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_AMY + RACE_DESC_AMY + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_AMY + KNOWNPROGLANG_DESC_PYTHON + PASTJOB_DESC_PROFESSOR + JOBSAPPLY_DESC_TRADER"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 10,
      "-": 188,
      "DanielDSSim": 1,
      "CaesarTY": 1,
      "WeeSooJun": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.analytics.Analytics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.Interviews;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public ObservableList\u003cPerson\u003e getJobsList(JobListName listNumber) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedAll(Person person) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedKiv(Person person) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedInterviewed(Person person) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedSelected(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobAllApplicantsFilteredPersonList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobKivFilteredPersonList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobInterviewFilteredPersonList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobShortlistFilteredPersonList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobAllApplicants(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobKiv(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobInterview(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobShortlist(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobAllApplicants(String predicateName) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobKiv(String predicateName) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobInterview(String predicateName) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobShortlist(String predicateName) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public UniqueFilterList getPredicateList(JobName name, Integer listNumber) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public UniqueFilterList getPredicateLists(JobListName listName) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public ObservableList\u003cJob\u003e getAllJobs() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void clearJobFilteredLists() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public ReadOnlyProperty\u003cJob\u003e selectedJobProperty() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public boolean getIsAllJobScreen() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setIsAllJobScreen(boolean staus) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedJob(Job job) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void updateBaseFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void generateInterviews() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public Interviews getInterviews() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void clearInterviews() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void setMaxInterviewsADay(int maxInterviewsADay) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void setBlockOutDates(List\u003cCalendar\u003e blockOutDates) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Analytics generateAnalytics(JobListName listName) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Analytics generateAnalytics() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addJob(Job job) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addFilteredPersonsToJob(JobName jobName, JobListName from, JobListName to) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addPersonToJob(Job job, Person person, JobListName list) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void changeFilteredPersonList(UniquePersonList list) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void revertList() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public UniquePersonList getJobList(JobName name, Integer listNumber) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public Integer movePerson(Job job, Person person, Integer source, Integer dest) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void deleteJob(Job job) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public Job getJob(JobName name) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public ObservableList\u003cJob\u003e getFilteredJobList() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public Job getActiveJob() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addPredicateAllPersons(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void removePredicateAllPersons(String predicateName) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void clearPredicateAllPersons() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void updateFilteredPersonList() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public ObservableList\u003cPerson\u003e getBaseFilteredPersonList() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void deletePersonFromJobList(Person toRemove, JobName job, JobListName list) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addPersonToJob(Job job, Person person, JobListName list) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 8,
      "-": 261,
      "DanielDSSim": 93,
      "WeeSooJun": 28,
      "CaesarTY": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearInterviewsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class ClearInterviewsCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertCommandSuccess(new ClearInterviewsCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                ClearInterviewsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertCommandSuccess(new ClearInterviewsCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                ClearInterviewsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 1,
      "WeeSooJun": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILTERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORESQ5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBNAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S9111111A\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S9000000B\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"Female\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"Male\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_RACE_AMY \u003d \"Others\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_RACE_BOB \u003d \"Indian\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String VALID_SCHOOL_AMY \u003d \"NUS\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String VALID_SCHOOL_BOB \u003d \"NTU\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MAJOR_AMY \u003d \"Computer Science\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MAJOR_BOB \u003d \"MATH\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_GRADE_AMY \u003d \"4.12\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_GRADE_RANGE_AMY \u003d \"4.11-4.13\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_GRADE_BOB \u003d \"4.00\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW1_AMY \u003d \"6\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW1_RANGE_AMY \u003d \"5-7\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW2_AMY \u003d \"6\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW2_RANGE_AMY \u003d \"5-7\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW3_AMY \u003d \"6\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW3_RANGE_AMY \u003d \"5-7\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW4_AMY \u003d \"6\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW4_RANGE_AMY \u003d \"5-7\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW5_AMY \u003d \"6\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_INTERVIEW5_RANGE_AMY \u003d \"5-7\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_KNOWNPROGLANG_PYTHON \u003d \"Python\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_KNOWNPROGLANG_JAVA \u003d \"Java\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PASTJOB_PROFESSSOR \u003d \"Professor\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PASTJOB_SDE \u003d \"SDE\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_JOBSAPPLY_TRADER \u003d \"Trader\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_JOBSAPPLY_ENGINEER \u003d \"Engineer\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_INTERVIEWSCORES_AMY \u003d \"10,9,10,9,10\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String VALID_INTERVIEWSCORES_BOB \u003d \"10,10,10,9,9\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_JOB_NAME_SE \u003d \"Search Engineer\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_JOB_NAME_TEACHER \u003d \"Teacher\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String VALID_FILTERNAME \u003d \"FilterName\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String RACE_DESC_AMY \u003d \" \" + PREFIX_RACE + VALID_RACE_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String RACE_DESC_BOB \u003d \" \" + PREFIX_RACE + VALID_RACE_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String SCHOOL_DESC_AMY \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String SCHOOL_DESC_BOB \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KNOWNPROGLANG_DESC_PYTHON \u003d \" \" + PREFIX_KNOWNPROGLANG + VALID_KNOWNPROGLANG_PYTHON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KNOWNPROGLANG_DESC_JAVA \u003d \" \" + PREFIX_KNOWNPROGLANG + VALID_KNOWNPROGLANG_JAVA;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String PASTJOB_DESC_PROFESSOR \u003d \" \" + PREFIX_PASTJOB + VALID_PASTJOB_PROFESSSOR;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String PASTJOB_DESC_SDE \u003d \" \" + PREFIX_PASTJOB + VALID_PASTJOB_SDE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MAJOR_DESC_AMY \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MAJOR_DESC_BOB \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String GRADE_DESC_AMY \u003d \" \" + PREFIX_GRADE + VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INTERVIEW1_RANGE_DESC_AMY \u003d \" \" + PREFIX_INTERVIEWSCORESQ1 + VALID_INTERVIEW1_RANGE_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INTERVIEW2_RANGE_DESC_AMY \u003d \" \" + PREFIX_INTERVIEWSCORESQ2 + VALID_INTERVIEW2_RANGE_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INTERVIEW3_RANGE_DESC_AMY \u003d \" \" + PREFIX_INTERVIEWSCORESQ3 + VALID_INTERVIEW3_RANGE_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INTERVIEW4_RANGE_DESC_AMY \u003d \" \" + PREFIX_INTERVIEWSCORESQ4 + VALID_INTERVIEW4_RANGE_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INTERVIEW5_RANGE_DESC_AMY \u003d \" \" + PREFIX_INTERVIEWSCORESQ5 + VALID_INTERVIEW5_RANGE_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String GRADE_RANGE_DESC_AMY \u003d \" \" + PREFIX_GRADE + VALID_GRADE_RANGE_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String GRADE_DESC_BOB \u003d \" \" + PREFIX_GRADE + VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String JOBSAPPLY_DESC_TRADER \u003d \" \" + PREFIX_JOBSAPPLY + VALID_JOBSAPPLY_TRADER;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String JOBSAPPLY_DESC_ENGINEER \u003d \" \" + PREFIX_JOBSAPPLY + VALID_JOBSAPPLY_ENGINEER;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INTERVIEWSCORES_DESC_AMY \u003d \" \" + PREFIX_INTERVIEWSCORES + VALID_INTERVIEWSCORES_AMY;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INTERVIEWSCORES_DESC_BOB \u003d \" \" + PREFIX_INTERVIEWSCORES + VALID_INTERVIEWSCORES_BOB;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JOBNAME_SE \u003d \" \" + PREFIX_JOBNAME + VALID_JOB_NAME_SE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JOBNAME_TEACHER \u003d \" \" + PREFIX_JOBNAME + VALID_JOB_NAME_TEACHER;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String FILTERNAME_DESC \u003d \" \" + PREFIX_FILTERNAME + VALID_FILTERNAME;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"9213113A\"; // missing \u0027S\u0027 character"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER; // empty string not allowed for gender"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INVALID_RACE_DESC \u003d \" \" + PREFIX_RACE; // empty string not allowed for race"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_SCHOOL_DESC \u003d \" \" + PREFIX_SCHOOL; // empty string not allowed for school"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_PASTJOB_DESC \u003d \" \" + PREFIX_PASTJOB; // empty string not allowed for past job"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_MAJOR_DESC \u003d \" \" + PREFIX_MAJOR + \"^^\"; //symbols not allowed"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INVALID_GRADE_DESC \u003d \" \" + PREFIX_GRADE + \"4.2\"; // 1 decimal place not allowed"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_GRADE_RANGE_DESC \u003d \" \" + PREFIX_GRADE + \"4.1*-4.2\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_INTERVIEW1_RANGE_DESC \u003d \" \" + PREFIX_GRADE + \"5*-7\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_INTERVIEW2_RANGE_DESC \u003d \" \" + PREFIX_GRADE + \"5*-7\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_INTERVIEW3_RANGE_DESC \u003d \" \" + PREFIX_GRADE + \"5*-7\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_INTERVIEW4_RANGE_DESC \u003d \" \" + PREFIX_GRADE + \"5*-7\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_INTERVIEW5_RANGE_DESC \u003d \" \" + PREFIX_GRADE + \"5*-7\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_KNOWNPROGLANG_DESC \u003d \" \" + PREFIX_KNOWNPROGLANG + \"  \"; //blank not allowed"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INVALID_JOBSAPPLY_DESC \u003d \" \" + PREFIX_JOBSAPPLY + \" \"; //blank not allowed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String INVALID_INTERVIEWSCORES_DESC \u003d \" \" + PREFIX_INTERVIEWSCORES + \" \";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_FILTERNAME \u003d \"\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    // empty string not allowed for interview scores"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_JOBNAME \u003d \" \" + PREFIX_JOBNAME + \"$#@#@$*\"; // only letters allowed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final String INVALID_LISTNAME \u003d \" invalidListName\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withGender(VALID_GENDER_AMY).withRace(VALID_RACE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withSchool(VALID_SCHOOL_AMY).withMajor(VALID_MAJOR_AMY).withGrade(VALID_GRADE_AMY)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPastJobs(VALID_PASTJOB_PROFESSSOR).withKnownProgLang(VALID_KNOWNPROGLANG_PYTHON)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withJobsApply(VALID_JOBSAPPLY_TRADER).withInterviewScores(VALID_INTERVIEWSCORES_AMY)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withNric(VALID_NRIC_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withRace(VALID_RACE_BOB).withAddress(VALID_ADDRESS_BOB).withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withMajor(VALID_MAJOR_BOB).withGrade(VALID_GRADE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPastJobs(VALID_PASTJOB_SDE).withKnownProgLang(VALID_KNOWNPROGLANG_JAVA)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .withJobsApply(VALID_JOBSAPPLY_ENGINEER).withInterviewScores(VALID_INTERVIEWSCORES_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Executes the given {@code command}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static void commandExecute(Command command, Model actualModel, CommandHistory actualCommandHistory) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.updateBaseFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Deletes the first job in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static void deleteFirstJob(Model model) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job firstJob \u003d model.getFilteredJobList().get(0);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.deleteJob(firstJob);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 46,
      "-": 170,
      "DanielDSSim": 11,
      "CaesarTY": 51,
      "WeeSooJun": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateJobCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.analytics.Analytics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.Interviews;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class CreateJobCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        new CreateJobCommand(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_jobAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingJobAdded modelStub \u003d new ModelStubAcceptingJobAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Job validJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CreateJobCommand(validJob).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(CreateJobCommand.MESSAGE_SUCCESS, validJob), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validJob), modelStub.jobsAdded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateJob_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Job validJob \u003d new JobBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CreateJobCommand createJobCommand \u003d new CreateJobCommand(validJob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithJob(validJob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(CreateJobCommand.MESSAGE_DUPLICATE_JOB);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        createJobCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Job teacher \u003d new JobBuilder().withName(\"Teacher\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Job professor \u003d new JobBuilder().withName(\"Professor\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CreateJobCommand addTeacherCommand \u003d new CreateJobCommand(teacher);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CreateJobCommand addProfessorCommand \u003d new CreateJobCommand(professor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addTeacherCommand.equals(addTeacherCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CreateJobCommand addTeacherCommandCopy \u003d new CreateJobCommand(teacher);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addTeacherCommand.equals(addTeacherCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addTeacherCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addTeacherCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addTeacherCommand.equals(addProfessorCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedSelected(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public ObservableList\u003cPerson\u003e getJobsList(JobListName listNumber) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedAll(Person person) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedKiv(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedInterviewed(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobAllApplicantsFilteredPersonList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobKivFilteredPersonList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobInterviewFilteredPersonList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateJobShortlistFilteredPersonList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobAllApplicants(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobKiv(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobInterview(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void addPredicateJobShortlist(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobAllApplicants(String predicateName) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobKiv(String predicateName) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobInterview(String predicateName) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void removePredicateJobShortlist(String predicateName) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public UniqueFilterList getPredicateList(JobName name, Integer listNumber) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public UniqueFilterList getPredicateLists(JobListName listName) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public ObservableList\u003cJob\u003e getAllJobs() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void clearJobFilteredLists() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public ReadOnlyProperty\u003cJob\u003e selectedJobProperty() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public boolean getIsAllJobScreen() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setIsAllJobScreen(boolean staus) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void setSelectedJob(Job job) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void updateBaseFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyProperty\u003cPerson\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSelectedPerson(Person person) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        public void generateInterviews() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public Interviews getInterviews() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void clearInterviews() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void setMaxInterviewsADay(int maxInterviewsADay) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public void setBlockOutDates(List\u003cCalendar\u003e blockOutDates) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public Analytics generateAnalytics(JobListName listName) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        public Analytics generateAnalytics() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addJob(Job job) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addFilteredPersonsToJob(JobName jobName, JobListName from, JobListName to) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addPersonToJob(Job job, Person person, JobListName list) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void changeFilteredPersonList(UniquePersonList list) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void revertList() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public UniquePersonList getJobList(JobName name, Integer listNumber) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public Integer movePerson(Job job, Person person, Integer source, Integer dest) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void deleteJob(Job job) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public Job getJob(JobName name) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public ObservableList\u003cJob\u003e getFilteredJobList() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public Job getActiveJob() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addPredicateAllPersons(String predicateName, Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void removePredicateAllPersons(String predicateName) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void clearPredicateAllPersons() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void updateFilteredPersonList() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        public ObservableList\u003cPerson\u003e getBaseFilteredPersonList() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void deletePersonFromJobList(Person toRemove, JobName job, JobListName list) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithJob extends ModelStub {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Job job;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithJob(Job job) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "            this.job \u003d job;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.job.isSameJob(job);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingJobAdded extends ModelStub {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cJob\u003e jobsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasJob(Job job) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            return jobsAdded.stream().anyMatch(job::isSameJob);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addJob(Job job) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(job);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "            jobsAdded.add(job);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void addFilteredPersonsToJob(JobName jobName, JobListName to, JobListName from) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void updateFilteredPersonList() {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public ObservableList\u003cPerson\u003e getBaseFilteredPersonList() {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public void changeFilteredPersonList(UniquePersonList list) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            requireNonNull(list);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public UniquePersonList getJobList(JobName name, Integer listNumber) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return jobsAdded.get(0).getList(0);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 6,
      "-": 269,
      "DanielDSSim": 112,
      "WeeSooJun": 23,
      "CaesarTY": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.updateBaseFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 175,
      "DanielDSSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteFilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILTERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.commandExecute;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.DeleteFilterCommand.MESSAGE_CANOT_FOUND_TARGET_FILTER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.DeleteFilterCommand.MESSAGE_LACK_LISTNAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.DeleteFilterCommand.MESSAGE_USAGE_ALLJOB_SCREEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.DeleteFilterCommand.MESSAGE_USAGE_DETAIL_SCREEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.INTERVIEW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.KIV;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.SHORTLIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * {@code DeleteFilterCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class DeleteFilterCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_validFilterNameAllPersons_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(VALID_FILTERNAME, EMPTY, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(filterCommand, model, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommand \u003d new DeleteFilterCommand(EMPTY, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFilterCommand.MESSAGE_DELETE_FILTER_SUCCESS, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateAllPersons(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.removePredicateAllPersons(VALID_FILTERNAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(deleteFilterCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_validFilterNameApplicant_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(VALID_FILTERNAME, APPLICANT, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(filterCommand, model, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommand \u003d new DeleteFilterCommand(APPLICANT, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFilterCommand.MESSAGE_DELETE_FILTER_SUCCESS, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateAllPersons(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.removePredicateAllPersons(VALID_FILTERNAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(deleteFilterCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_validFilterNameInterview_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(VALID_FILTERNAME, INTERVIEW, descriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(filterCommand, model, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommand \u003d new DeleteFilterCommand(INTERVIEW, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFilterCommand.MESSAGE_DELETE_FILTER_SUCCESS, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateAllPersons(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.removePredicateAllPersons(VALID_FILTERNAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(deleteFilterCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_validFilterNameShortlist_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(VALID_FILTERNAME, SHORTLIST, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(filterCommand, model, commandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommand \u003d new DeleteFilterCommand(SHORTLIST, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFilterCommand.MESSAGE_DELETE_FILTER_SUCCESS, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateAllPersons(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.removePredicateAllPersons(VALID_FILTERNAME);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(deleteFilterCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_validFilterNamKiv_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(VALID_FILTERNAME, KIV, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(filterCommand, model, commandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommand \u003d new DeleteFilterCommand(KIV, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFilterCommand.MESSAGE_DELETE_FILTER_SUCCESS, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateAllPersons(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.removePredicateAllPersons(VALID_FILTERNAME);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(deleteFilterCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_invalidListName_fail() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommand \u003d new DeleteFilterCommand(EMPTY, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LACK_LISTNAME, MESSAGE_USAGE_DETAIL_SCREEN);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(deleteFilterCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_filterNameNotFoundAllJob_fail() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommand \u003d new DeleteFilterCommand(EMPTY, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CANOT_FOUND_TARGET_FILTER, MESSAGE_USAGE_ALLJOB_SCREEN);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(deleteFilterCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_filterNameNotFoundDetailJob_fail() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommandApplicant \u003d new DeleteFilterCommand(APPLICANT, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommandInterview \u003d new DeleteFilterCommand(INTERVIEW, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommandKiv \u003d new DeleteFilterCommand(KIV, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterCommandShortList \u003d new DeleteFilterCommand(SHORTLIST, VALID_FILTERNAME);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CANOT_FOUND_TARGET_FILTER, MESSAGE_USAGE_DETAIL_SCREEN);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(deleteFilterCommandApplicant, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(deleteFilterCommandInterview, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(deleteFilterCommandKiv, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(deleteFilterCommandShortList, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterFirstCommand \u003d new DeleteFilterCommand(APPLICANT, \"firstName\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterSecondCommand \u003d new DeleteFilterCommand(APPLICANT, \"secondName\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterThirdCommand \u003d new DeleteFilterCommand(INTERVIEW, \"firstName\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(deleteFilterFirstCommand, deleteFilterFirstCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        DeleteFilterCommand deleteFilterFirstCommandCopy \u003d new DeleteFilterCommand(APPLICANT, \"firstName\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(deleteFilterFirstCommand, deleteFilterFirstCommandCopy);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different targetname -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(deleteFilterFirstCommand, deleteFilterSecondCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different list name -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(deleteFilterFirstCommand, deleteFilterThirdCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(deleteFilterFirstCommand, null);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses {@code userInput} into a {@code Descriptor}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private FilterCommand.PredicatePersonDescriptor preparePredicatePersonDescriptor(String userInput) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireAllNonNull(userInput);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d new FilterCommand.PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptor.setName(new HashSet\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 247,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILTERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.commandExecute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_LACK_LISTNAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_REDUNDANT_FILTERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_REDUNDANT_LISTNAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_USAGE_ALLJOB_SCREEN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_USAGE_JOB_DETAIL_SCREEN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.INTERVIEW;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.KIV;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.SHORTLIST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.CARL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ELLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.FIONA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor firstDescriptor \u003d preparePredicatePersonDescriptor(\"first\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand firstCommand \u003d new FilterCommand(\"\", EMPTY, firstDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor secondDescriptor \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            preparePredicatePersonDescriptor(\"second\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand secondCommand \u003d new FilterCommand(\"\", EMPTY, secondDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        NameContainsKeywordsPredicate findPredicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(findPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(firstCommand, firstCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand firstCommandCopy \u003d new FilterCommand(\"\", EMPTY, firstDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(firstCommand, firstCommandCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstCommand, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstCommand, secondCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different command type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstCommand, findCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_redundantListName_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(VALID_FILTERNAME, APPLICANT, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(filterCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            String.format(MESSAGE_REDUNDANT_LISTNAME, MESSAGE_USAGE_ALLJOB_SCREEN));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_lackListName_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(VALID_FILTERNAME, EMPTY, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(filterCommand, model, commandHistory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            String.format(MESSAGE_LACK_LISTNAME, MESSAGE_USAGE_JOB_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_repetitiveFilterName_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand commandAllPerson \u003d new FilterCommand(VALID_FILTERNAME, EMPTY, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(commandAllPerson, model, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(commandAllPerson, model, commandHistory, MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand commandApplicant \u003d new FilterCommand(VALID_FILTERNAME, APPLICANT, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand commandKiv \u003d new FilterCommand(VALID_FILTERNAME, KIV, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand commandInterview \u003d new FilterCommand(VALID_FILTERNAME, INTERVIEW, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand commandShortlist \u003d new FilterCommand(VALID_FILTERNAME, SHORTLIST, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(commandApplicant, model, commandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(commandKiv, model, commandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(commandInterview, model, commandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        commandExecute(commandShortlist, model, commandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(commandApplicant, model, commandHistory, MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(commandKiv, model, commandHistory, MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(commandInterview, model, commandHistory, MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandFailure(commandShortlist, model, commandHistory, MESSAGE_REDUNDANT_FILTERNAME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_emptyKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(VALID_FILTERNAME, EMPTY, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateAllPersons(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.updateFilteredPersonList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_emptyKeywordsApplicant_noPersonFound() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(VALID_FILTERNAME, APPLICANT, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateJobAllApplicants(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.updateJobAllApplicantsFilteredPersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getJobsList(APPLICANT));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_emptyKeywordsKiv_noPersonFound() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(VALID_FILTERNAME, KIV, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateJobAllApplicants(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.updateJobAllApplicantsFilteredPersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getJobsList(KIV));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_emptyKeywordsInterview_noPersonFound() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(VALID_FILTERNAME, INTERVIEW, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateJobAllApplicants(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.updateJobAllApplicantsFilteredPersonList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getJobsList(INTERVIEW));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_emptyKeywordsShortList_noPersonFound() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        model.setIsAllJobScreen(false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d preparePredicatePersonDescriptor(\" \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(VALID_FILTERNAME, SHORTLIST, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.addPredicateJobAllApplicants(VALID_FILTERNAME, predicator);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedModel.updateJobAllApplicantsFilteredPersonList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getJobsList(SHORTLIST));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            preparePredicatePersonDescriptor(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(VALID_FILTERNAME, EMPTY, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Predicate\u003cPerson\u003e predicator \u003d descriptor.toPredicate();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        expectedModel.updateBaseFilteredPersonList(predicator);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private FilterCommand.PredicatePersonDescriptor preparePredicatePersonDescriptor(String userInput) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        requireAllNonNull(userInput);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d new FilterCommand.PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptor.setName(new HashSet\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 5,
      "CaesarTY": 201
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PredicatePersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PredicatePersonDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptor \u003d new FilterCommand.PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptor.setName(new HashSet\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(descriptor.equals(descriptor));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same reverse values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptorReverse \u003d new FilterCommand.PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorReverse.setName(new HashSet\u003c\u003e(Arrays.asList(\"Bob\", \"Alice\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(descriptorReverse.equals(descriptor));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(descriptor.equals(5));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptorDifferent \u003d new FilterCommand.PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorDifferent.setName(new HashSet\u003c\u003e(Arrays.asList(\"Alice\", \"Tom\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(descriptor.equals(descriptorDifferent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredPersonList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEWSCORES_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEWSCORES_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_JOBSAPPLY_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASTJOB_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RACE_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBSAPPLY_DESC_ENGINEER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBSAPPLY_DESC_TRADER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.KNOWNPROGLANG_DESC_PYTHON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASTJOB_DESC_PROFESSOR;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASTJOB_DESC_SDE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RACE_DESC_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RACE_DESC_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOBSAPPLY_ENGINEER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOBSAPPLY_TRADER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASTJOB_PROFESSSOR;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASTJOB_SDE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RACE_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withPastJobs(VALID_PASTJOB_PROFESSSOR)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withJobsApply(VALID_JOBSAPPLY_ENGINEER).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + NRIC_DESC_BOB + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + NRIC_DESC_BOB + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + NRIC_DESC_BOB + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + NRIC_DESC_BOB + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // multiple schools - last school accepted"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_AMY + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //multiple majors - last major accepted"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + KNOWNPROGLANG_DESC_PYTHON + PASTJOB_DESC_PROFESSOR"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //multiple race - last race accepted"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_AMY + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //multiple genders - last gender accepted"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_AMY + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //multiple grades - last grade accepted"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_AMY + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + NRIC_DESC_BOB + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_BOB + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        //multiple interviewscores - last interviewscores accepted"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_AMY + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withPastJobs(VALID_PASTJOB_PROFESSSOR, VALID_PASTJOB_SDE)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + KNOWNPROGLANG_DESC_PYTHON + PASTJOB_DESC_PROFESSOR + PASTJOB_DESC_SDE"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_AMY + RACE_DESC_AMY + ADDRESS_DESC_AMY + RACE_DESC_AMY + SCHOOL_DESC_AMY"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + MAJOR_DESC_AMY + GRADE_DESC_AMY + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + VALID_ADDRESS_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        // missing school prefix"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + VALID_SCHOOL_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing major prefix"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + VALID_MAJOR_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // missing race prefix"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + VALID_RACE_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + VALID_GENDER_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // missing grade prefix"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + VALID_GRADE_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_NRIC_BOB"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // missing jobsApply prefix"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GRADE_DESC_BOB + VALID_JOBSAPPLY_ENGINEER,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_NRIC_BOB"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + VALID_GENDER_BOB + VALID_RACE_BOB + VALID_ADDRESS_BOB + VALID_SCHOOL_BOB + VALID_MAJOR_BOB"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + VALID_GRADE_BOB + VALID_JOBSAPPLY_TRADER,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + RACE_DESC_BOB + INVALID_ADDRESS_DESC + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid school"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + INVALID_SCHOOL_DESC + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid major"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + INVALID_MAJOR_DESC"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid race"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + INVALID_RACE_DESC + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, Race.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INVALID_GENDER_DESC + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid grade"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + INVALID_GRADE_DESC + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_NRIC_DESC"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid interviewScores"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER + INVALID_INTERVIEWSCORES_DESC,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            InterviewScores.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // invalid past job"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GRADE_DESC_BOB + INVALID_PASTJOB_DESC + INTERVIEWSCORES_DESC_BOB"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + JOBSAPPLY_DESC_ENGINEER, PastJob.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid jobsApply"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                + GRADE_DESC_BOB + INVALID_JOBSAPPLY_DESC + INTERVIEWSCORES_DESC_BOB, JobsApply.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GENDER_DESC_BOB + RACE_DESC_BOB + INVALID_ADDRESS_DESC + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_BOB + GENDER_DESC_BOB + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + MAJOR_DESC_BOB + GRADE_DESC_BOB + JOBSAPPLY_DESC_ENGINEER"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 197,
      "-": 119,
      "DanielDSSim": 2,
      "CaesarTY": 43,
      "WeeSooJun": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddAlias(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_delete() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_edit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_exit() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_help() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_history() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            parser.parseCommand(\"his\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_list() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void parseAlias_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 130,
      "WeeSooJun": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CreateJobCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_JOBNAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBNAME_SE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBNAME_TEACHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_NAME_TEACHER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.TEACHER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CreateJobCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CreateJobCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CreateJobCommandParser parser \u003d new CreateJobCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Job expectedJob \u003d new JobBuilder(TEACHER).withName(VALID_JOB_NAME_TEACHER).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + JOBNAME_TEACHER,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new CreateJobCommand(expectedJob));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, JOBNAME_SE + JOBNAME_TEACHER,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new CreateJobCommand(expectedJob));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateJobCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_JOB_NAME_TEACHER,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_JOBNAME, JobName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteFilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILTERNAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.APPLICANT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.model.job.JobListName.EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.DeleteFilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class DeleteFilterCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private DeleteFilterCommandParser parser \u003d new DeleteFilterCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void parse_validArgs_returnsDeleteFilterCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseSuccess(parser, \" \" + VALID_FILTERNAME,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new DeleteFilterCommand(EMPTY, VALID_FILTERNAME));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseSuccess(parser, APPLICANT_NAME + \" \" + VALID_FILTERNAME,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new DeleteFilterCommand(APPLICANT, VALID_FILTERNAME));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, \"1 1\", String.format(JobListName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            DeleteFilterCommand.MESSAGE_USAGE_ALLJOB_SCREEN + DeleteFilterCommand.MESSAGE_USAGE_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PREAMBLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String.format(MESSAGE_INVALID_PREAMBLE, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 175,
      "CaesarTY": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILTERNAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_RANGE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEW1_RANGE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEW2_RANGE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEW3_RANGE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEW4_RANGE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEW5_RANGE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_RANGE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEW1_RANGE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEW2_RANGE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEW3_RANGE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEW4_RANGE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEW5_RANGE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LISTNAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBSAPPLY_DESC_ENGINEER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.KNOWNPROGLANG_DESC_JAVA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASTJOB_DESC_PROFESSOR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RACE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILTERNAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_RANGE_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEW1_RANGE_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEW2_RANGE_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEW3_RANGE_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEW4_RANGE_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEW5_RANGE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOBSAPPLY_ENGINEER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_KNOWNPROGLANG_JAVA;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASTJOB_PROFESSSOR;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RACE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_INVALID_RANGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_LACK_FILTERNAME;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_USAGE_ALLJOB_SCREEN;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.FilterCommand.MESSAGE_USAGE_JOB_DETAIL_SCREEN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.job.JobListName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void parse_invalidListName_returnsFilterCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, INVALID_LISTNAME, String.format(JobListName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            MESSAGE_USAGE_ALLJOB_SCREEN + MESSAGE_USAGE_JOB_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void parse_emptyArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_LACK_FILTERNAME,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            MESSAGE_USAGE_ALLJOB_SCREEN + MESSAGE_USAGE_JOB_DETAIL_SCREEN));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void parse_invalidValueRnge_returnsFilterCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, FILTERNAME_DESC + INVALID_GRADE_RANGE_DESC, MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, FILTERNAME_DESC + INVALID_INTERVIEW1_RANGE_DESC, MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, FILTERNAME_DESC + INVALID_INTERVIEW2_RANGE_DESC, MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, FILTERNAME_DESC + INVALID_INTERVIEW3_RANGE_DESC, MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, FILTERNAME_DESC + INVALID_INTERVIEW4_RANGE_DESC, MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseFailure(parser, FILTERNAME_DESC + INVALID_INTERVIEW5_RANGE_DESC, MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptorAmy \u003d new FilterCommand.PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setName(new HashSet\u003c\u003e(Arrays.asList(VALID_NAME_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setPhone(new HashSet\u003c\u003e(Arrays.asList(VALID_PHONE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setEmail(new HashSet\u003c\u003e(Arrays.asList(VALID_EMAIL_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setRace(new HashSet\u003c\u003e(Arrays.asList(VALID_RACE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setAddress(new HashSet\u003c\u003e(Arrays.asList(VALID_ADDRESS_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setSchool(new HashSet\u003c\u003e(Arrays.asList(VALID_SCHOOL_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setMajor(new HashSet\u003c\u003e(Arrays.asList(VALID_MAJOR_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setGender(new HashSet\u003c\u003e(Arrays.asList(VALID_GENDER_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setGrade(new HashSet\u003c\u003e(Arrays.asList(VALID_GRADE_RANGE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setInterviewScoreQ1(new HashSet\u003c\u003e(Arrays.asList(VALID_INTERVIEW1_RANGE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setInterviewScoreQ2(new HashSet\u003c\u003e(Arrays.asList(VALID_INTERVIEW2_RANGE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setInterviewScoreQ3(new HashSet\u003c\u003e(Arrays.asList(VALID_INTERVIEW3_RANGE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setInterviewScoreQ4(new HashSet\u003c\u003e(Arrays.asList(VALID_INTERVIEW4_RANGE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setInterviewScoreQ5(new HashSet\u003c\u003e(Arrays.asList(VALID_INTERVIEW5_RANGE_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorAmy.setNric(new HashSet\u003c\u003e(Arrays.asList(VALID_NRIC_AMY.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d new FilterCommand(VALID_FILTERNAME, JobListName.EMPTY, descriptorAmy);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseSuccess(parser, FILTERNAME_DESC + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + EMAIL_DESC_AMY + NRIC_DESC_AMY + GENDER_DESC_AMY + RACE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + MAJOR_DESC_AMY + GRADE_RANGE_DESC_AMY + SCHOOL_DESC_AMY + INTERVIEW1_RANGE_DESC_AMY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + INTERVIEW2_RANGE_DESC_AMY + INTERVIEW3_RANGE_DESC_AMY + INTERVIEW4_RANGE_DESC_AMY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + INTERVIEW5_RANGE_DESC_AMY, expectedFilterCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // test List fields"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        FilterCommand.PredicatePersonDescriptor descriptorOtherFields \u003d new FilterCommand.PredicatePersonDescriptor();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorOtherFields.setPastJobs(new HashSet\u003c\u003e(Arrays.asList(VALID_PASTJOB_PROFESSSOR.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorOtherFields.setJobsApply(new HashSet\u003c\u003e("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Arrays.asList(VALID_JOBSAPPLY_ENGINEER.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptorOtherFields.setKnownProgLangs("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(VALID_KNOWNPROGLANG_JAVA.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        expectedFilterCommand \u003d new FilterCommand(VALID_FILTERNAME, JobListName.EMPTY, descriptorOtherFields);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertParseSuccess(parser, FILTERNAME_DESC + PASTJOB_DESC_PROFESSOR"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + JOBSAPPLY_DESC_ENGINEER + KNOWNPROGLANG_DESC_JAVA, expectedFilterCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ENGINEER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.interviews.Interviews;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasJob_jobNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasJob(ENGINEER));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasJob_jobInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addJob(ENGINEER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasJob(ENGINEER));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        private final ObservableList\u003cJob\u003e jobs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        private final Interviews interviews \u003d new Interviews();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        public Interviews getInterviews() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            return interviews;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        public ObservableList\u003cJob\u003e getJobList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            return jobs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "DanielDSSim": 10,
      "WeeSooJun": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deletePerson(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person updatedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setPerson(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setSelectedPerson(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPerson());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        modelManager.updateBaseFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        modelManager.updateBaseFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 182,
      "DanielDSSim": 5,
      "CaesarTY": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 295,
      "DanielDSSim": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/analytics/AnalyticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.analytics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class AnalyticsTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test null values"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test empty person list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test if calculate properly?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test meanGrade"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test jobApplicationBreakdown"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test meanInterviewScores"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test genderBreakdown"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test raceBreakdown"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test majorBreakdown"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test schoolBreakdown"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test pastJobBreakdown"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test generateMeanGradeData"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test generateInterviewScoresData"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test generateRaceData"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test generateGenderData"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    //test generateBarChartDataFromSet"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/interviews/InterviewsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.model.interviews;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalPersons;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class InterviewsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void generateNoWeekdays() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Interviews interviews \u003d new Interviews();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.generate(getTypicalPersons());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Set\u003cCalendar\u003e calendars \u003d interviews.getInterviewsHashMap().keySet();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (Calendar calendar : calendars) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            assertFalse(calendar.get(Calendar.DAY_OF_WEEK) \u003d\u003d Calendar.SATURDAY"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "                    || calendar.get(Calendar.DAY_OF_WEEK) \u003d\u003d Calendar.SUNDAY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void generateExcludeBlockOutOneDay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Interviews interviews \u003d new Interviews();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        List\u003cCalendar\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Calendar date \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        date.add(Calendar.DATE, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.setBlockOutDates(dates);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.generate(getTypicalPersons());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Set\u003cCalendar\u003e calendars \u003d interviews.getInterviewsHashMap().keySet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (Calendar calendar : calendars) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            assertFalse(Interviews.containsDate(dates, calendar));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void generateExcludeBlockOutDates() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Interviews interviews \u003d new Interviews();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        List\u003cCalendar\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Calendar date \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            date.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            dates.add(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            date \u003d (Calendar) date.clone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.setBlockOutDates(dates);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.generate(getTypicalPersons());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Set\u003cCalendar\u003e calendars \u003d interviews.getInterviewsHashMap().keySet();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        for (Calendar calendar : calendars) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            assertFalse(Interviews.containsDate(dates, calendar));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Interviews interviews \u003d new Interviews();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.generate(getTypicalPersons());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        interviews.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(interviews.getInterviewsHashMap().isEmpty());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 1,
      "WeeSooJun": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/job/JobNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.job;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class JobNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new JobName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new JobName(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e JobName.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(JobName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertFalse(JobName.isValidName(\" \")); // space"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertFalse(JobName.isValidName(\"Elephant man \")); // space"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(JobName.isValidName(\"engineer\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(JobName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(JobName.isValidName(\"2nd-Sergent\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(JobName.isValidName(\"Capital-Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(JobName.isValidName(\"Her-Royal-Majesty-the-Queen-of-England\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(JobName.isValidName(\"IOS-Developer\")); // name with symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(JobName.isValidName(\"hello\")); // name with symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "DanielDSSim": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/job/JobTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.job;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_NAME_TEACHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ENGINEER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.PASTOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.PROFESSOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.TEACHER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class JobTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job teacher \u003d new JobBuilder(TEACHER).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(VALID_JOB_NAME_TEACHER, teacher.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void testAddPerson() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job teacher \u003d new JobBuilder(TEACHER).withName(VALID_JOB_NAME_TEACHER).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        teacher.add(alice, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList list \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(alice);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        HashSet\u003cPerson\u003e aList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        aList.add(alice);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Set\u003cNric\u003e nrics \u003d teacher.getPersonsNric(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(list, teacher.getPeople(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(aList.contains(alice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(teacher.contains(alice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(1, nrics.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void testRemovePerson() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Person alice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job teacher \u003d new JobBuilder(TEACHER).withName(VALID_JOB_NAME_TEACHER).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        teacher.add(alice, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        teacher.remove(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Set\u003cNric\u003e nrics \u003d teacher.getPersonsNric(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertFalse(teacher.contains(alice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(0, nrics.size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSameJob() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ENGINEER.isSameJob(ENGINEER));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        // diff object same name -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job editedProfessor \u003d new JobBuilder(PROFESSOR).withName(VALID_JOB_NAME_TEACHER).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(TEACHER.isSameJob(editedProfessor));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Job editedEngineer \u003d new JobBuilder(ENGINEER).withName(VALID_JOB_NAME_TEACHER).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ENGINEER.isSameJob(editedEngineer));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Job engineerCopy \u003d new JobBuilder(ENGINEER).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ENGINEER.equals(engineerCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ENGINEER.equals(ENGINEER));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ENGINEER.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ENGINEER.equals(5));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ENGINEER.equals(PASTOR));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Job editedEngineer \u003d new JobBuilder(ENGINEER).withName(VALID_JOB_NAME_TEACHER).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ENGINEER.equals(editedEngineer));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "DanielDSSim": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/job/UniqueJobListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "package seedu.address.model.job;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_NAME_TEACHER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ENGINEER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.TEACHER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.exceptions.DuplicateJobException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.exceptions.JobNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.testutil.JobBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class UniqueJobListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private final UniqueJobList uniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void contains_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.contains(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void contains_jobNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertFalse(uniqueJobList.contains(TEACHER));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void contains_jobInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(uniqueJobList.contains(TEACHER));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void add_nullJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void add_duplicateJob_throwsDuplicateJobException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(DuplicateJobException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setJob_nullTargetJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.setJob(null, TEACHER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setJob_nullEditedJob_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.setJob(TEACHER, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setJob_targetJobNotInList_throwsJobNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(JobNotFoundException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.setJob(TEACHER, TEACHER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setJob_editedJobIsSameJob_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.setJob(TEACHER, TEACHER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        expectedUniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setJob_editedJobHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job editedTeacher \u003d new JobBuilder(TEACHER).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.setJob(TEACHER, editedTeacher);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        expectedUniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.setJob(TEACHER, ENGINEER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        expectedUniqueJobList.add(ENGINEER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.remove(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void remove_jobDoesNotExist_throwsJobNotFoundException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        thrown.expect(JobNotFoundException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.remove(TEACHER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.remove(TEACHER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        UniqueJobList expectedUniqueJobList \u003d new UniqueJobList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertEquals(expectedUniqueJobList, uniqueJobList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void checkGetJob() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(TEACHER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        JobName name \u003d new JobName(VALID_JOB_NAME_TEACHER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d uniqueJobList.getJob(name);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(job.isSameJob(TEACHER));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void testAddPersonToJob() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d new JobBuilder(TEACHER).withPersonInList(ALICE).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(job.contains(ALICE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public void testDeletePerson() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job job \u003d new JobBuilder(TEACHER).withPersonInList(ALICE).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.add(job);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        uniqueJobList.removePerson(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Job editedJob \u003d uniqueJobList.getJob(new JobName(VALID_JOB_NAME_TEACHER));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(!editedJob.contains(ALICE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanielDSSim": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String invalidGender \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Gender.isValidGender(\"91\")); // numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Gender.isValidGender(\"gender\")); // not in list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Gender.isValidGender(\"gender999\")); // mix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Male\")); // in gender list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Female\")); // in gender list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Others\")); // in gender list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GradeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class GradeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Grade(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_invalidGrade_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String invalidGrade \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidGrade));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void isValidGrade() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // null grade"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Grade.isValidGrade(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid grades"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Grade.isValidGrade(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"91\")); // not 2 decimal places"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"grade\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"4.11\")); // exact format with 2 decimal places"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/InterviewScoresTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class InterviewScoresTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new InterviewScores(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_invalidInterviewScores_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String invalidInterviewScores \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new InterviewScores(invalidInterviewScores));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void isValidInterviewScores() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // null interview scores"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e InterviewScores.isValidInterviewScores(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid interview scores"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(InterviewScores.isValidInterviewScores(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(InterviewScores.isValidInterviewScores(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(InterviewScores.isValidInterviewScores(\"grade\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(InterviewScores.isValidInterviewScores(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(InterviewScores.isValidInterviewScores(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(InterviewScores.isValidInterviewScores(\"5,3,10,3\")); // incorrect number of sets of numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // valid interview score"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(InterviewScores.isValidInterviewScores(\"4,1,2,2,1\")); // exact format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/JobsApplyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class JobsApplyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new JobsApply(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_invalidJobsApply_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String invalidJobsApply \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new JobsApply(invalidJobsApply));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void isValidJobsApply() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // null jobs apply"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e JobsApply.isValidJobsApply(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid jobs apply"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(JobsApply.isValidJobsApply(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(JobsApply.isValidJobsApply(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertFalse(JobsApply.isValidJobsApply(\"Software Development Engineer\")); //empty space in between"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // valid jobs apply"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        assertTrue(JobsApply.isValidJobsApply(\"Software-Development-Engineer\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(JobsApply.isValidJobsApply(\"I\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(JobsApply.isValidJobsApply(\"SDE\")); // short job title"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 36,
      "DanielDSSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NricTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // null Nric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid Nric"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Nric.isValidNric(\"9142345\")); // no \u0027S\u0027 at the start and no alphabet at end"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Nric.isValidNric(\"grade\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Nric.isValidNric(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Nric.isValidNric(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S923H\")); // incorrect number of digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // valid Nric"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S1234451Y\")); // exact format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PastJobTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PastJobTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PastJob(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void constructor_invalidPastJob_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        String invalidPastJob \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PastJob(invalidPastJob));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void isValidPastJob() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e PastJob.isValidPastJob(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(PastJob.isValidPastJob(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(PastJob.isValidPastJob(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(PastJob.isValidPastJob(\"Software Development Engineer\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(PastJob.isValidPastJob(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(PastJob.isValidPastJob(\"SDE\")); // short job title"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // different Nric -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person same Nric -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person fakeBob \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(BOB.isSamePerson(fakeBob));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null person same Nric -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Nric nric \u003d new Nric(VALID_NRIC_BOB);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person nullPerson \u003d new Person(nric);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(BOB.isSamePerson(nullPerson));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // same Nric, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 4,
      "-": 87,
      "DanielDSSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RaceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class RaceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Race(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void constructor_invalidRace_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String invalidRace \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Race(invalidRace));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void isValidRace() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // null race"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Race.isValidRace(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // invalid race"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Race.isValidRace(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Race.isValidRace(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Race.isValidRace(\"91\")); // numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Race.isValidRace(\"phone\")); // not in list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(Race.isValidRace(\"phone999\")); // mix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // valid races"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Race.isValidRace(\"Chinese\")); // in race list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Race.isValidRace(\"Indian\")); // in race list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Race.isValidRace(\"Malay\")); // in race list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(Race.isValidRace(\"Others\")); // in race list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SchoolTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "public class SchoolTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new School(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void constructor_invalid_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String invalidSchool \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new School(invalidSchool));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void isValidSchool() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        // null school"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e School.isValidSchool(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        // invalid school"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        // valid school"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(Address.isValidAddress(\"NUS\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertTrue(Address.isValidAddress(\"National University of Singapore\")); // long School"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeeSooJun": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueNricMapTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "public class UniqueNricMapTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private final UniqueNricMap uniqueNricMap \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void contains_nricNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(uniqueNricMap.contains(ALICE.getNric()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void contains_nricInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(uniqueNricMap.contains(ALICE.getNric()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertTrue(uniqueNricMap.contains(editedAlice.getNric()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(null, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniqueNricMap expectedUniqueNricMap \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        expectedUniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedUniqueNricMap, uniqueNricMap);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniqueNricMap expectedUniqueNricMap \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        expectedUniqueNricMap.add(editedAlice.getNric(), editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedUniqueNricMap, uniqueNricMap);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniqueNricMap expectedUniqueNricMap \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        expectedUniqueNricMap.add(BOB.getNric(), BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedUniqueNricMap, uniqueNricMap);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(BOB.getNric(), BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.remove(ALICE.getNric());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.remove(ALICE.getNric());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniqueNricMap expectedUniqueNricMap \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedUniqueNricMap, uniqueNricMap);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setNricMap((UniqueNricMap) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniqueNricMap expectedUniqueNricMap \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        expectedUniqueNricMap.add(BOB.getNric(), BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setNricMap(expectedUniqueNricMap);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedUniqueNricMap, uniqueNricMap);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setNricMap((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.add(ALICE.getNric(), ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setNricMap(personList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        UniqueNricMap expectedUniqueNricMap \u003d new UniqueNricMap();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        expectedUniqueNricMap.add(BOB.getNric(), BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedUniqueNricMap, uniqueNricMap);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        uniqueNricMap.setNricMap(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 177,
      "DanielDSSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkGetPerson() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Nric nric \u003d new Nric(VALID_NRIC_BOB);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        Person person \u003d uniquePersonList.getPerson(nric);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(person.isSamePerson(BOB));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 190,
      "DanielDSSim": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/AddressContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class AddressContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        AddressContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_addressContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Collections.singletonList(\"Main\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_addressDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match phone, email and address, but does not match Address"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"NUS\", \"CS\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/EmailContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class EmailContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        EmailContainsKeywordsPredicate firstPredicate \u003d new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        EmailContainsKeywordsPredicate secondPredicate \u003d new EmailContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        EmailContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_emailContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Collections.singletonList(\"alice@email.com\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"AliCe@email.com\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_emailDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match Email"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"Alice\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Main\", \"Street\", \"NUS\", \"CS\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/FilterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class FilterTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Filter firstFilter \u003d new Filter(\"first\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Filter secondFilter \u003d new Filter(\"second\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(firstFilter, firstFilter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Filter firstFilterCopy \u003d new Filter(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(firstFilter, firstFilterCopy);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstFilter, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstFilter, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstFilter, secondFilter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/GenderContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class GenderContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GenderContainsKeywordsPredicate firstPredicate \u003d new GenderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GenderContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new GenderContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GenderContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new GenderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_genderContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GenderContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new GenderContainsKeywordsPredicate(Collections.singletonList(\"Male\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withGender(\"Male\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new GenderContainsKeywordsPredicate(Arrays.asList(\"mAle\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withGender(\"Male\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_genderDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GenderContainsKeywordsPredicate predicate \u003d new GenderContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withGender(\"Male\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new GenderContainsKeywordsPredicate(Arrays.asList(\"Female\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withGender(\"Male\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match Gender"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new GenderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"NUS\", \"CEO\", \"Male\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").withJobsApply(\"CEO\").withPastJobs(\"SE\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/GradeContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class GradeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GradeContainsKeywordsPredicate firstPredicate \u003d new GradeContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GradeContainsKeywordsPredicate secondPredicate \u003d new GradeContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GradeContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new GradeContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_gradeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GradeContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new GradeContainsKeywordsPredicate(Collections.singletonList(\"4.20-4.23\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withGrade(\"4.21\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_gradeDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        GradeContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new GradeContainsKeywordsPredicate(Collections.singletonList(\"4.20-4.23\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withGrade(\"4.12\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/InterviewScoreContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class InterviewScoreContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        InterviewScoreContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new InterviewScoreContainsKeywordsPredicate(1, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        InterviewScoreContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new InterviewScoreContainsKeywordsPredicate(2, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        InterviewScoreContainsKeywordsPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new InterviewScoreContainsKeywordsPredicate(1, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        InterviewScoreContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new InterviewScoreContainsKeywordsPredicate(1, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstPredicate, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstPredicate, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different question num -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(firstPredicate, thirdPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_interviewContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        InterviewScoreContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new InterviewScoreContainsKeywordsPredicate(1, Collections.singletonList(\"4-6\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withInterviewScores(\"5,5,5,5,5\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_interviewDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        InterviewScoreContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new InterviewScoreContainsKeywordsPredicate(1, Collections.singletonList(\"3-4\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withInterviewScores(\"5,5,5,5,5\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/JobsApplyContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class JobsApplyContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JobsApplyContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new JobsApplyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JobsApplyContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new JobsApplyContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JobsApplyContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new JobsApplyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_jobsApplyContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JobsApplyContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new JobsApplyContainsKeywordsPredicate(Collections.singletonList(\"SE\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withJobsApply(\"SE\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new JobsApplyContainsKeywordsPredicate(Arrays.asList(\"sE\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withJobsApply(\"SE\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_jobsApplyDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JobsApplyContainsKeywordsPredicate predicate \u003d new JobsApplyContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withJobsApply(\"SE\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new JobsApplyContainsKeywordsPredicate(Arrays.asList(\"SE\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withJobsApply(\"CEO\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match JobsApply"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new JobsApplyContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"NUS\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").withJobsApply(\"CEO\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/KnownProgLangContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class KnownProgLangContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        KnownProgLangContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new KnownProgLangContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        KnownProgLangContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new KnownProgLangContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        KnownProgLangContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new KnownProgLangContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_knownProgLangContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        KnownProgLangContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new KnownProgLangContainsKeywordsPredicate(Collections.singletonList(\"Python\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withKnownProgLangs(\"Python\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new KnownProgLangContainsKeywordsPredicate(Arrays.asList(\"PYthon\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withKnownProgLangs(\"Python\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_knownProgLangDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        KnownProgLangContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new KnownProgLangContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withKnownProgLangs(\"Python\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new KnownProgLangContainsKeywordsPredicate(Arrays.asList(\"Python\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withKnownProgLangs(\"C++\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match KnownProgLang"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new KnownProgLangContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"NUS\", \"CEO\", \"Male\", \"A9671597H\", \"Python\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9671597H\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").withJobsApply(\"CEO\").withPastJobs(\"SE\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withGender(\"Female\").withKnownProgLangs(\"C++\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/MajorContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class MajorContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        MajorContainsKeywordsPredicate firstPredicate \u003d new MajorContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        MajorContainsKeywordsPredicate secondPredicate \u003d new MajorContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        MajorContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new MajorContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_majorContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        MajorContainsKeywordsPredicate predicate \u003d new MajorContainsKeywordsPredicate(Collections.singletonList(\"CS\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withMajor(\"CS\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new MajorContainsKeywordsPredicate(Arrays.asList(\"aRt\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withMajor(\"ART\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_majorDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        MajorContainsKeywordsPredicate predicate \u003d new MajorContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withMajor(\"CS\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new MajorContainsKeywordsPredicate(Arrays.asList(\"ART\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withMajor(\"CS\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match Major"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new MajorContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"NUS\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"NUS\", \"CS\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 4,
      "-": 72,
      "CaesarTY": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/NricContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class NricContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        NricContainsKeywordsPredicate firstPredicate \u003d new NricContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        NricContainsKeywordsPredicate secondPredicate \u003d new NricContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        NricContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new NricContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_nricContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        NricContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new NricContainsKeywordsPredicate(Collections.singletonList(\"S9671597H\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withNric(\"S9671597H\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new NricContainsKeywordsPredicate(Arrays.asList(\"s9671597H\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withNric(\"S9671597H\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_nricDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        NricContainsKeywordsPredicate predicate \u003d new NricContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withNric(\"S9671597H\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new NricContainsKeywordsPredicate(Arrays.asList(\"A9671597H\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withNric(\"S9671597H\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match Nric"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new NricContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"NUS\", \"CEO\", \"Male\", \"A9671597H\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9671597H\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").withJobsApply(\"CEO\").withPastJobs(\"SE\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withGender(\"Female\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/PastJobContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PastJobContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PastJobContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new PastJobContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PastJobContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new PastJobContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PastJobContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new PastJobContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_pastJobContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PastJobContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new PastJobContainsKeywordsPredicate(Collections.singletonList(\"SE\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPastJobs(\"SE\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new PastJobContainsKeywordsPredicate(Arrays.asList(\"sE\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPastJobs(\"SE\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_pastJobDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PastJobContainsKeywordsPredicate predicate \u003d new PastJobContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPastJobs(\"SE\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new PastJobContainsKeywordsPredicate(Arrays.asList(\"SE\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPastJobs(\"CEO\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match PastJob"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new PastJobContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"NUS\", \"CEO\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").withJobsApply(\"CEO\").withPastJobs(\"SE\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/PhoneContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PhoneContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PhoneContainsKeywordsPredicate firstPredicate \u003d new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PhoneContainsKeywordsPredicate secondPredicate \u003d new PhoneContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_phoneContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new PhoneContainsKeywordsPredicate(Collections.singletonList(\"12345\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_phoneDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match Phone"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"alice@email.com\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Main\", \"Street\", \"NUS\", \"CS\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/PredicateManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class PredicateManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PredicateManager predicate \u003d new PredicateManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(predicate, predicate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PredicateManager predicateCopy \u003d new PredicateManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(predicate, predicateCopy);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(predicate, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertNotEquals(predicate, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // always return true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        PredicateManager predicate \u003d new PredicateManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/RaceContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class RaceContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        RaceContainsKeywordsPredicate firstPredicate \u003d new RaceContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        RaceContainsKeywordsPredicate secondPredicate \u003d new RaceContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        RaceContainsKeywordsPredicate firstPredicateCopy \u003d new RaceContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_raceContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        RaceContainsKeywordsPredicate predicate \u003d new RaceContainsKeywordsPredicate("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Collections.singletonList(\"Chinese\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withRace(\"Chinese\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new RaceContainsKeywordsPredicate(Arrays.asList(\"ChiNese\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withRace(\"Chinese\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_raceDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        RaceContainsKeywordsPredicate predicate \u003d new RaceContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withRace(\"Chinese\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new RaceContainsKeywordsPredicate(Arrays.asList(\"usa\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withRace(\"Chinese\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match other fields, but does not match Race"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new RaceContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Main\", \"Street\", \"NUS\", \"CS\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/SchoolContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class SchoolContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        SchoolContainsKeywordsPredicate firstPredicate \u003d new SchoolContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        SchoolContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new SchoolContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        SchoolContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new SchoolContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_schoolContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        SchoolContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            new SchoolContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withSchool(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withSchool(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withSchool(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withSchool(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void test_schoolDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        SchoolContainsKeywordsPredicate predicate \u003d new SchoolContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withSchool(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withSchool(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        // Keywords match phone, email and address, but does not match School"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            \"Chinese\", \"Main\", \"Street\", \"CS\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").withEmail(\"alice@email.com\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withNric(\"S9091209Q\").withGender(\"Female\").withRace(\"Chinese\").withAddress(\"Main Street\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"2.35\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicate/UniqueFilterListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "package seedu.address.model.person.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.FILTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateFilterException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.exceptions.FilterNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "public class UniqueFilterListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private final UniqueFilterList uniqueFilterList \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void contains_nullFilter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.contains(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertFalse(uniqueFilterList.contains(FILTER));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.add(FILTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertTrue(uniqueFilterList.contains(FILTER));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void add_nullFilter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.add(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void add_duplicateFilter_throwsDuplicateFilterException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.add(FILTER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        thrown.expect(DuplicateFilterException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.add(FILTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void remove_nullFilter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.remove(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void remove_personDoesNotExist_throwsFilterNotFoundException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        thrown.expect(FilterNotFoundException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.remove(FILTER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void remove_existingFilter_removesFilter() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.add(FILTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        uniqueFilterList.remove(FILTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        UniqueFilterList expectedUniqueFilterList \u003d new UniqueFilterList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(expectedUniqueFilterList, uniqueFilterList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CaesarTY": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String INVALID_RACE \u003d \"Ang Moh\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"2131X\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"444\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String INVALID_GRADE \u003d \"123\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String INVALID_JOBSAPPLY \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String INVALID_INTERVIEWSCORES \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private static final String INVALID_SCHOOL \u003d \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_MAJOR \u003d \"^^\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_KNOWNPROGLANG \u003d \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private static final String INVALID_PASTJOB \u003d \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String VALID_GRADE \u003d BENSON.getGrade().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String VALID_INTERVIEWSCORES \u003d BENSON.getInterviewScores().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final String VALID_RACE \u003d BENSON.getRace().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private static final String VALID_SCHOOL \u003d BENSON.getSchool().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MAJOR \u003d BENSON.getMajor().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedKnownProgLang\u003e VALID_KNOWNPROGLANG \u003d BENSON.getKnownProgLangs().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedKnownProgLang::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private static final List\u003cJsonAdaptedPastJob\u003e VALID_PASTJOBS \u003d BENSON.getPastJobs().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .map(JsonAdaptedPastJob::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private static final List\u003cJsonAdaptedJobsApply\u003e VALID_JOBSAPPLY \u003d BENSON.getJobsApply().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            .map(JsonAdaptedJobsApply::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        INVALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        null, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void toModelType_invalidSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, INVALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String expectedMessage \u003d School.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public void toModelType_nullSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_GENDER, VALID_RACE,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_ADDRESS, null, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG, VALID_PASTJOBS,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidMajor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, INVALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Major.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullMajor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, null, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Major.class.getSimpleName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_invalidRace_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, INVALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d Race.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_nullRace_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, null, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Race.class.getSimpleName());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                INVALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                null, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_invalidGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, INVALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d Grade.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_nullGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, null, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_NRIC,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_invalidInterviewScores_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, INVALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d InterviewScores.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_nullInterviewScores_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE, VALID_KNOWNPROGLANG,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                VALID_PASTJOBS, VALID_JOBSAPPLY, null, VALID_TAGS);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, InterviewScores.class.getSimpleName());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidKnownProgLang_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedKnownProgLang\u003e invalidKnownProgLang \u003d new ArrayList\u003c\u003e(VALID_KNOWNPROGLANG);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidKnownProgLang.add(new JsonAdaptedKnownProgLang(INVALID_KNOWNPROGLANG));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        invalidKnownProgLang, VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public void toModelType_invalidPastJobs_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        List\u003cJsonAdaptedPastJob\u003e invalidPastJobs \u003d new ArrayList\u003c\u003e(VALID_PASTJOBS);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        invalidPastJobs.add(new JsonAdaptedPastJob(INVALID_PASTJOB));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    VALID_KNOWNPROGLANG, invalidPastJobs, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public void toModelType_invalidJobsApply_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        List\u003cJsonAdaptedJobsApply\u003e invalidJobsApply \u003d new ArrayList\u003c\u003e(VALID_JOBSAPPLY);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        invalidJobsApply.add(new JsonAdaptedJobsApply(INVALID_JOBSAPPLY));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_KNOWNPROGLANG, VALID_PASTJOBS, invalidJobsApply, VALID_INTERVIEWSCORES, VALID_TAGS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_GENDER, VALID_RACE, VALID_ADDRESS, VALID_SCHOOL, VALID_MAJOR, VALID_GRADE,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                        VALID_KNOWNPROGLANG, VALID_PASTJOBS, VALID_JOBSAPPLY, VALID_INTERVIEWSCORES, invalidTags);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 166,
      "-": 124,
      "DanielDSSim": 1,
      "WeeSooJun": 21,
      "CaesarTY": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "DanielDSSim": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.testutil.TypicalObjects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalObjects.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "DanielDSSim": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setNric(person.getNric());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setRace(person.getRace());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        descriptor.setSchool(person.getSchool());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setGrade(person.getGrade());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setKnownProgLangs(person.getKnownProgLangs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptor.setPastJobs(person.getPastJobs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setJobsApply(person.getJobsApply());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setInterviewScores(person.getInterviewScores());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Race} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public EditPersonDescriptorBuilder withRace(String race) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setRace(new Race(race));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Major} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withMajor(String major) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setMajor(new Major(major));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Sets the {@code School} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public EditPersonDescriptorBuilder withSchool(String school) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        descriptor.setSchool(new School(school));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Grade} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public EditPersonDescriptorBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setGrade(new Grade(grade));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public EditPersonDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code InterviewScores} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public EditPersonDescriptorBuilder withInterviewScores(String interviewScores) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setInterviewScores(new InterviewScores(interviewScores));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses the {@code jobsApply} into a {@code Set\u003cJobsApply\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public EditPersonDescriptorBuilder withJobsApply(String... jobsApply) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Set\u003cJobsApply\u003e jobsApplySet \u003d Stream.of(jobsApply).map(JobsApply::new)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.setJobsApply(jobsApplySet);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code pastjobs} into a {@code Set\u003cPastJob\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withKnownProgLang(String... knownProgLang) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cKnownProgLang\u003e knownProgLangSet \u003d Stream.of(knownProgLang).map(KnownProgLang::new)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setKnownProgLangs(knownProgLangSet);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses the {@code pastjobs} into a {@code Set\u003cPastJob\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public EditPersonDescriptorBuilder withPastJobs(String... pastjobs) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Set\u003cPastJob\u003e pastjobSet \u003d Stream.of(pastjobs).map(PastJob::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        descriptor.setPastJobs(pastjobSet);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 64,
      "-": 108,
      "CaesarTY": 12,
      "WeeSooJun": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/JobBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.job.JobName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.person.predicate.UniqueFilterList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JobBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private static final int NUMBER_OF_LISTS \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private static final String DEFAULT_JOBNAME \u003d \"HELPER\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private JobName name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private UniquePersonList personsInJob \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private ArrayList\u003cUniquePersonList\u003e personsList \u003d new ArrayList\u003c\u003e (NUMBER_OF_LISTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private ArrayList\u003cSet\u003cNric\u003e\u003e personsNricList \u003d new ArrayList\u003c\u003e(NUMBER_OF_LISTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private ArrayList\u003cUniqueFilterList\u003e predicateList \u003d new ArrayList\u003c\u003e (NUMBER_OF_LISTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JobBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new JobName(DEFAULT_JOBNAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            personsList.add(new UniquePersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            personsNricList.add(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the JobBuilder with the data of {@code jobToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JobBuilder(Job jobToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d jobToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (int i \u003d 0; i \u003c 4; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.personsList.add(new UniquePersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.personsNricList.add(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code JobName} of the {@code Job} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public JobBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new JobName(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     * Sets the {@code Person} in first list of the {@code Job} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public JobBuilder withPersonInList(Person person) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        if (!personsInJob.contains(person)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            this.personsInJob.add(person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.personsList.get(0).add(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        this.personsNricList.get(0).add(person.getNric());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /***/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Job build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new Job(name, personsList, personsNricList, personsInJob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "DanielDSSim": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1245756B\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String DEFAULT_RACE \u003d \"Chinese\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static final String DEFAULT_SCHOOL \u003d \"NUS\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_MAJOR \u003d \"CS\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String DEFAULT_GRADE \u003d \"3.00\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final String DEFAULT_INTERVIEWSCORES \u003d \"1,2,3,4,5\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String DEFAULT_JOBSAPPLY \u003d \"Software-Engineer\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Race race;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    private School school;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private InterviewScores interviewScores;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cKnownProgLang\u003e knownProgLangs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private Set\u003cPastJob\u003e pastjobs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    private Set\u003cJobsApply\u003e jobsApply;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        race \u003d new Race(DEFAULT_RACE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        school \u003d new School(DEFAULT_SCHOOL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        major \u003d new Major(DEFAULT_MAJOR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        grade \u003d new Grade(DEFAULT_GRADE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        knownProgLangs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        pastjobs \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsApply \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsApply.add(new JobsApply(DEFAULT_JOBSAPPLY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewScores \u003d new InterviewScores(DEFAULT_INTERVIEWSCORES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        race \u003d personToCopy.getRace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        school \u003d personToCopy.getSchool();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        major \u003d personToCopy.getMajor();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        grade \u003d personToCopy.getGrade();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        knownProgLangs \u003d new HashSet\u003c\u003e(personToCopy.getKnownProgLangs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        pastjobs \u003d new HashSet\u003c\u003e(personToCopy.getPastJobs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        jobsApply \u003d new HashSet\u003c\u003e(personToCopy.getJobsApply());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        interviewScores \u003d personToCopy.getInterviewScores();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code knownProgLangs} into a {@code Set\u003cKnowProgLang\u003e} and set it to the {@code Person}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withKnownProgLangs(String ... knownProgLangs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        this.knownProgLangs \u003d SampleDataUtil.getKnownProgLangSet(knownProgLangs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Parses the {@code jobsApply} into a {@code Set\u003cJobsApply\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public PersonBuilder withJobsApply(String ... jobsApply) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.jobsApply \u003d SampleDataUtil.getJobsApplySet(jobsApply);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     * Parses the {@code pastjobs} into a {@code Set\u003cPastJob\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public PersonBuilder withPastJobs(String ... pastjobs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        this.pastjobs \u003d SampleDataUtil.getPastJobSet(pastjobs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Grade} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public PersonBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.grade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code InterviewScores} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public PersonBuilder withInterviewScores(String interviewScores) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.interviewScores \u003d new InterviewScores(interviewScores);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     * Sets the {@code Race} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public PersonBuilder withRace(String race) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        this.race \u003d new Race(race);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     * Sets the {@code School} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public PersonBuilder withSchool(String school) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        this.school \u003d new School(school);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Major} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withMajor(String major) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d new Major(major);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    /***/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        return new Person(name, phone, email, nric, gender, race, address, school, major, grade, knownProgLangs,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                pastjobs, jobsApply, interviewScores, tags);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 82,
      "-": 118,
      "DanielDSSim": 1,
      "CaesarTY": 12,
      "WeeSooJun": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEWSCORES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_KNOWNPROGLANG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASTJOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.KnownProgLang;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.PastJob;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    public static String getAddAlias(Person person) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        sb.append(PREFIX_NRIC + person.getNric().value + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        sb.append(PREFIX_RACE + person.getRace().value + \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        sb.append(PREFIX_SCHOOL + person.getSchool().value + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_MAJOR + person.getMajor().value + \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        sb.append(PREFIX_GRADE + person.getGrade().value + \" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getKnownProgLangs().stream().forEach("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_KNOWNPROGLANG + s.value + \" \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        person.getPastJobs().stream().forEach("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            s -\u003e sb.append(PREFIX_PASTJOB + s.value + \" \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        person.getJobsApply().stream().forEach("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            s -\u003e sb.append(PREFIX_JOBSAPPLY + s.value + \" \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        sb.append(PREFIX_INTERVIEWSCORES + person.getInterviewScores().value + \" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.value).append(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.getRace().ifPresent(race -\u003e sb.append(PREFIX_RACE).append(race.value).append(\" \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        descriptor.getSchool().ifPresent(school -\u003e sb.append(PREFIX_SCHOOL).append(school.value).append(\" \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getMajor().ifPresent(major -\u003e sb.append(PREFIX_MAJOR).append(major.value).append(\" \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.getGrade().ifPresent(grade -\u003e sb.append(PREFIX_GRADE).append(grade.value).append(\" \"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getKnownProgLangs().isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cKnownProgLang\u003e knownProgLangs \u003d descriptor.getKnownProgLangs().get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (knownProgLangs.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_KNOWNPROGLANG).append(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                knownProgLangs.forEach(s -\u003e sb.append(PREFIX_KNOWNPROGLANG).append(s.value).append(\" \"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        if (descriptor.getPastJobs().isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            Set\u003cPastJob\u003e pastjobs \u003d descriptor.getPastJobs().get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            if (pastjobs.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                sb.append(PREFIX_PASTJOB).append(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                pastjobs.forEach(s -\u003e sb.append(PREFIX_PASTJOB).append(s.value).append(\" \"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        if (descriptor.getJobsApply().isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Set\u003cJobsApply\u003e jobsApply \u003d descriptor.getJobsApply().get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            if (jobsApply.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                sb.append(PREFIX_JOBSAPPLY).append(\" \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                jobsApply.forEach(s -\u003e sb.append(PREFIX_JOBSAPPLY).append(s.value).append(\" \"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        descriptor.getInterviewScores().ifPresent(interviewScores -\u003e sb.append(PREFIX_INTERVIEWSCORES)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            .append(interviewScores.value).append(\" \"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 26,
      "-": 69,
      "CaesarTY": 14,
      "WeeSooJun": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalObjects.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILTERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEWSCORES_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEWSCORES_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOBSAPPLY_ENGINEER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOBSAPPLY_TRADER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_JOB_NAME_TEACHER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_KNOWNPROGLANG_PYTHON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASTJOB_PROFESSSOR;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RACE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RACE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.model.job.Job;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.model.person.predicate.Filter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "public class TypicalObjects {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withRace(\"Others\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withNric(\"S9345678K\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withGender(\"Female\").withPhone(\"94351253\").withSchool(\"NUS\").withMajor(\"CS\").withGrade(\"4.54\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withKnownProgLangs(\"Python\").withPastJobs(\"Professor\").withJobsApply(\"Accountant\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        .withInterviewScores(\"10,8,5,10,1\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withRace(\"Chinese\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withNric(\"S9421423F\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withGender(\"Male\").withPhone(\"98765432\").withSchool(\"NTU\").withMajor(\"CS\").withGrade(\"4.00\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withKnownProgLangs(\"Python\").withPastJobs(\"Lawyer\", \"SDE\").withJobsApply(\"Data-Analyst\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        .withInterviewScores(\"10,2,10,10,10\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withRace(\"Others\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withNric(\"S9123121F\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withGender(\"Male\").withAddress(\"wall street\").withGrade(\"4.12\").withJobsApply(\"Data-Analyst\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withInterviewScores(\"1,2,1,1,1\").withKnownProgLangs(\"Python\").withPastJobs(\"Professor\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withSchool(\"SMU\").withMajor(\"CS\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withRace(\"Chinese\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withNric(\"S9098983R\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withGender(\"Male\").withAddress(\"10th street\").withGrade(\"5.00\").withJobsApply(\"Chief-Financial-Officer\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withInterviewScores(\"10,10,10,10,10\").withSchool(\"SIM\").withMajor(\"CS\").withKnownProgLangs(\"Python\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        .withPastJobs(\"Professor\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withRace(\"Others\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(\"9482224\").withEmail(\"werner@example.com\").withNric(\"S9876523T\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withGender(\"Female\").withAddress(\"michegan ave\").withGrade(\"4.85\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        .withSchool(\"SUTD\").withMajor(\"CS\").withKnownProgLangs(\"Python\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withPastJobs(\"SDE\").withJobsApply(\"Chief-Executive-Officer\").withInterviewScores(\"10,10,10,10,10\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withRace(\"Malay\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(\"9482427\").withEmail(\"lydia@example.com\").withNric(\"S7951769H\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withGender(\"Female\").withAddress(\"little tokyo\").withGrade(\"5.00\").withJobsApply(\"Chief-Operating-Officer\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withInterviewScores(\"9,9,9,10,10\").withSchool(\"SIT\").withMajor(\"CS\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withKnownProgLangs(\"Python\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withRace(\"Indian\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(\"9482442\").withEmail(\"anna@example.com\").withNric(\"S0101011Y\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withGender(\"Male\").withAddress(\"4th street\").withGrade(\"2.10\").withJobsApply(\"Human-Resource-Manager\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withInterviewScores(\"1,3,4,10,4\").withSchool(\"SUSS\").withMajor(\"CS\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withKnownProgLangs(\"Python\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withRace(\"Chinese\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(\"8482424\").withEmail(\"stefan@example.com\").withAddress(\"little india\").withNric(\"S3344556O\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withGender(\"Male\").withGrade(\"4.10\").withJobsApply(\"Security-Manager\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withInterviewScores(\"2,3,4,10,10\").withSchool(\"NUS\").withMajor(\"CS\").withKnownProgLangs(\"Python\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withRace(\"Others\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        .withNric(\"S4867206C\").withGender(\"Male\").withGrade(\"3.00\").withJobsApply(\"Business-Development-Intern\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withInterviewScores(\"2,2,2,2,2\").withPhone(\"8482131\").withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withAddress(\"chicago ave\").withSchool(\"NTU\").withMajor(\"CS\").withKnownProgLangs(\"Python\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withRace(VALID_RACE_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        .withSchool(VALID_SCHOOL_AMY).withPastJobs(VALID_PASTJOB_PROFESSSOR)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withKnownProgLangs(VALID_KNOWNPROGLANG_PYTHON).withMajor(VALID_MAJOR_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withGender(VALID_GENDER_AMY).withGrade(VALID_GRADE_AMY).withInterviewScores(VALID_INTERVIEWSCORES_AMY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withJobsApply(VALID_JOBSAPPLY_TRADER).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withRace(VALID_RACE_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withMajor(VALID_MAJOR_BOB).withSchool(VALID_SCHOOL_BOB).withPastJobs(VALID_PASTJOB_PROFESSSOR)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        .withKnownProgLangs(VALID_KNOWNPROGLANG_PYTHON)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withNric(VALID_NRIC_BOB).withGender(VALID_GENDER_BOB).withGrade(VALID_GRADE_BOB)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        .withInterviewScores(VALID_INTERVIEWSCORES_BOB).withJobsApply(VALID_JOBSAPPLY_ENGINEER).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final Job ENGINEER \u003d new JobBuilder().withName(\"Engineer\").build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final Job PROFESSOR \u003d new JobBuilder().withName(\"Professor\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final Job SOLDIER \u003d new JobBuilder().withName(\"Soldier\").build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final Job PASTOR \u003d new JobBuilder().withName(\"Pastor\").build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final Job TEACHER \u003d new JobBuilder().withName(VALID_JOB_NAME_TEACHER).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static final String KEYWORD_MATCHING_PILOT \u003d \"Pilot\"; // A keyword that matches PILOT"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    public static final Filter FILTER \u003d new Filter(VALID_FILTERNAME);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    private TypicalObjects() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        for (Job job : getTypicalJobs()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            ab.addJob(job);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    public static List\u003cJob\u003e getTypicalJobs() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TEACHER, PROFESSOR, SOLDIER, PASTOR, ENGINEER));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 53,
      "-": 40,
      "DanielDSSim": 33,
      "WeeSooJun": 12,
      "CaesarTY": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // no past job"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Person personWithNoPastJobs \u003d new PersonBuilder().withPastJobs(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoPastJobs, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCardDisplay(personCard, personWithNoPastJobs, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        // with past job"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        Person personWithPastJob \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        personCard \u003d new PersonCard(personWithPastJob, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCardDisplay(personCard, personWithPastJob, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 8,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPerson\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person secondPerson \u003d TYPICAL_PERSONS.get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d new Phone(\"000\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d new Email(\"a@aa\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Nric nric \u003d new Nric(\"S4853234G\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Gender gender \u003d new Gender(\"Female\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Race race \u003d new Race(\"Indian\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "            School school \u003d new School(\"n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Major major \u003d new Major(\"ME\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Grade grade \u003d new Grade(\"4.32\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "            JobsApply jobsApply \u003d new JobsApply(\"Software-Engineer\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Set\u003cJobsApply\u003e jobsApplySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            jobsApplySet.add(jobsApply);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            InterviewScores interviewScores \u003d new InterviewScores(\"4,5,6,7,1\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Person person \u003d new Person(name, phone, email, nric, gender, race, address, school,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                major, grade, Collections.emptySet(), Collections.emptySet(), jobsApplySet, interviewScores,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                    Collections.emptySet());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 18,
      "-": 104,
      "DanielDSSim": 2,
      "WeeSooJun": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addPerson(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "DanielDSSim": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedCard.getRace(), actualCard.getRace());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedCard.getGender(), actualCard.getGender());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedCard.getGrade(), actualCard.getGrade());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedCard.getJobsApply(), actualCard.getJobsApply());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedCard.getInterviewScores(), actualCard.getInterviewScores());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertEquals(expectedCard.getSchool(), actualCard.getSchool());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getMajor(), actualCard.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(expectedCard.getPastJobs(), actualCard.getPastJobs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedPerson.getGender().value, actualCard.getGender());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedPerson.getGrade().value, actualCard.getGrade());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedPerson.getInterviewScores().value, actualCard.getInterviewScores());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedPerson.getRace().value, actualCard.getRace());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertEquals(expectedPerson.getSchool().value, actualCard.getSchool());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getMajor().value, actualCard.getMajor());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        assertEquals(expectedPerson.getPastJobs().stream().map(pastjob -\u003e pastjob.value).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "                actualCard.getPastJobs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertEquals(expectedPerson.getJobsApply().stream().map(jobsApply -\u003e jobsApply.value)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                .collect(Collectors.toList()), actualCard.getJobsApply());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 11,
      "-": 71,
      "WeeSooJun": 2,
      "CaesarTY": 3
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEWSCORES_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEWSCORES_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_JOBSAPPLY_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RACE_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBSAPPLY_DESC_ENGINEER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBSAPPLY_DESC_TRADER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.KNOWNPROGLANG_DESC_PYTHON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASTJOB_DESC_PROFESSOR;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RACE_DESC_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RACE_DESC_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEWSCORES_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RACE_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBSAPPLY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.ALICE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.HOON;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.IDA;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.JobsApply;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + EMAIL_DESC_AMY + \"   \" + NRIC_DESC_AMY + \"   \" + GENDER_DESC_AMY + \"   \" + RACE_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + \"   \" + SCHOOL_DESC_AMY + \"  \" + MAJOR_DESC_AMY + \"   \" + GRADE_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + \" \" + JOBSAPPLY_DESC_TRADER + \"   \" + PASTJOB_DESC_PROFESSOR + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + KNOWNPROGLANG_DESC_PYTHON + \" \" + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except nric -\u003e added */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_BOB + JOBSAPPLY_DESC_TRADER + GRADE_DESC_AMY + PASTJOB_DESC_PROFESSOR"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + KNOWNPROGLANG_DESC_PYTHON + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        /* Case: add a person with tags and past jobs, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + NAME_DESC_BOB + EMAIL_DESC_BOB + RACE_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PASTJOB_DESC_PROFESSOR + KNOWNPROGLANG_DESC_PYTHON + GENDER_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_BOB + JOBSAPPLY_DESC_ENGINEER + INTERVIEWSCORES_DESC_BOB;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different school -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withSchool(VALID_SCHOOL_BOB).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different major -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withMajor(VALID_MAJOR_BOB).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: add a duplicate person except with different race -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withRace(VALID_RACE_BOB).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: add a duplicate person except with different gender -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: add a duplicate person except with different grade -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withGrade(VALID_GRADE_BOB).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: add a duplicate person except with different interview scores -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withInterviewScores(VALID_INTERVIEWSCORES_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: add a duplicate person except with different jobs apply -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_JOBSAPPLY.getPrefix() + \"Marketing-Intern\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + RACE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        /* Case: missing school -\u003e rejected */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing major -\u003e rejected */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: missing race -\u003e rejected */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: missing gender -\u003e rejected */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: missing grade -\u003e rejected */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: missing nric -\u003e rejected */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: missing jobs apply -\u003e rejected */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + RACE_DESC_AMY"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_AMY + JOBSAPPLY_DESC_TRADER;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid race -\u003e rejected */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_RACE_DESC"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_AMY + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, Race.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INVALID_ADDRESS_DESC + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_AMY + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        /* Case: invalid school -\u003e rejected */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + INVALID_SCHOOL_DESC + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_AMY + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid major -\u003e rejected */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + INVALID_MAJOR_DESC + GENDER_DESC_AMY + GRADE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + INVALID_GENDER_DESC + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_AMY + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid grade -\u003e rejected */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + INVALID_GRADE_DESC"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_AMY + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INVALID_NRIC_DESC + JOBSAPPLY_DESC_TRADER + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid interview scores -\u003e rejected */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY + GRADE_DESC_AMY"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + NRIC_DESC_AMY + JOBSAPPLY_DESC_TRADER + INVALID_INTERVIEWSCORES_DESC;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, InterviewScores.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid jobs apply -\u003e rejected */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + RACE_DESC_AMY"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + ADDRESS_DESC_AMY + SCHOOL_DESC_AMY + MAJOR_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + GRADE_DESC_AMY + NRIC_DESC_AMY + INVALID_JOBSAPPLY_DESC + INTERVIEWSCORES_DESC_AMY;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(command, JobsApply.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 159,
      "-": 229,
      "DanielDSSim": 6,
      "WeeSooJun": 8,
      "CaesarTY": 13
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILTERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import seedu.address.testutil.TypicalObjects;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        return TypicalObjects.getTypicalAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        executeCommand(FilterCommand.COMMAND_WORD + \" \" + VALID_FILTERNAME + PREFIX_NAME + keyword);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 247,
      "DanielDSSim": 2,
      "CaesarTY": 6
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "DanielDSSim": 1,
      "CaesarTY": 3
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private static final int OUTBOUND_VALUE \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        int invalidIndex \u003d getModel().getFilteredPersonList().size() + OUTBOUND_VALUE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 171,
      "DanielDSSim": 1,
      "CaesarTY": 7
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INTERVIEWSCORES_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INTERVIEWSCORES_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RACE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.JOBSAPPLY_DESC_ENGINEER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASTJOB_DESC_PROFESSOR;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RACE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_KNOWNPROGLANG_PYTHON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "import static seedu.address.testutil.TypicalObjects.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.InterviewScores;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Major;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "import seedu.address.model.person.Race;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "    private static final int OUTBOUND_VALUE \u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + RACE_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_BOB + \"  \" + MAJOR_DESC_BOB + \"  \" + PASTJOB_DESC_PROFESSOR + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GENDER_DESC_BOB + \" \" + GRADE_DESC_BOB + \" \" + NRIC_DESC_BOB + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + INTERVIEWSCORES_DESC_BOB + \" \" + JOBSAPPLY_DESC_ENGINEER + \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .withKnownProgLangs(VALID_KNOWNPROGLANG_PYTHON).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + RACE_DESC_BOB + ADDRESS_DESC_BOB + SCHOOL_DESC_BOB + MAJOR_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "            + GENDER_DESC_BOB + GRADE_DESC_BOB + NRIC_DESC_BOB + INTERVIEWSCORES_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            + JOBSAPPLY_DESC_ENGINEER;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "        int invalidIndex \u003d getModel().getFilteredPersonList().size() + OUTBOUND_VALUE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_PREAMBLE, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_PREAMBLE, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_PREAMBLE, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid race -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_RACE_DESC,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Race.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_GENDER_DESC,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid grade -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_GRADE_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_NRIC_DESC,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        /* Case: invalid interview scores -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_INTERVIEWSCORES_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "            InterviewScores.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WeeSooJun"
        },
        "content": "        /* Case: invalid school -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_SCHOOL_DESC,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid major -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiuyuhua"
        },
        "content": "                + INVALID_MAJOR_DESC,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        expectedModel.updateBaseFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        expectedModel.updateBaseFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CaesarTY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiuyuhua": 58,
      "-": 199,
      "DanielDSSim": 4,
      "WeeSooJun": 3,
      "CaesarTY": 14
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanielDSSim"
        },
        "content": "        model.updateBaseFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Person... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "DanielDSSim": 1
    }
  }
]
