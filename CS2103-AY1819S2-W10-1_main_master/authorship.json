[
  {
    "path": ".github/ISSUE_TEMPLATE/user-story-issue-template.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "name: User Story Issue Template"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "about: For user stories"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "title: As a _ user, I can _"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "labels: type.Story"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "assignees: \u0027\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "so that I can _"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "### Part of epics:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "- #24 Entry management"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "- #25 RSS feed support"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "- #27 Reader view"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "- #28 Offline mode"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003cremove as needed\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "### Sub-tasks:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "### Related to:"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 21
    }
  },
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d README"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W10-1/main[image:https://travis-ci.org/CS2103-AY1819S2-W10-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "https://ci.appveyor.com/project/thomastanck/main[image:https://ci.appveyor.com/api/projects/status/k99mmh3peur0nef5?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W10-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W10-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "https://www.codacy.com/app/thomastanck/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S2-W10-1/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/cb4fa0d78e424d9d9eb3faf34102e157[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* README helps you read more content you care about anywhere you go."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* *All-in-one*: Follow web feeds and bookmark web pages - save interesting articles, cooking recipes, song lyrics, or anything else you come across while browsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* *Read Anywhere*: Read offline, anywhere and anytime you want - all the links you save are downloaded onto your personal computer so you\u0027ll never lose them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* *Stay Focused*: Consume more content more comfortably - reading view strips away visual clutter to create a distraction-free reading experience so you can focus on content."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* *Keep Organized*: Curate your content - organize and categorize your feeds and links and find them quickly with powerful search, sort and filter functionality."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* *Fast*: Never leave your keyboard - single-shot commands and keyboard shortcuts let you do more in less time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* You\u0027ll love README if you consume a lot of web content and want to keep up to date with your favourite websites"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  but you\u0027re a road warrior who doesn\u0027t have regular Internet access."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  Whether you\u0027re heading off on a flight or working in a cafe,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  README has you covered with all the content you care about in one place."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* This is an integrated bookmark manager and feed reader desktop application for subscribing to web feeds and saving web pages to read later on your personal computer. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* This application is based on the AddressBook-Level4 project created by the SE-EDU initiative at https://github.com/se-edu/."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Libraries used:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://github.com/chimbori/crux[Crux],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://jsoup.org/[jsoup],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://rometools.github.io/rome/[ROME],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://github.com/google/guava[Guava],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://commons.apache.org/[Apache Commons],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://github.com/junit-team/junit5[JUnit5],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  https://github.com/TestFX/TestFX[TestFX]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "rlrh": 23,
      "thomastanck": 4,
      "-": 24
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"githubId\": \"epicfailname\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"displayName\": \"JON...ENG\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"authorNames\": [\"epicfailname\", \"Jonathan Cheng\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"githubId\": \"qjqqyy\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"displayName\": \"QI ... JI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"authorNames\": [\"qjqqyy\", \"Qi Ji\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"githubId\": \"rlrh\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"displayName\": \"RAY...HAN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"authorNames\": [\"rlrh\", \"Rayner Lim\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"githubId\": \"thomastanck\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"displayName\": \"TAN...MAS\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "      \"authorNames\": [\"thomastanck\", \"Thomas Tan\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    id \u0027de.gafertp.plantuml\u0027 version \u00271.2.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "apply plugin: \u0027de.gafertp.plantuml\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    maven { url \"https://jitpack.io\" }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    compile group: \u0027com.github.chimbori\u0027, name:\u0027crux\u0027, version: \u00272.0.2\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    implementation group: \u0027com.rometools\u0027, name: \u0027rome\u0027, version: \u00271.12.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    implementation group: \u0027commons-codec\u0027, name: \u0027commons-codec\u0027, version: \u00271.9\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    implementation group: \u0027org.apache.commons\u0027, name: \u0027commons-text\u0027, version: \u00271.6\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "plantUml {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    render input: \u0027docs/diagrams/*.puml\u0027, output: \"${project.buildDir.absolutePath}/docs/html5/images/\", format: \u0027png\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        \u0027site-name\u0027: \u0027README\u0027,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-W10-1/main\u0027,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "// Copies files needed for network tests into the generated HTML files to"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "// use github pages for network testing."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "// This is needed as asciidoctor does not deploy non-asciidoc blobs."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "task copyNetworktestFiles(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    from \"${asciidoctor.sourceDir}/networktests\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/networktests\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "asciidoctor.dependsOn copyNetworktestFiles"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "rlrh": 4,
      "qjqqyy": 11,
      "thomastanck": 9,
      "-": 234
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Rayner Lim"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "image::rlrh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{empty}[https://github.com/rlrh[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Responsibilities: Reading view feature, UI component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Thomas Tan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "image::thomastanck.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "{empty}[https://github.com/thomastanck[github]] [\u003c\u003cthomastanck#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Role: Software Architect, Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Responsibilities: Offline support feature, Storage component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Qi Ji"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "image::qjqqyy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{empty}[https://github.com/qjqqyy[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Role: Quality Assurance Lead, Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Responsibilities: Web feed subscription feature, Model component"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Jonathan Cheng"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "image::epicfailname.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{empty}[https://github.com/epicfailname[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Role: Technical Lead, Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Responsibilities: Entry management feature, Logic component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "rlrh": 20,
      "thomastanck": 1,
      "-": 26
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W10-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d README - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W10-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "By: `CS2103-AY1819S2-W10-1`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Context-specific commands"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d\u003d Planned implementation"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "In order to implement the multiple commands for the application, we require"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "a way to disallow certain commands in certain contexts. For example, when the"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "user is viewing the archives, he should not be allowed to use the `archive`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "command since every entry listed is already archive. Vice-versa, when a user is"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "uses the `list` command, `unarchive` should be registered as an unknown command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Modular Parser classes"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "We require individual Parser classes for each context."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Each Parser class should only parse commands allowed for the context it represents."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "The following classes were created to support this feature."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* `EntryBookParser` — the base abstract class all Parsers extend from"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* `EntryBookListParser` — Parser for the list context."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* `EntryBookArchivesParser` —  Parser for the archives context."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* `EntryBookFeedsParser` —  Parser for the feeds context."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* `EntryBookSearchParser` —  Parser for the search context."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Each Parser class has a `parseCommand(String)` operation that parses the string command."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "`EntryBookParser#parseCommand(String)` is the fallback operation used when it\u0027s children"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "fail to parse the command. It parses commands that is common in any context."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Context state for Model"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Context is represented by the enum class `ModelContext`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "`Model` to holds this information of the context the application is in, which decides"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Parser class `Logic` should use when a command is executed."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Each `ModelContext` holds a static Parser class that parses commands for the context it represents."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "The following operations are implemented"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* `Model#getContext()` — gets the context the application is in."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* `Model#setContext(ModelContext)` — sets the context the application is in."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Given below is an example usage scenario and how this mechanism behaves."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "1.  The user launches the application. The `ModelManager` will default"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "to `ModelContext.CONTEXT_LIST` context."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "2.  The user executes the `archive` command to archive entries."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "3.  The user erroneously executes the `unarchive` command, and the application reports"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "it as an \"Unknown command\"."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "4.  The user executes the `archives` command to view his archives. In the execution of"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "of this `ArchivesCommand`, `model.setContext(ModelContext)` is called to change the"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "context to `ModelContext.CONTEXT_ARCHIVES` context."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "5.  The user executes the `unarchive` command with correct arguments, and the"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "application successfully executes the command."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* *Alternative 1 (current choice):* Context information is held by `Model`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "** Pros: makes the most sense for the context to change only if a context-switching command"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "is successfully executed, and `Command` only has a reference to `Model`, not `Logic`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "** Cons: `Model` is slightly more dependent on `Logic` since it has an indirect reference"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "to Parser classes."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* *Alternative 2:* Context information is held by `Logic`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "** Pros: weakens the dependency of `Model` on `Logic`. Context can then be thought of as a"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "state for the `Logic` module."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "** Cons: making this work will involve architectural changes since only the `UI` module has"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "a reference to `Logic` module class (Parser)."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// tag::autofill[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Autofill missing title or description when adding a link"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rlrh"
        },
        "content": "When adding a link using the `add` command, users only need to specify the `URL` field."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rlrh"
        },
        "content": "If the `Title` or `Description` field is not specified, they are automatically filled."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rlrh"
        },
        "content": "This makes adding links much faster and more convenient for users."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rlrh"
        },
        "content": "If both `Title` and `Description` are already specified by the user, `AddCommand` just adds the `Entry` to the `Model`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Otherwise, `AddCommand` attempts to find replacement candidates for a missing `Title` or `Description` heuristically, then updates the `Entry` with the best replacement and adds it to the `Model`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The fallback is a default `Title` and `Description` guaranteed to work."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The first attempt to find replacement candidates is by parsing just the URL."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rlrh"
        },
        "content": "This will work even if there is no Internet access, whereas the following attempts require Internet access."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The next attempt is by using the Jsoup library to parse the raw HTML into a Document object and obtain information likely to be present,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rlrh"
        },
        "content": "and the last attempt is by using the Crux library to process the Document object and extract metadata."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rlrh"
        },
        "content": "In this way, the last successful attempt to replace `Title` and `Description` becomes their current best replacement candidate."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Since we cascade from the last choice to the first choice for `Title` and `Description` separately,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rlrh"
        },
        "content": "by the end we have found the best possible replacement candidate for each of them given the circumstances."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Where autofill should be carried out"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **Alternative 1 (current choice):** In `AddCommand`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Pros: The pattern of keeping logic within `Command` is followed by containing autofill logic within `AddCommand`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Cons: Autofill only works for links added through `AddCommand`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **Alternative 2:** In `Model`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Pros: Autofill can work for any link added to `Model`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Cons: The clean `Model` is polluted by including non-core logic like autofill."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// end::autofill[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// tag::readerview[]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Reader view mode"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The reader view gives users a more focused and comfortable reading experience by removing clutter and formatting content into a clean and easy-to-read layout."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Using the `view` command, users can switch between the `browser` and `reader` view modes."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The two available view modes are specified in the `ViewMode` enum."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The `Model` exposes an observable `viewModeProperty`, which is set by `ViewModeCommand` and observed by `BrowserPanel`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The `BrowserPanel` keeps track of whether an original web page or a reader view version is loaded."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rlrh"
        },
        "content": "If an original web page is loaded but the `reader` view mode is selected, the reader view is generated and loaded,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rlrh"
        },
        "content": "except when the currently loaded web page is the default blank page or error page."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The Crux and Jsoup external libraries do the heavy lifting of parsing the raw HTML currently loaded in the `WebView` to extract useful metadata and content."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rlrh"
        },
        "content": "These are combined into a new HTML document, which is styled using Bootstrap and then loaded in the `WebView`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: When reader view should be generated"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **Alternative 1 (current choice):** Generate reader view on-the-fly from the currently loaded web page."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Pros: More flexible in the situations it can be used, will use less disk space."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Cons: May have performance issues because it needs to be generated again every time, more difficult to implement."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **Alternative 2:** When adding a link, generate reader view and save it to disk."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Pros: Easier to implement, better performance as reader view is only generated only once for each link."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** Cons: Will save redundant data and use more disk space."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// end::readerview[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003d\u003d\u003d Feed subscription"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003d\u003d\u003d\u003d Planned implementation"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "The feed subscription system requires `ModelManager` to contain more"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "than one `EntryBook`. Since we should only show a single `EntryBook` at"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "a time, we have to decouple the `EntryBook` that is displayed from the"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "ones that are in `ModelManager`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Decoupling displayed `EntryBook`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Decoupling the displayed `EntryBook` means that the following additional"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "methods are implemented"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "* `Model#displayEntryBook(EntryBook)` — shows the `EntryBook` provided"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "in the user interface"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Given below is an example usage scenario and how this mechanism behaves."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "1.  The user launches the application. The `ModelManager` will default"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "to displaying the `EntryBook` which corresponds to the default (list)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "context."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "2.  The user executes the `feed [valid_feed_url]` command to view a web"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "feed. The `feed` command fetches and parses the web feed into an"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "`EntryBook` and calls `Model#displayEntryBook` with it."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "3.  In the case of the `feed` command, the context changes to `search`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "(internal working name). In the `search` context the `EntryBook` is"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "read-only, and you can import links from the currently displayed"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "`EntryBook` into the `list` context `EntryBook`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Multiple `EntryBook`’s"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Some contexts (such as `feed` and `archive` context) requires"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "maintaining a separate `EntryBook` each. Since we will only need at most"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "4 separate `EntryBook`’s, `Model` will basically contain differently"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "named `EntryBook`’s with their own accessors."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "* *Alternative 1 (current choice):* multiple differently named"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "`EntryBook`’s with differently-named accessors each"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "** Pros: easy to implement"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "** Cons: accessors are basically duplicated code"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "* *Alternative 2:* Each `EntryBook` belongs to a `ModelContext`,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "modifiers overloaded to be context-sensitive"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "** Pros: less code duplication due to polymorphism"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "** Cons: writing to an `EntryBook` that does not belong the current"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "state change will either involve an extra accessor (basically"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Alternative 1), or changing state (specifically `Model#setContext`),"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "which is not robust."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "// tag::network-design[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d `Network` design"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "As many components have to make network calls"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "to retrieve resources from the Internet,"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "we decided to centralise it in a \"singleton\" class named `Network`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "The following sections describe the different design patterns we considered"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "and their pros and cons."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d Singleton pattern (chosen pattern)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "This pattern is to create a new class named `Network`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "This class is abstract so it cannot be instantiated,"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "and all its methods are marked `private`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Pros"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* Allows for convenient access to the `Network`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* Good cohesion: everything with networking details in one file"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* Easy to write and subsequently modify"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Cons"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* Global variable,"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  which encourages coupling with everything else in the codebase"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d TODO: Some other pattern we considered but we forgot"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "TODO: Add details here"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d TODO: Comparison of methods and why we went with Singleton"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "TODO: Details"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "// end::network-design[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d Offline mode"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "Offline mode requires many changes to the architecture as a whole."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "The main point of conflict is that we need to store many articles to disk"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "but not keep their full contents in memory."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "This means the full state is no longer stored within `EntryBook` anymore."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "The following sections describe"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "the design decisions made to support offline mode."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d Architectural changes"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Removing undo/redo feature"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "The undo/redo feature assumes that a `ReadOnlyEntryBook`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "contains all the information in an `EntryBook`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "and that it can be used to restore an `EntryBook` to any prior state."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "However, this assumption no longer holds if we were to store articles on disk"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "but not keep them in memory."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "Instead of modifying the design of undo/redo,"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "we decided to simply remove the feature as it was not a core feature"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "required in our user stories."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Moving `Storage` behind `Model`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "Because we now have state that exists on the disk but not in memory,"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "we want to reflect this as well in the design."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "State belongs in the `Model` abstraction layer,"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "but at the same time disk access belongs inside `Storage`."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "We decided it was not wise to keep these too decoupled,"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "and instead we moved `Storage` under `Model`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "to improve cohesion at the expense of worsening coupling."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d Planned implementation"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "After the architectural changes were made,"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "there are a few design considerations that needed to be made:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `Network` design"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "As we need to save the articles to disk,"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "we first need a way to obtain said articles from the Internet."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "This is described in section xref:network-design[]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Interfacing with BrowserPanel"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "We need to design this component so that `BrowserPanel` can use it."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "TODO: Elaborate"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storage model"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "TODO: Talk about storing things to disk, and why this method"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Some features require a working internet connection, and as a result some tests will require internet access to pass."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* has a need to manage a significant number of links"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* is a heavy consumer of web content who follows many websites"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* wants to download content for offline browsing because of irregular Internet access"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*Target user personas*:"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Sylvia is a product manager in a Silicon Valley technology startup who often has to fly around the world for business. As an avid reader who wants to improve her work, she regularly keeps up to date with business and technology websites. With so much new content from different places everyday, she wishes she could collect them all together and focus on reading without distractions like advertisements. To be more productive on those long-haul flights, she would also like to download content to read offline."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Sundaresh is a freelance app developer in Bangalore who consumes a lot of information on the Internet for work. The web browser bookmark manager just isn’t powerful or flexible enough for him to manage the huge number of links, and doesn’t help him follow his favourite software development blogs either. He likes doing work outside of home, but reliable free Internet access is hard to find and he doesn’t want to pay sky-high prices for mobile Internet, so he wishes he could easily download content for offline reading before leaving home."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Joshua is a businessman in a fast-paced job environment. Always on the move, he finds himself having intermittent free time in his day traveling where he has no Internet connection. He wishes he has an offline news reader that automatically downloads news, hassle-free, from his favorite sources so he can read them on-the-go, saving his mobile data."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Discover, curate and read more content you care about in less time (than a typical mouse/GUI driven app)"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|new user"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|see usage instructions"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|search the web for articles like top headlines"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|easily and conveniently find content to save"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|add a link with title, preview image and other helpful data automatically extracted and article content downloaded"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|save it for later reference and view it later when I go offline"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|offline user"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|add a link with helpful data to be extracted and article content to be downloaded when connected to the Internet"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|save it for later reference"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|add tags when adding a link"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|organise my links"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|add a note when adding a link"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|remember why I saved the link when I view it later"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|list all previously saved links"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|see what I’ve saved"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|see roughly how long it takes to read an article"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|choose what to read within my time contraints"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|find a link containing keyword(s)"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|locate links I want without having to go through the entire list"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|sort and filter links by read status, tags and other fields"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|locate specific links in a huge list of links easily (look for a needle in a haystack easily)"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|edit a link"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|write a note about it or reorganise it"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|delete a link"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|remove entries that I no longer need"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|re-download content from previously saved links"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|get the latest revision of content from links I added a long time ago"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|mark links as read or unread"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|better manage a huge list of links"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|archive old links and delete their downloaded content"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|keep old links for reference but save disk space"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|view a saved link in a browser"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|read the content of links I’ve saved"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|view a saved link in a clean reading mode"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|focus on content with no distractions"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|change the style of reading mode"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|consume a lot of content using a style which works best for me to reduce sensory overload"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|follow a feed"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|keep track of content that matters to me"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|list feeds I’m following"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|see what content I’m keeping track of"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|unfollow a feed"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|stop keeping track of content that no longer matters to me"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|edit a feed"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|update outdated details like feed URL and name"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|user"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|update links from feeds"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|get the latest content from the feeds I’m following"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|new user"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|search online for feeds to follow"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|easily and conveniently find content to keep track of"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|import/export data and settings"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|transfer my content to another computer or another app"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|heavy user"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|create command aliases/macros"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "rlrh"
        },
        "content": "|manage things even faster"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "rlrh"
        },
        "content": "(For all use cases below, the *System* is the `Manager` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Use case: Delete link"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "rlrh"
        },
        "content": "1.  Actor requests to list links"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "rlrh"
        },
        "content": "2.  System shows a list of links"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "3.  Actor requests to delete a specific link in the list"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "rlrh"
        },
        "content": "4.  System deletes the link"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Use case: Browsing feed"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "rlrh"
        },
        "content": "1. Actor requests list of recommended feeds."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "rlrh"
        },
        "content": "2. System shows a list of feeds in the list view."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "rlrh"
        },
        "content": "3. Actor requests to view a particular feed of their choice."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "rlrh"
        },
        "content": "4. System fetches the feed and displays the list of links obtained in the list view."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "rlrh"
        },
        "content": "5. Actor requests to view an link of their choice."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "rlrh"
        },
        "content": "6. System displays the linked article in the reader view."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "rlrh"
        },
        "content": "7. Actor requests to add another link of their choice to the reading list."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "rlrh"
        },
        "content": "8. System saves the link to the reading list and downloads the article for future offline viewing, and displays a success status message."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Steps 5-8 repeat for as long as Actor wants to continue browsing."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "rlrh"
        },
        "content": "9. Actor may request to subscribe to the feed."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "rlrh"
        },
        "content": "10. System adds the feed to the subscriptions list."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* [3,5,7]a. The given index is invalid."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** [3,5,7]a1. System shows an error status message."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Use case resumes from corresponding step."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* [3,5]a. System does not have internet access (Actor is offline)"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** [3,5]a1. System shows an error status message."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* 7a. The given link has already been added to the reading list."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** 7a1. System shows an info status message that the link has already been added before."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Use case: Browsing articles"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "rlrh"
        },
        "content": "1. Actor requests to view a particular link."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "rlrh"
        },
        "content": "2. System displays the linked article in the reader view."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "rlrh"
        },
        "content": "3. Actor requests to view list of links found in the article."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "4. System displays the links in the list view."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "rlrh"
        },
        "content": "5. Actor requests to view a particular link in the list view."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "rlrh"
        },
        "content": "6. System displays the linked article in the reader view."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Steps 5-6 repeat for as long as Actor wants to browse articles."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* 3a. Actor requests to add a particular link found in article to the reading list."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** 3a1. System saves the link to the reading list and downloads the article for future offline viewing, and displays a success status message."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* [1,5]a. Actor may be offline if content has been downloaded for that particular link (i.e. if it is in the reading list)."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "rlrh"
        },
        "content": "** [1,5]a1. System fetches the article from local storage rather than from the Internet."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "rlrh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Use case resumes from step [2,6]."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Use case: Organising links in reading list"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Steps below can be performed in any order the user wishes:"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "rlrh"
        },
        "content": "A. Actor requests to update reading list with new articles in subscribed feeds."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System fetches each subscribed feed, adding new articles to the reading list."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "rlrh"
        },
        "content": "B. Actor requests to view reading list."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System shows the links in the reading list in the list view."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "rlrh"
        },
        "content": "C. Actor requests to view archive list."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System shows the links in the archive list in the list view."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "rlrh"
        },
        "content": "D. Actor requests to filter the set of links by a criterion of their choice."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System updates the list view where the links are filtered by the given criterion."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "rlrh"
        },
        "content": "E. Actor requests to sort the set of links by a criterion of their choice."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System updates the list view where links are sorted by the given criterion."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "rlrh"
        },
        "content": "F. Actor requests to mark a set of links of their choice as read."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System sets the read status for the given links as read, and updates the list view to reflect the change."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "rlrh"
        },
        "content": "G. Actor requests to add or remove tags for a set of links of their choice."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System adds or removes the given tags from the links specified, and updates the list view to reflect the change."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "rlrh"
        },
        "content": "H. Actor requests to archive a set of links of their choice."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System removes the links from the reading list and adds them to the archive list, purges downloaded content for those links, and updates the list view to reflect the change."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "rlrh"
        },
        "content": "I. Actor requests to unarchive a set of links of their choice."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "rlrh"
        },
        "content": "System removes the links from the archive list and adds them to the reading list, ensures content is downloaded for those links, and updates the list view to reflect the change."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".  A heavy user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".  A user should find it comfortable to read articles on the reader view. If the default is not comfortable, the user should be able to style the view with custom CSS styles such that it becomes comfortable."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "rlrh": 321,
      "qjqqyy": 54,
      "thomastanck": 91,
      "-": 935,
      "epicfailname": 63
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d README - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W10-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "By: `CS2103-AY1819S2-W10-1`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "README is an integrated bookmark manager and feed reader desktop application"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "that helps you read more content you care about anywhere you go."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "You\u0027ll love README if you consume a lot of web content and want to keep up to date with your favourite websites but you\u0027re a road warrior who doesn\u0027t have regular Internet access."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Whether you\u0027re heading off on a long flight or working in a cafe, README has you covered with all the content you care about in one place."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "README is for those who *prefer to use a desktop app for subscribing to web feeds and saving web pages to read later on their personal computer*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "More importantly, README is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "If you can type fast, README can make you more efficient at consuming content than traditional GUI apps."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Enjoy!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".  Download the latest `README.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your README."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ".  Try these commands in order!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* *`list`* : shows your reading list of all saved links"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **`select`**`1` : selects the first entry for reading"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **`add`**`l/https://en.wikipedia.org/wiki/Special:Random` : adds a random Wikipedia page to your reading list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **`select`**`7` : selects the Wikipedia page for reading"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **`feed`**`http://rss.nytimes.com/services/xml/rss/nyt/World.xml` : adds all the latest articles from the New York Times world news feed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **`select`**`8` : selects the first NYT article for reading"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **`view`**`reader` : switches to a more comfortable reading experience"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* **`delete`**`8` : deletes the first NYT article entry"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ".  Refer to below for details of each command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "[[Command]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d Command Format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "* Parameters can be in any order."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d Non-contextual commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": "These commands can be used from any context."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Custom user command macro: `macro` `[coming in v2.0]`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Creates macros that compose commands together."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `macro MACRO_NAME NUM_ARGS command1; command2; ... commandN`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `macro archive-tags-which-are-old 1 find t/$1 d/3 days ago; archive all`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Export settings and data to an export file : `export` `[coming in v2.0]`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Exports the feeds, saved data, history, and other preferences to an export file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `export FILE_PATH`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Serializes all the feeds and other preferences to a file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Copies all saved data into the export folder"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Compresses export folder to a export file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `export /home/tt/Desktop` Saves an export file to desktop"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `export C:\\Users\\Name\\Desktop` Saves an export file to desktop"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Import settings and data from an export file : `import` `[coming in v2.0]`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Imports the feeds, saved data, history, and other preferences from an export file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `import FILE_PATH`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Decompresses export file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Deserializes all the feeds and other preferences from the export file and save it to the application"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Copies all saved data from the export folder to application database"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `import /home/tt/Desktop/export.jtjr` Saves an export file to desktop"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `import C:\\Users\\Name\\Desktop\\export.jtjr` Saves an export file to desktop"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d Context-switching commands"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "These commands can be used from any context but change the context in which commands with shared command words operate (e.g. `add`, `edit`, `delete`)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Showing entries: `list`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Shows your reading list of all saved entries."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "////"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Shows your reading list of saved entries, optionally finding entries with titles containing any of the given keywords, and filtering by read status, date added and tags."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Format: `list [KEYWORDS]... [r/READ_STATUS] [d/DATE_ADDED] [t/TAG]... [s/SORT_BY]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- Keywords are comma separated. e.g. `Hello world, foo bar`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- The order of the keywords does not matter. e.g. `Hans, Bo` will match `Bo, Hans`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- Only the title is searched."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- Only full words will be matched e.g. `Hans Solo` will not match `Hans Solos`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- entries matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans, Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `list` Lists all entries"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `list Apple r/read tech` Lists entries with titles containing `apple` which are already read and tagged with `Tech`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `list Trump` Lists entries with titles containing `trump` and `Donald Trump` etc."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `list r/unread` Lists only unread entries"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `list t/Tech` Lists entries tagged with “Tech”"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `list t/` Lists untagged entries"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "////"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Showing archived entries: `archives` `[coming in v2.0]`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Shows a list of archived entries, optionally finding entries with titles containing any of the given keywords, and filtering by read status, date added and tags."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Format: `archives [KEYWORDS]... [r/READ_STATUS] [d/DATE_ADDED] [t/TAG]...`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- Keywords are comma separated. e.g. `Hello world, foo bar`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- The order of the keywords does not matter. e.g. `Hans, Bo` will match `Bo, Hans`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- Only the title is searched."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "- Only full words will be matched e.g. `Hans Solo` will not match `Hans Solos`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- entries matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans, Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `archives` Lists all archived entries"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `archives Apple r/read t/Tech` Lists archived entries with titles containing `apple` which are already read and tagged with `Tech`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `archives Trump` Lists archived entries with titles containing `trump` and `Donald Trump` etc."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `archives r/unread` Lists only unread archived entries"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `archives t/Tech` Lists archived entries tagged with “Tech”"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `archives t/` Lists untagged archived entries"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Searching online for entries: `search` `[coming in v2.0]`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Searches online for entries that you can subsequently add."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `search [KEYWORD]...`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `search FEED_URL`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `search ARTICLE_URL`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `search` Returns top headlines"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `search Trump` Returns entries containing the `Trump` keyword"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `search https://live.engadget.com/rss.xml` Returns entries from this feed"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `search https://live.engadget.com/2019/02/08/microsoft-internet-explorer-technical-debt/` Returns all entries from this article"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Showing feeds: `feeds` `[coming in v2.0]`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Shows a list of feeds being followed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `feeds [t/TAG]...`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `feeds` Lists all feeds"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `feeds t/Business` Lists all feeds tagged with “Business”"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Searching online for feeds: `searchfeeds` `[coming in v2.0]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Searches online for feeds that you can subsequently follow."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `searchfeeds [KEYWORD]...`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `searchfeeds` Shows some starter feeds you can add"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `searchfeeds Tech Business` Searches for `Tech` or `Business` feeds"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Showing reading statistics: `stats` `[coming in v2.0]`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Shows helpful and fun statistics about your reading progress and habits."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d In `list` context (displays entry list)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Adding a single entry: `add` `[updated v1.2]`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Adds a single entry from a link URL to your reading list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Content is automatically downloaded onto your personal computer."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `add l/URL [ti/TITLE_OVERRIDE] [d/DESCRIPTION_OVERRIDE] [t/TAG]...`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The `Title` and `Description` fields are automatically filled if you do not provide them."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rlrh"
        },
        "content": "A entry can have any number of tags (including 0)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `add l/https://www.theatlantic.com/magazine/archive/2019/03/ford-ceo-jim-hackett-ux-design-thinking/580438/ d/Explains why UX is important t/Business` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Adds a single entry with a description and tagged with “Business”"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Adding entries from a web feed: `feed` `[since v1.2]`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Adds all entries from a web feed to your reading list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Content is automatically downloaded onto your personal computer."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `feed FEED_URL`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rlrh"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rlrh"
        },
        "content": "The application may freeze for a short time as it downloads content onto disk."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `feed http://rss.nytimes.com/services/xml/rss/nyt/World.xml` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Adds all the entries from the New York Times world news feed to your reading list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Editing an entry: `edit`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Edits an existing entry in the reading list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `edit INDEX [ti/TITLE_OVERRIDE] [d/DESCRIPTION_OVERRIDE] [s/STATUS]  [t/TAG]...`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Edits the entry at the specified `INDEX`. The index refers to the index number shown in the displayed entry list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- Existing values will be updated to the input values."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- When editing tags, the existing tags of the entry will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- You can remove all the entry\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `edit 1 ti/Software Design Patterns d/Useful for software engineering project.` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Edits the title and description of the 1st entry to be `Software Design Patterns` and `Useful for software engineering project.` respectively."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `edit 2 t/` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Clears all existing tags from the 2nd entry."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Finding entries by title: `find`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Finds entries whose titles contain any of the given keywords. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Entries matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `find Trump` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Returns entries with titles containing `trump` and `Donald Trump` etc."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `find Boeing FAA` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Returns any entry having titles `Boeing` or `FAA`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Selecting an entry: `select`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Selects the entry identified by the index number used in the displayed entry list for reading."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Selects the entry at the specified `INDEX` for reading."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- The index *must be a positive integer* 1`, 2, 3, ...`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rlrh"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Selects the 2nd entry in the reading list for reading."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `find Trump` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rlrh"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Selects the 1st entry in the results of the `find` command for reading."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Changing the view mode: `view` `[since v1.2]`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Changes the view mode between the original browser or a more comfortable reading experience."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `view MODE(browser, reader)`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// Format: `view MODE [s/style] [o/options]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `view browser` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Switches to browser view mode"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `view reader` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Switches to a clean and clutter-free reader view mode for a more comfortable reading experience"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// - `view reader s/dark` Use reader view with dark style"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// - `view reader o/fullscreen` Use reader view with maximised window"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rlrh"
        },
        "content": "// - `view reader s/solarized o/fullscreen` Use reader view with \"Solarized\" style and maximised window"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Listing links in current web page: `links` `[coming in v2.0]`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Lists all the links in the current web page and switches context to `search`. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Equivalent to `search CURRENT_WEB_PAGE`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `links`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Redownloading an entry: `redownload` `[coming in v2.0]`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Redownload the specified entry to get the latest version of its content."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `redownload INDEX`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Refreshes the content of the entry at the specified `INDEX`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rlrh"
        },
        "content": "`redownload 2` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Refreshes the content of the 2nd entry in the reading list."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Marking an entry as read: `read` `[coming in v2.0]`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Marks the specified entry as read."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `read INDEX`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Marks as read the entry at the specified `INDEX`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rlrh"
        },
        "content": "`read 2` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Marks as read the 2nd entry in the reading list."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Marking an entry as unread: `unread` `[coming in v2.0]`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Marks the specified entry as unread."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `unread INDEX`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Marks as unread the entry at the specified `INDEX`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rlrh"
        },
        "content": "`unread 2` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Marks as unread the 2nd entry in the reading list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Sharing an entry: `share` `[coming in v2.0]`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Shares the specified entry through connected social media."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `share INDEX`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Archiving an entry: `archive` `[coming in v2.0]`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Moves the specified entry to the archive and removes its downloaded content."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `archive INDEX`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Archives the entry at the specified `INDEX`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rlrh"
        },
        "content": "`archive 2` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Moves the 2nd entry in the reading list to the archive and removes its downloaded content."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Deleting an entry: `delete`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Deletes the specified entry from the reading list."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* Deletes the entry at the specified `INDEX`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Deletes the 2nd entry in the reading list."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "rlrh"
        },
        "content": "* `find Trump` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Deletes the 1st entry in the results of the `find` command."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Clears all saved entries from the manager."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d In `archives` context (displays entry list) `[all coming in v2.0]`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Unarchiving entries: `unarchive`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Adds the entries back to the entry list and downloads their content onto disk."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `unarchive INDICES`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `unarchive all`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `unarchive all` Unarchives all shown entries"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `unarchive 1,2,4-6` Unarchives the 1st, 2nd and 4th to 6th entries"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Deleting an archived entry: `delete`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Deletes specified archived entries from the manager."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `delete INDICES`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Deletes the entries at the specified `INDICES`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "rlrh"
        },
        "content": "****"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `delete all`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Deletes all shown entries"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `delete 1,2-6` Deletes the 1st, and 2nd to 6th entries"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Clears all archived entries from the manager."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d In `search` context (displays entry list) `[all coming in v2.0]`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Adding entries: `add`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Adds entries from search results to the manager. Content is automatically downloaded to disk."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `add INDEX [ti/TITLE_OVERRIDE] [d/DESCRIPTION_OVERRIDE] [t/TAG]...`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Format: `add INDICES [d/DESCRIPTION_OVERRIDE] [t/TAG]...`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `add all`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "rlrh"
        },
        "content": "A entry can have any number of tags (including 0)."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Title will be automatically filled by parsing the entry if you do not provide it."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `add 1 c/explains why UX is important t/Business` Adds the 1st entry with a description and tagged with “Business”"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `add 4-6 c/read by Monday t/School` Adds the 4th to 6th entries with the same description and tagged with “School\""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Selecting a entry: `select`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Selects the entry identified by the index number used in the displayed entry list for viewing."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Selects the entry and loads the content of the entry at the specified `INDEX`."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- The index refers to the index number shown in the displayed entry list."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The index *must be a positive integer* 1`, 2, 3, ...`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `select 2` Selects the 2nd entry in the manager"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Changing the viewing mode: `view`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Changes the viewing mode between the original browser view or a more comfortable reading experience."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `view MODE [s/style] [o/options]`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `view browser` Use browser view"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `view reader` Use reader view"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `view reader s/dark` Use reader view with dark style"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `view reader o/fullscreen` Use reader view with maximised window"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `view reader s/solarized o/fullscreen` Use reader view with \"Solarized\" style and maximised window"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d In `feeds` context (displays feed list) `[all coming in v2.0]`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Adding a feed: `add`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Adds a feed to the manager and subscribes to updates."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `add URL [n/NAME] [t/TAG]...`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "A feed can have any number of tags (including 0)"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `add https://www.engadget.com/rss.xml n/Engadget t/Tech` Adds a feed whose name is “Engadget” and whose entries will be tagged with “Tech”"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Updating entries from feeds: `update`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Refreshes all feeds."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `update INDICES`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `update all`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `update all` Updates entries from all feeds"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `update 2` Updates entries from the 2nd feed"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Selecting a feed: `select`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Selects the feed identified by the index number used in the displayed feed list and displays its entries."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Selects the feed and displays its entries."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- Equivalent to `search [URL_OF_INDEXED_FEED]`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The index refers to the index number shown in the displayed feed list."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The index *must be a positive integer* 1`, 2, 3, ...`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `select 2` Selects the 2nd feed in the manager and displays its entries"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Editing a feed: `edit`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Edits an existing feed in the manager."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `edit INDEX [u/URL] [n/NAME] [t/TAG]...`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- Edits the feed at the specified `INDEX`. The index refers to the index number shown in the displayed feed list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- Existing values will be updated to the input values."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- When editing tags, the existing tags of the feed will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- You can remove all the feed’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `edit 1 n/HackerNews` Edits the name of the 1st feed"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `edit 2 t/` Clears all existing tags from the 2nd feed"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Deleting a feed: `delete`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Deletes the specified feeds from the manager and unsubscribes from them, but existing entries obtained from that feed will not be deleted."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `delete INDICES`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- Deletes the feeds at the specified indices."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The index refers to the index number shown in the displayed feed list."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `delete all`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `delete all` Deletes all shown feeds"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `delete 2` Deletes the 2nd feed"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d\u003d Clearing all feeds : `clear`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Clears all followed feeds from the manager."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003d\u003d In `searchfeeds` context (displays feed list) `[all coming in v2.0]`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Adding a feed: `add`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Adds a feed from the search results to the manager and subscribes to updates."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `add INDEX [n/NAME] [t/TAG]...`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `add INDICES [t/TAG]...`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Format: `add all`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "A feed can have any number of tags (including 0)"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- `add all` Adds all shown feeds"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `add 1 n/Engadget t/Tech` Adds a feed whose name is “Engadget” and whose entries will be tagged with `Tech`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `add 5-9 t/Work` Adds the 5th to 9th feeds whose entries will be tagged with `Work`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003d\u003d\u003d Selecting a feed: `select`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Selects the feed identified by the index number used in the displayed feed list and displays its entries."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- Selects the feed and displays its entries."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- Equivalent to `search [URL_OF_INDEXED_FEED]`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The index refers to the index number shown in the displayed feed list."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "- The index *must be a positive integer* 1`, 2, 3, ...`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "****"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "rlrh"
        },
        "content": "- `select 2` Selects the 2nd feed in the manager and displays its entries"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "////"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "////"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "////"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "////"
      }
    ],
    "authorContributionMap": {
      "rlrh": 313,
      "qjqqyy": 11,
      "-": 180,
      "epicfailname": 208
    }
  },
  {
    "path": "docs/networktests/index.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "It works!"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3
    }
  },
  {
    "path": "docs/networktests/index.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cp\u003eIt works!\u003c/p\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 3
    }
  },
  {
    "path": "docs/networktests/rss.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003crss version\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cchannel\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime Revies\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime\u003c/link\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "My stupid and completely irrelevant anime reviews."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cimage\u003ehttps://blog.GNU.moe/anime/icon.svg\u003c/image\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cauthor\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Tsutsukakushi Tsukiko \u0026lt;yui@cock.li\u0026gt; (7B29 6212 4A73 E1E9 15E8  A7D4 7F96 C964 9CBC BF51)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/author\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ccopyright\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "CC0 \u0026lt;https://creativecommons.org/publicdomain/zero/1.0/legalcode\u0026gt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/copyright\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clastBuildDate\u003eSun May 27 04:15:47 EEST 2018\u003c/lastBuildDate\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Mahoujin Guru Guru  \u003c/title\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/mahoujin-guru-guru.html\u003c/link\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Gamers!  \u003c/title\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/gamers.html\u003c/link\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Made in Abyss  \u003c/title\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/made-in-abyss.html\u003c/link\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review n"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Mob Psycho 100  \u003c/title\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/mob-psycho.html\u003c/link\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: New Game!!  \u003c/title\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/new-game-2.html\u003c/link\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime revieww"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Saiki Kusuo no Psi-nan  \u003c/title\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/saiki-kusuo.html\u003c/link\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "sigh"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Durarara!!  \u003c/title\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/durarara.html\u003c/link\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Battle Programmer Shirase  \u003c/title\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/bps.html\u003c/link\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "lol"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Re:Zero  \u003c/title\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/re_zero.html\u003c/link\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "idk"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Youjo Senki  \u003c/title\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/youjo_senki.html\u003c/link\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "I like this reviewer"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/channel\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/rss\u003e"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 98
    }
  },
  {
    "path": "docs/team/thomastanck.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d Thomas Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d PROJECT: README"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "README is a desktop bookmark manager/rss feed reader application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* *Major enhancement*: added *support for offline mode*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** What it does: allows the user to continue using the application even while offline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Justification: This feature improves the product significantly because being able to read articles offline allows users to read more seamlessly while also being a selling point that other competing products do not support."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Highlights: This enhancement needed to support saving many possibly large articles on the disk without keeping them in memory. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands as well as a large scale refactor of the architecture itself."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Credits: ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** Set up issue tracker"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** Set up Travis, AppVeyor, Codacy, and Coveralls status checks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** Set up Branch Protection on `master`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** ."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W10-1/main/pull/9[#9]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** Contributed to forum discussions (examples: )"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/nus-cs2103-AY1819S2/forum/issues/49#issuecomment-471154226[1])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "*** Integrated a third party tool (PlantUML) to the project (https://github.com/CS2103-AY1819S2-W10-1/main/pull/18[#18])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "// include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "// include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "// include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "// include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.ArticleStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.DataDirectoryArticleStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.storage.EntryBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.storage.JsonEntryBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing README ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBookStorage entryBookStorage \u003d new JsonEntryBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ArticleStorage articleStorage \u003d new DataDirectoryArticleStorage(userPrefs.getArticleDataDirectoryPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        storage \u003d new StorageManager(entryBookStorage, userPrefsStorage, articleStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Optional\u003cReadOnlyEntryBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ReadOnlyEntryBook initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample EntryBook\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty EntryBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            initialData \u003d new EntryBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EntryBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            initialData \u003d new EntryBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return new ModelManager(initialData, userPrefs, storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty EntryBook\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        logger.info(\"Starting README \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping README ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 4,
      "thomastanck": 6,
      "-": 167,
      "epicfailname": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The entry index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d entries listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "epicfailname": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Creates a directory if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static void createDirectory(Path directory) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Files.createDirectories(directory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Writes given bytes to a file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static void writeToFile(Path file, byte[] content) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Files.write(file, content);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 15,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Gets the first given number of words of the given string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * with ellipsis appended at the end if there more than the given number of words."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param string string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param numOfWords number of words"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @return first given number of words of the given string, possibly with ellipsis at the end"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static String getFirstNWordsWithEllipsis(String string, int numOfWords) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (string \u003d\u003d null || string.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String [] stringArray \u003d string.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (numOfWords \u003e\u003d stringArray.length) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return string.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        StringBuilder firstNWords \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfWords; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            firstNWords.append(stringArray[i]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            firstNWords.append(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return firstNWords.toString().trim().concat(\"…\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 24,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.parsers.DocumentBuilderFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.OutputKeys;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.Transformer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.TransformerFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.dom.DOMSource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.stream.StreamResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.xml.sax.InputSource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Converts between XML Document and String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Code modified from https://www.journaldev.com/1237/java-convert-string-to-xml-document-and-xml-document-to-string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Converts a XML Document to string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param doc XML Document"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @return string from doc"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @throws TransformerException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static String convertDocumentToString(Document doc) throws TransformerException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Transformer transformer \u003d TransformerFactory.newInstance().newTransformer();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        StringWriter writer \u003d new StringWriter();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        transformer.transform(new DOMSource(doc), new StreamResult(writer));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String output \u003d writer.getBuffer().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Converts a string to XML Document"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param xmlStr string representation of a XML Document"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @return XML Document from xmlStr"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static Document convertStringToDocument(String xmlStr) throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        DocumentBuilder builder \u003d DocumentBuilderFactory.newInstance().newDocumentBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Document doc \u003d builder.parse(new InputSource(new StringReader(xmlStr)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return doc;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the EntryBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     * @see seedu.address.model.Model#getListEntryBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    ReadOnlyEntryBook getEntryBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of entries */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the user prefs\u0027 entry book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    Path getEntryBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Selected entry in the filtered entry list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * null if no entry is selected."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see seedu.address.model.Model#selectedEntryProperty()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    ReadOnlyProperty\u003cEntry\u003e selectedEntryProperty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the selected entry in the filtered entry list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedEntry(Entry)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void setSelectedEntry(Entry entry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Current view mode."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @see seedu.address.model.Model#viewModeProperty()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    ReadOnlyProperty\u003cViewMode\u003e viewModeProperty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the view mode."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @see seedu.address.model.Model#setViewMode(ViewMode)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    void setViewMode(ViewMode viewMode);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Propagated exception."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * null if no exception."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @see seedu.address.model.Model#exceptionProperty()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    ReadOnlyProperty\u003cException\u003e exceptionProperty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the exception to be propagated."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @see seedu.address.model.Model#setException(Exception)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    void setException(Exception exception);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Command result from manual setting."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * null if no manually set command result."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * FUTURE: Command result from latest command execution or manual setting."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @see seedu.address.model.Model#commandResultProperty()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    ReadOnlyProperty\u003cCommandResult\u003e commandResultProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the command result manually."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @see seedu.address.model.Model#setCommandResult(CommandResult)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    void setCommandResult(CommandResult commandResult);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 46,
      "qjqqyy": 1,
      "-": 56,
      "epicfailname": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            Command command \u003d model.getContext().getParser().parseCommand(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ReadOnlyEntryBook getEntryBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return model.getListEntryBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return model.getFilteredEntryList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Path getEntryBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return model.getEntryBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ReadOnlyProperty\u003cEntry\u003e selectedEntryProperty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return model.selectedEntryProperty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setSelectedEntry(Entry entry) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.setSelectedEntry(entry);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public ReadOnlyProperty\u003cViewMode\u003e viewModeProperty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return model.viewModeProperty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void setViewMode(ViewMode viewMode) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        model.setViewMode(viewMode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public ReadOnlyProperty\u003cException\u003e exceptionProperty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return model.exceptionProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void setException(Exception exception) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        model.setException(exception);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public ReadOnlyProperty\u003cCommandResult\u003e commandResultProperty() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return model.commandResultProperty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void setCommandResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        model.setCommandResult(commandResult);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 28,
      "qjqqyy": 2,
      "thomastanck": 1,
      "-": 76,
      "epicfailname": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.apache.commons.text.WordUtils;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.jsoup.Jsoup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.jsoup.nodes.Document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import com.chimbori.crux.articles.Article;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import com.chimbori.crux.articles.ArticleExtractor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import com.google.common.io.Files;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.util.Candidate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.network.Network;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Adds a entry to the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a entry to the entry book. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_LINK + \"LINK \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"COMMENT] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_LINK + \"https://example.com \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_TITLE + \"Example Title \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Example Description \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_TAG + \"science \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New entry added: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This entry already exists in the entry book\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddCommand.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Entry toAdd;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Entry}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public AddCommand(Entry entry) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Initial data"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        final Title title \u003d toAdd.getTitle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        final Description description \u003d toAdd.getDescription();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        final boolean noTitleOrNoDescription \u003d title.isEmpty() || description.isEmpty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        final String urlString \u003d toAdd.getLink().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Candidates to replace empty title and description"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Candidate\u003cTitle\u003e candidateTitle \u003d new Candidate\u003c\u003e(new Title(\"Untitled\"), (String s) -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                return Optional.of(ParserUtil.parseTitle(Optional.of(s)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Candidate\u003cDescription\u003e candidateDescription \u003d new Candidate\u003c\u003e(new Description(\"No description\"), (String s) -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                return Optional.of(ParserUtil.parseDescription(Optional.of(s)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // First try - extract candidates just from URL"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (noTitleOrNoDescription) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                URL url \u003d new URL(urlString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                String baseName \u003d Files.getNameWithoutExtension(url.getPath())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .replaceAll(\"\\n\", \"\") // remove newline chars"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .replaceAll(\"\\r\", \"\") // remove carriage return chars"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .replaceAll(\"[^a-zA-Z0-9]+\", \" \") // replace special chars with spaces"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                candidateTitle.tryout(WordUtils.capitalizeFully(baseName)); // title 3rd choice - cleaned up base name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                candidateDescription.tryout(url.getHost().trim()); // desc 4th choice - host name"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                // Skip if URL is malformed"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                logger.warning(\"Malformed URL: \" + urlString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Optional\u003cLink\u003e offlineLink \u003d Optional.empty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            // Download article content to local storage"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            byte[] articleContent \u003d Network.fetchAsBytes(urlString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            Optional\u003cPath\u003e articlePath \u003d model.addArticle(urlString, articleContent);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            if (articlePath.isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                offlineLink \u003d Optional.of(new Link(articlePath.get().toUri().toASCIIString()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            if (noTitleOrNoDescription) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                // Second try - extract candidates by parsing through Jsoup"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                String html \u003d new String(articleContent);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                Document document \u003d Jsoup.parse(html);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                candidateTitle.tryout(document.title().trim()); // title 2nd choice - document title element"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                candidateDescription.tryout(StringUtil.getFirstNWordsWithEllipsis(document.body().text(), 24)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .trim()); // desc 3rd choice - first N words of raw document body text"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                // Third try - extract candidates by processing through Crux"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                Article article \u003d ArticleExtractor.with(urlString, document)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .extractMetadata()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .extractContent()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .article();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                candidateTitle.tryout(article.title.trim()); // title 1st choice - extract title"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                candidateDescription"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                        .tryout(StringUtil.getFirstNWordsWithEllipsis(article.document.text(), 24)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                                .trim()) // desc 2nd choice - first N words of cleaned-up document body text"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        .tryout(article.description.trim()); // desc 1st choice - extract description"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            // Do nothing if fail to fetch the page"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            logger.warning(\"Failed to fetch URL: \" + urlString);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // Attempt to add updated entry to entry book"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Entry updatedEntry \u003d new Entry("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                title.isEmpty() ? candidateTitle.get() : title, // replace title if empty"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                description.isEmpty() ? candidateDescription.get() : description, // replace description if empty"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                toAdd.getLink(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                offlineLink,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                toAdd.getAddress(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                toAdd.getTags()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        );"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (model.hasEntry(updatedEntry)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        model.addEntry(updatedEntry);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedEntry));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 6,
      "thomastanck": 111,
      "-": 41,
      "epicfailname": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Lists all entries in the archives to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"arch\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        + \": Archives the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_ENTRY_SUCCESS \u003d \"Entry archived: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_ENTRY_SUCCESS, entryToArchive));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchivesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ModelContext;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Lists all entries in the archives to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class ArchivesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archives\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"archs\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Context switched to archive-context. Listed all entries in archives.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.setContext(ModelContext.CONTEXT_ARCHIVE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entry book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        model.clearEntryBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 21,
      "epicfailname": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Deletes a entry identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \": Deletes the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Entry: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, entryToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "epicfailname": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Edits the details of an existing entry in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the entry identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \"by the index number used in the displayed entry list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"COMMENT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \"[\" + PREFIX_LINK + \"LINK] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_DESCRIPTION + \"New description \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + PREFIX_LINK + \"https://new-link.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Entry: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This entry already exists in the entry book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final EditEntryDescriptor editEntryDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param index of the entry in the filtered entry list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param editEntryDescriptor details to edit the entry with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditCommand(Index index, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(editEntryDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.editEntryDescriptor \u003d new EditEntryDescriptor(editEntryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedEntry \u003d createEditedPerson(entryToEdit, editEntryDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.setEntry(entryToEdit, editedEntry);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedEntry));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Creates and returns a {@code Entry} with the details of {@code entryToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * edited with {@code editEntryDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static Entry createEditedPerson(Entry entryToEdit, EditEntryDescriptor editEntryDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assert entryToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Title updatedTitle \u003d editEntryDescriptor.getTitle().orElse(entryToEdit.getTitle());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Description updatedDescription \u003d editEntryDescriptor.getDescription().orElse(entryToEdit.getDescription());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Link updatedLink \u003d editEntryDescriptor.getLink().orElse(entryToEdit.getLink());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Address updatedAddress \u003d editEntryDescriptor.getAddress().orElse(entryToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editEntryDescriptor.getTags().orElse(entryToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new Entry(updatedTitle, updatedDescription, updatedLink, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Stores the details to edit the entry with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * corresponding field value of the entry."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static class EditEntryDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        private Link link;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public EditEntryDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public EditEntryDescriptor(EditEntryDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            setLink(toCopy.link);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description, link, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void setLink(Link link) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            this.link \u003d link;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public Optional\u003cLink\u003e getLink() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return Optional.ofNullable(link);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (!(other instanceof EditEntryDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                    \u0026\u0026 getLink().equals(e.getLink())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 2,
      "thomastanck": 1,
      "-": 153,
      "epicfailname": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Entry Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "epicfailname": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FeedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import com.rometools.rome.feed.synd.SyndEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import com.rometools.rome.feed.synd.SyndFeed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import com.rometools.rome.io.FeedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import com.rometools.rome.io.SyndFeedInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import com.rometools.rome.io.XmlReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.network.Network;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": " * Shows a feed given an URL."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "public class FeedCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"feed\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened feed %s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public static final String MESSAGE_FAILURE_NET \u003d \"Network connection failed:\\n%s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public static final String MESSAGE_FAILURE_XML \u003d \"%s is not a valid RSS/Atom feed!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            + \": Opens a link as an RSS feed and adds all its entries.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            + \"Parameters: LINK\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" https://open.kattis.com/rss/new-problems\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION_TEXT \u003d \"imported from %s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private String feedUrl;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public FeedCommand(String feedUrl) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        this.feedUrl \u003d feedUrl;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            InputStream inputStream \u003d Network.fetchAsStream(feedUrl);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            SyndFeed syndFeed \u003d new SyndFeedInput().build(new XmlReader(inputStream));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            EntryBook toBeDisplayed \u003d new EntryBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            toBeDisplayed.setPersons(convertToEntryList(syndFeed)); // todo: test for dupes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            model.displayEntryBook(toBeDisplayed);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE_NET, e), e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        } catch (FeedException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE_XML, feedUrl), e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            throw new CommandException(\"Some other problem: \" + StringUtil.getDetails(e), e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, feedUrl));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private List\u003cEntry\u003e convertToEntryList(SyndFeed syndFeed) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return syndFeed.getEntries().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .map(this::syndEntryToEntryBookEntry)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /** Converts a SyndEntry into an EntryBook Entry. */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private Entry syndEntryToEntryBookEntry(SyndEntry syndEntry) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return new Entry("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                new Title(syndEntry.getTitle().trim()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                extractDescription(syndEntry),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                new Link(syndEntry.getLink()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                new Address(\"unused\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                Collections.emptySet()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /** Extracts a useful description from a SyndEntry. */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Description extractDescription(SyndEntry syndEntry) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        String description \u003d syndEntry.getDescription().getValue().replace(\u0027\\n\u0027, \u0027 \u0027).trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            description \u003d String.format(DEFAULT_DESCRIPTION_TEXT, feedUrl);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                || (other instanceof FeedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                \u0026\u0026 feedUrl.equals(((FeedCommand) other).feedUrl)); // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 102,
      "epicfailname": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all entries whose title contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" trump amazon\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final TitleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public FindCommand(TitleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredEntryList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 36,
      "epicfailname": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ModelContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Context switched to list-context. Listed all entries\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.setContext(ModelContext.CONTEXT_LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 2,
      "thomastanck": 1,
      "-": 22,
      "epicfailname": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Selects a entry identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + \": Selects the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Entry: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e filteredEntryList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredEntryList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.setSelectedEntry(filteredEntryList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 48,
      "epicfailname": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnarchiveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Lists all entries in the archives to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"unarch\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        + \": Un-archives the entry identified by the index number used in the displayed entry list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_ENTRY_SUCCESS \u003d \"Entry unarchived: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNARCHIVE_ENTRY_SUCCESS, entryToUnarchive));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewModeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Sets the view mode."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public class ViewModeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"v\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    // TODO: Generate message by iterating over enum"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            + \": Sets the view mode.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            + \"Parameters: VIEW_MODE (browser, reader)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + ViewMode.READER.toString().toLowerCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String MESSAGE_SET_VIEW_MODE_SUCCESS \u003d \"View Mode: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private final ViewMode viewMode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public ViewModeCommand(ViewMode viewMode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.viewMode \u003d viewMode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        model.setViewMode(this.viewMode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_VIEW_MODE_SUCCESS, this.viewMode.toString()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                || (other instanceof ViewModeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                \u0026\u0026 viewMode.equals(((ViewModeCommand) other).viewMode)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                            PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_LINK, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LINK)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Link link \u003d ParserUtil.parseLink(argMultimap.getValue(PREFIX_LINK));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entry \u003d new Entry(title, description, link, address, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new AddCommand(entry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "epicfailname": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and returns an ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ti/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Prefix PREFIX_LINK \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "epicfailname": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                           PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_LINK, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor editEntryDescriptor \u003d new EditCommand.EditEntryDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            editEntryDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            editEntryDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LINK).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            editEntryDescriptor.setLink(ParserUtil.parseLink(argMultimap.getValue(PREFIX_LINK)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            editEntryDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEntryDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!editEntryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new EditCommand(index, editEntryDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "epicfailname": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EntryBookArchivesParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents the parser for the archive-context."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * It successfully parses a command if and only if the command is archive-context command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBookArchivesParser extends EntryBookParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses successfully if and only if the command is archive-context command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case UnarchiveCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return super.parseCommand(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EntryBookListParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.FeedCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ViewModeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents the parser for the list-context."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * It successfully parses a command if and only if the command is list-context command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBookListParser extends EntryBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses successfully if and only if the command is list-context command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case ArchiveCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case ViewModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case ViewModeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new ViewModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case FeedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new FeedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return super.parseCommand(userInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "epicfailname": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EntryBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ArchivesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents the base parser for any context."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * It successfully parses a command if and only if the command is context-switching, exit, help or history."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBookParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses successfully if and only if the command is context-switching, exit, help or history."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case ArchivesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case ArchivesCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new ArchivesCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3,
      "-": 54,
      "epicfailname": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FeedCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.logic.commands.FeedCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": " * Parses input arguments and creates a new FeedCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "public class FeedCommandParser implements Parser\u003cFeedCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public FeedCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        if (userInput.trim().isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FeedCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return new FeedCommand(userInput.trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new FindCommand(new TitleContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "epicfailname": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + \" Entered: [\" + oneBasedIndex + \"].\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e title} into a {@code Title}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * If title is empty, default title used."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws ParseException if the given {@code title}\u0027s value is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static Title parseTitle(Optional\u003cString\u003e title) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (title.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            String trimmedTitle \u003d title.get().trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (!Title.isValidUserInputTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                throw new ParseException(Title.formExceptionMessage(trimmedTitle));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new Title(Title.DEFAULT_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e description} into a {@code Description}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * If description is empty, default description used."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws ParseException if the given {@code description}\u0027s value is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static Description parseDescription(Optional\u003cString\u003e description) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (description.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            String trimmedDescription \u003d description.get().trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (!Description.isValidUserInputDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                throw new ParseException(Description.formExceptionMessage(trimmedDescription));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new Description(Description.DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Address}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Modified from original as address is now optional (and invisible) field."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * If address is empty, default address used."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static Address parseAddress(Optional\u003cString\u003e address) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (address.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            String trimmedAddress \u003d address.get().trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (!Address.isValidUserInputAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                throw new ParseException(Address.formExceptionMessage(trimmedAddress));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new Address(Address.DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses a {@code String link} into an {@code Link}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws ParseException if the given {@code link} is empty or {@code link}\u0027s value is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static Link parseLink(Optional\u003cString\u003e link) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(link);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (link.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            String trimmedLink \u003d link.get().trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (!Link.isValidUserInputLink(trimmedLink)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                throw new ParseException(Link.formExceptionMessage(trimmedLink));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new Link(trimmedLink);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new ParseException(Link.formExceptionMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new ParseException(Tag.formExceptionMessage(trimmedTag));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "epicfailname": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnarchiveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and returns an UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewModeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.ViewModeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public class ViewModeCommandParser implements Parser\u003cViewModeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public ViewModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            ViewMode viewMode \u003d ViewMode.valueOf(trimmedArgs.toUpperCase(Locale.ENGLISH));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return new ViewModeCommand(viewMode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } catch (IllegalArgumentException ioe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EntryBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.UniqueEntryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Duplicates are not allowed (by .isSameEntry comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBook implements ReadOnlyEntryBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final UniqueEntryList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        persons \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Creates an EntryBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBook(ReadOnlyEntryBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Replaces the contents of the entry list with {@code entries}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setPersons(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.persons.setPersons(entries);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Resets the existing data of this {@code EntryBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void resetData(ReadOnlyEntryBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        setPersons(newData.getEntryList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    //// entry-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a entry with the same identity as {@code entry} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean hasPerson(Entry entry) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return persons.contains(entry);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Adds a entry to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void addEntry(Entry p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Replaces the given entry {@code target} in the list with {@code editedEntry}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setPerson(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(editedEntry);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        persons.setPerson(target, editedEntry);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Removes {@code key} from this {@code EntryBook}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void removePerson(Entry key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Adds a entry to the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * The entry must not already exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        resetData(new EntryBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                || (other instanceof EntryBook // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 persons.equals(((EntryBook) other).persons));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 1,
      "thomastanck": 9,
      "-": 110,
      "epicfailname": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Gets the storage backing this model."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Storage getStorage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the user prefs\u0027 entry book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    Path getEntryBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the user prefs\u0027 entry book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void setEntryBookFilePath(Path entryBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Returns the user prefs\u0027 article data directory path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Path getArticleDataDirectoryPath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Sets the user prefs\u0027 article data directory path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    void setArticleDataDirectoryPath(Path articleDataDirectoryPath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     * Replaces entry book data with the data in {@code listEntryBook}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    void setListEntryBook(ReadOnlyEntryBook listEntryBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /** Returns the EntryBook */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    ReadOnlyEntryBook getListEntryBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a entry with the same identity as {@code entry} exists in the entry book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    boolean hasEntry(Entry entry);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Deletes the given entry."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry must exist in the entry book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void deleteEntry(Entry target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Adds the given entry."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code entry} must not already exist in the entry book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Replaces the given entry {@code target} with {@code editedEntry}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code target} must exist in the entry book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the entry book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void setEntry(Entry target, Entry editedEntry);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Clears the entire entry book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    void clearEntryBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /** Adds article with {@code articleContent} associated with {@code url}. */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Optional\u003cPath\u003e addArticle(String url, byte[] articleContent) throws IOException;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /** Displays a given entryBook without touching storage. */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    void displayEntryBook(ReadOnlyEntryBook entryBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /** Returns an unmodifiable view of the filtered entry list */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    ObservableList\u003cEntry\u003e getFilteredEntryList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Updates the filter of the filtered entry list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Selected entry in the filtered entry list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * null if no entry is selected."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    ReadOnlyProperty\u003cEntry\u003e selectedEntryProperty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the selected entry in the filtered entry list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * null if no entry is selected."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    Entry getSelectedEntry();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the selected entry in the filtered entry list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void setSelectedEntry(Entry entry);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Current view mode."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    ReadOnlyProperty\u003cViewMode\u003e viewModeProperty();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Returns the current view mode."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    ViewMode getViewMode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the view mode."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    void setViewMode(ViewMode viewMode);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Propagated exception."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * null if no exception."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    ReadOnlyProperty\u003cException\u003e exceptionProperty();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Returns the propagated exception."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * null if no exception."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    Exception getException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the exception to be propagated."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    void setException(Exception exceptionToBePropagated);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Command result from manual setting."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * null if no manually set command result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * FUTURE: Command result from latest command execution or manual setting."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    ReadOnlyProperty\u003cCommandResult\u003e commandResultProperty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Returns the manually set command result."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * null if no manually set command result."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    CommandResult getCommandResult();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the command result manually."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    void setCommandResult(CommandResult result);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Makes a copy of the model."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Mainly created because clone is needed a lot in tests."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Model clone();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the context of the Model."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    ModelContext getContext();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the context of the Model."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param context"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void setContext(ModelContext context);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Archives the given entry."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry must exist in the entry book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void archiveEntry(Entry target);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Un-archives the given entry."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry must exist in the entry book archives."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void unarchiveEntry(Entry entry);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 43,
      "qjqqyy": 8,
      "thomastanck": 25,
      "-": 98,
      "epicfailname": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelContext.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.logic.parser.EntryBookArchivesParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.logic.parser.EntryBookListParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.logic.parser.EntryBookParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Enums for contexts Model can take"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public enum ModelContext {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    CONTEXT_LIST(new EntryBookListParser()), CONTEXT_ARCHIVE(new EntryBookArchivesParser());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private EntryBookParser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    ModelContext(EntryBookParser parser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public EntryBookParser getParser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 15,
      "epicfailname": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import javafx.beans.property.SimpleListProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private ModelContext context \u003d ModelContext.CONTEXT_LIST;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private final EntryBook listEntryBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final FilteredList\u003cEntry\u003e filteredEntries;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private final SimpleListProperty\u003cEntry\u003e displayedEntryList \u003d new SimpleListProperty\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final SimpleObjectProperty\u003cEntry\u003e selectedEntry \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private final SimpleObjectProperty\u003cViewMode\u003e currentViewMode \u003d new SimpleObjectProperty\u003c\u003e(ViewMode.BROWSER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private final SimpleObjectProperty\u003cException\u003e exception \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private final SimpleObjectProperty\u003cCommandResult\u003e commandResult \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     * Initializes a ModelManager with the given listEntryBook, userPrefs, and storage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public ModelManager(ReadOnlyEntryBook listEntryBook, ReadOnlyUserPrefs userPrefs, Storage storage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        requireAllNonNull(listEntryBook, userPrefs, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        logger.fine(\"Initializing with list context address book: \" + listEntryBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        this.listEntryBook \u003d new EntryBook(listEntryBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Save the entry book to storage whenever it is modified."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        this.listEntryBook.addListener(this::saveToStorageListener);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        displayEntryBook(this.listEntryBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        filteredEntries \u003d new FilteredList\u003c\u003e(this.displayedEntryList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        filteredEntries.addListener(this::ensureSelectedEntryIsValid);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Path getEntryBookFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setEntryBookFilePath(Path entryBookFilePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(entryBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        userPrefs.setAddressBookFilePath(entryBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticleDataDirectoryPath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return userPrefs.getArticleDataDirectoryPath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void setArticleDataDirectoryPath(Path articleDataDirectoryPath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        requireNonNull(articleDataDirectoryPath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        userPrefs.setArticleDataDirectoryPath(articleDataDirectoryPath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EntryBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void setListEntryBook(ReadOnlyEntryBook listEntryBook) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        this.listEntryBook.resetData(listEntryBook);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public ReadOnlyEntryBook getListEntryBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return listEntryBook;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return listEntryBook.hasPerson(entry);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        listEntryBook.removePerson(target);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        listEntryBook.addEntry(entry);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        listEntryBook.setPerson(target, editedEntry);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void clearEntryBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        listEntryBook.clear();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void displayEntryBook(ReadOnlyEntryBook entryBook) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        displayedEntryList.set(entryBook.getEntryList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Storage \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cPath\u003e addArticle(String url, byte[] articleContent) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return storage.addArticle(url, articleContent);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Entry List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Entry} backed by the internal list of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     * {@code listEntryBook}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return filteredEntries;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        filteredEntries.setPredicate(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected entry \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ReadOnlyProperty\u003cEntry\u003e selectedEntryProperty() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return selectedEntry;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Entry getSelectedEntry() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return selectedEntry.getValue();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setSelectedEntry(Entry entry) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (entry !\u003d null \u0026\u0026 !filteredEntries.contains(entry)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        selectedEntry.setValue(entry);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d View mode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public ReadOnlyProperty\u003cViewMode\u003e viewModeProperty() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return currentViewMode;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public ViewMode getViewMode() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return currentViewMode.getValue();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void setViewMode(ViewMode viewMode) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        currentViewMode.setValue(viewMode);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Exception propagation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public ReadOnlyProperty\u003cException\u003e exceptionProperty() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return exception;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Exception getException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return exception.getValue();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void setException(Exception exceptionToBePropagated) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        exception.setValue(exceptionToBePropagated);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Command result \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public ReadOnlyProperty\u003cCommandResult\u003e commandResultProperty() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public CommandResult getCommandResult() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return commandResult.getValue();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void setCommandResult(CommandResult result) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        commandResult.setValue(result);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Ensures {@code selectedEntry} is a valid entry in {@code filteredEntries}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private void ensureSelectedEntryIsValid(ListChangeListener.Change\u003c? extends Entry\u003e change) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (selectedEntry.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                // null is always a valid selected entry, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedEntry.getValue());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                // Update selectedEntry to its new value."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedEntry.getValue());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                selectedEntry.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedEntry.getValue().isSameEntry(removedPerson));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                // Select the entry that came before it in the list,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                // or clear the selection if there is no such entry."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                selectedEntry.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Ensures that storage is updated whenever entry book is modified."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private void saveToStorageListener(Observable observable) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            storage.saveAddressBook(listEntryBook);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            setException(new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        boolean stateCheck \u003d listEntryBook.equals(other.listEntryBook)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                \u0026\u0026 displayedEntryList.equals(other.displayedEntryList)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 filteredEntries.equals(other.filteredEntries)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedEntry.get(), other.selectedEntry.get())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                \u0026\u0026 Objects.equals(currentViewMode.get(), other.currentViewMode.get())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                \u0026\u0026 Objects.equals(commandResult.get(), other.commandResult.get());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (exception.get() \u003d\u003d null \u0026\u0026 other.exception.get() \u003d\u003d null) { // both don\u0027t have exceptions set"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return stateCheck;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } else if (exception.get() !\u003d null \u0026\u0026 other.exception.get() !\u003d null) { // both have exceptions set"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return stateCheck"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                    \u0026\u0026 exception.get().getClass().equals(other.exception.get().getClass())"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                    \u0026\u0026 exception.get().getMessage().equals(other.exception.get().getMessage());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } else { // not equal as one has exception set and the other does not"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Model clone() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Model clonedModel \u003d new ModelManager(this.listEntryBook, this.userPrefs, this.storage);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        clonedModel.setContext(this.getContext());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return clonedModel;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setContext(ModelContext context) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        case CONTEXT_LIST:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            displayEntryBook(this.listEntryBook);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        case CONTEXT_ARCHIVE:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            // something else"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ModelContext getContext() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return context;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void archiveEntry(Entry target) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void unarchiveEntry(Entry entry) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 36,
      "qjqqyy": 40,
      "thomastanck": 62,
      "-": 173,
      "epicfailname": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyEntryBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public interface ReadOnlyEntryBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    ObservableList\u003cEntry\u003e getEntryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "epicfailname": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Path getArticleDataDirectoryPath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"entrybook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Path articleDataDirectoryPath \u003d Paths.get(\"data\", \"articles\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        setArticleDataDirectoryPath(newUserPrefs.getArticleDataDirectoryPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticleDataDirectoryPath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return articleDataDirectoryPath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void setArticleDataDirectoryPath(Path articleDataDirectoryPath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        requireNonNull(articleDataDirectoryPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.articleDataDirectoryPath \u003d articleDataDirectoryPath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                \u0026\u0026 articleDataDirectoryPath.equals(o.articleDataDirectoryPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 13,
      "-": 85,
      "epicfailname": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents a Entry\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidConstructionAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String USER_INPUT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String CONSTRUCTION_VALIDATION_REGEX \u003d \"([^\\\\s].*)|(^$)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        checkArgument(isValidConstructionAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a given string is a valid user-input address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidUserInputAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(USER_INPUT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a given string is a valid address for construction."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidConstructionAddress(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(CONSTRUCTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage(String invalidInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS + \" Entered: [\" + invalidInput + \"].\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "epicfailname": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents a Entry\u0027s description in the entry book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUserInputDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"Descriptions can take any values, and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String USER_INPUT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String CONSTRUCTION_VALIDATION_REGEX \u003d \"([^\\\\s].*)|(^$)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param description A valid description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        checkArgument(isValidConstructionDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a given string is a valid user-input description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidUserInputDescription(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(USER_INPUT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a given string is a valid description for construction."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidConstructionDescription(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(CONSTRUCTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage(String invalidInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS + \" Entered: [\" + invalidInput + \"].\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return value.isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 4,
      "epicfailname": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/Entry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents a Entry in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Link link;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private final Optional\u003cLink\u003e offlineLink;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Entry(Title title, Description description, Link link, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireAllNonNull(title, description, link, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.offlineLink \u003d Optional.empty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Entry(Title title, Description description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                 Link link, Optional\u003cLink\u003e offlineLink,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                 Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        requireAllNonNull(title, description, link, address, tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.offlineLink \u003d offlineLink;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Link getLink() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return link;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cLink\u003e getOfflineLink() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return offlineLink;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Link getOfflineOrOriginalLink() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return offlineLink.orElse(link);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if both entries have the same link"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean isSameEntry(Entry otherEntry) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (otherEntry \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return otherEntry !\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 otherEntry.getLink().equals(getLink());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if both entries have the same link and data fields."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * This defines a stronger notion of equality between two entries."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!(other instanceof Entry)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry otherEntry \u003d (Entry) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return otherEntry.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 otherEntry.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 otherEntry.getLink().equals(getLink())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 otherEntry.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 otherEntry.getTags().equals(getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return Objects.hash(title, description, link, address, tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .append(\" Link: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                .append(getLink());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        offlineLink.ifPresent(link1 -\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            builder.append(\" Offline link: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                    .append(link1)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        builder.append(\" Address: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 32,
      "-": 80,
      "epicfailname": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/Link.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents a Entry\u0027s link in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidConstructionLink(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class Link {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Links should be of the format protocol://domain/filename.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_LINK \u003d \"https://cs2103-ay1819s2-w10-1.github.io/main/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String PATH \u003d \"[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String USER_INPUT_VALIDATION_REGEX \u003d \"^(https?://|file:/(//)?)\" + PATH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String CONSTRUCTION_VALIDATION_REGEX \u003d USER_INPUT_VALIDATION_REGEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Constructs an {@code Link}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param link A valid link address."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Link(String link) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(link);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        checkArgument(isValidConstructionLink(link), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        value \u003d link;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns if a given string is a valid user-input link."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidUserInputLink(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(USER_INPUT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns if a given string is a valid link for construction."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidConstructionLink(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(CONSTRUCTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage(String invalidInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS + \" Entered: [\" + invalidInput + \"].\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                || (other instanceof Link // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 value.equals(((Link) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents a Entry\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidConstructionTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"Titles can take any values, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String USER_INPUT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String CONSTRUCTION_VALIDATION_REGEX \u003d \"([^\\\\s].*)|(^$)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public final String fullTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        checkArgument(isValidConstructionTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        fullTitle \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a given string is a valid user-input title."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidUserInputTitle(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(USER_INPUT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if a given string is a valid title for construction."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static boolean isValidConstructionTitle(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return test.matches(CONSTRUCTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage(String invalidInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS + \" Entered: [\" + invalidInput + \"].\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return fullTitle.isEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return fullTitle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return fullTitle.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 4,
      "epicfailname": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/TitleContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Tests that a {@code Entry}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getTitle().fullTitle, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/UniqueEntryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A entry is considered unique by comparing using {@code Entry#isSameEntry(Entry)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * persons uses Entry#isSameEntry(Entry) for equality so as to ensure that the entry being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * unique in terms of identity in the UniqueEntryList. However, the removal of a entry uses Entry#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * as to ensure that the entry with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * @see Entry#isSameEntry(Entry)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class UniqueEntryList implements Iterable\u003cEntry\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if the list contains an equivalent entry as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean contains(Entry toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEntry);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Adds a entry to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void add(Entry toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Replaces the entry {@code target} in the list with {@code editedEntry}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setPerson(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireAllNonNull(target, editedEntry);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!target.isSameEntry(editedEntry) \u0026\u0026 contains(editedEntry)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        internalList.set(index, editedEntry);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Removes the equivalent entry from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * The entry must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void remove(Entry toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setPersons(UniqueEntryList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Replaces the contents of this list with {@code entries}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setPersons(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!personsAreUnique(entries)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Iterator\u003cEntry\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                || (other instanceof UniqueEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEntryList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if {@code entries} contains only unique entries."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private boolean personsAreUnique(List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entries.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                if (entries.get(i).isSameEntry(entries.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/exceptions/DuplicateEntryException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "epicfailname": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entry/exceptions/EntryNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Signals that the operation is unable to find the specified entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String formExceptionMessage(String invalidInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return MESSAGE_CONSTRAINTS + \" Entered: [\" + invalidInput + \"].\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "epicfailname": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Candidate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Represents a builder that tries out replacement candidates and accepts suitable ones."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public class Candidate\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private T value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private Function\u003cString, Optional\u003cT\u003e\u003e mapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param initialValue must be guaranteed to be suitable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param mapper defines the suitability of values mapped from candidate strings"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public Candidate(T initialValue, Function\u003cString, Optional\u003cT\u003e\u003e mapper) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.value \u003d initialValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.mapper \u003d mapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Tries to see if candidate string maps to a suitable value, and if so, accepts it and replaces current value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param candidate candidate string to try out"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public Candidate\u003cT\u003e tryout(String candidate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        mapper.apply(candidate).ifPresent(value -\u003e this.value \u003d value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Gets the current value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @return current value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public T get() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rlrh": 38,
      "thomastanck": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Contains utility methods for populating {@code EntryBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static Entry[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new Entry[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Title(\"CS2103 the best mod ever?\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Description(\"CS2101 disagrees!\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Link(\"https://www.comp.nus.edu.sg/programmes/ug/cs/\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                getTagSet(\"nus\", \"soc\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Title(\"Filler - \"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Description(\"or is it...?\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Link(\"file:///example/folder/file\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                getTagSet()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Title(\"Qiji trivalises all engineering majors!\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Description(\"Has he taken it too far?\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Link(\"https://github.com/qjqqyy\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                getTagSet(\"engineering\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Title(\"Jonathan voted best in procrastination!\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Description(\"The 22-time winner says \\\"I don\u0027t want to win anymore...\\\"!\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Link(\"https://github.com/epicfailname\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                getTagSet(\"award\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Title(\"Thomas invents time travel!\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Description(\"Still can\u0027t finish his work..\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Link(\"https://github.com/thomastanck\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                getTagSet(\"science\", \"tech\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            new Entry("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Title(\"Rayner - the new CEO of Amazon\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Description(\"Says \\\"I couldn\u0027t have done it without CS2103!\\\"\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Link(\"https://github.com/rlrh\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                getTagSet(\"nus\", \"soc\", \"amazon\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static ReadOnlyEntryBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook sampleAb \u003d new EntryBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        for (Entry sampleEntry : getSamplePersons()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            sampleAb.addEntry(sampleEntry);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 1,
      "-": 34,
      "epicfailname": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/network/Network.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.network;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Manager of Network component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public abstract class Network {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Fetches the resource (i.e. webpage) at url, returning it as an InputStream."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @return The input stream containing the content fetched."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static InputStream fetchAsStream(String url) throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return new URL(url).openStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Fetches the resource (i.e. webpage) at url, returning it as a String."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @return The content fetched."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static String fetchAsString(String url) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return new String(new URL(url).openStream().readAllBytes(), \"utf-8\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Fetches the resource (i.e. webpage) at url, returning it as a byte array"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @return The content fetched."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static byte[] fetchAsBytes(String url) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return new URL(url).openStream().readAllBytes();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 3,
      "thomastanck": 27,
      "epicfailname": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ArticleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " * Represents a storage for articles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public interface ArticleStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Returns the data directory path where articles are stored."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Path getArticleDataDirectoryPath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Saves the given article to the storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @param articleContent cannot be null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @param url cannot be null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Optional\u003cPath\u003e addArticle(String url, byte[] articleContent) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Converts a given url to a Path where the article would be stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Path getArticlePath(String url);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/DataDirectoryArticleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.apache.commons.codec.binary.Base32;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public class DataDirectoryArticleStorage implements ArticleStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Path directoryPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(DataDirectoryArticleStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public DataDirectoryArticleStorage(Path directoryPath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.directoryPath \u003d directoryPath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticleDataDirectoryPath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return directoryPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cPath\u003e addArticle(String url, byte[] articleContent) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Path targetPath \u003d getArticlePath(url);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Ensure data directory exists"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        FileUtil.createDirectory(directoryPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        FileUtil.writeToFile(targetPath, articleContent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return Optional.of(targetPath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Converts the given url to a filename that will be used to write to."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private String urlToFilename(String url) throws NoSuchAlgorithmException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        String lowercaseUrl \u003d url.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            // We hash the URL with sha-256, truncate it to 128 bits so it\u0027s shorter, then encode it in base32"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            byte[] encodedHash \u003d digest.digest(lowercaseUrl.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            byte[] truncatedHash \u003d new byte[16];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            System.arraycopy(encodedHash, 0, truncatedHash, 0, 16);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            byte[] hashInBase32 \u003d new Base32().encode(truncatedHash);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            return new String(hashInBase32, StandardCharsets.UTF_8) + \".html\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        } catch (NoSuchAlgorithmException nsae) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            logger.severe(\"SHA-256 hash not supported on this system. Saving links cannot be done\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw nsae;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticlePath(String url) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            return directoryPath.resolve(urlToFilename(url));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        } catch (NoSuchAlgorithmException nsae) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new RuntimeException(nsae);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EntryBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Represents a storage for {@link EntryBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public interface EntryBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns EntryBook data as a {@link ReadOnlyEntryBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    Optional\u003cReadOnlyEntryBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    Optional\u003cReadOnlyEntryBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Saves the given {@link ReadOnlyEntryBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void saveAddressBook(ReadOnlyEntryBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyEntryBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void saveAddressBook(ReadOnlyEntryBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "epicfailname": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private final String link;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private final String offlineLink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                            @JsonProperty(\"link\") String link, @JsonProperty(\"offlineLink\") String offlineLink,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                            @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.link \u003d link;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.offlineLink \u003d offlineLink;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        title \u003d source.getTitle().fullTitle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        link \u003d source.getLink().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        offlineLink \u003d source.getOfflineLink().isPresent() ? source.getOfflineLink().get().value : \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted entry."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (!Title.isValidConstructionTitle(title)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new IllegalValueException(Title.formExceptionMessage(title));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                                          Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (!Description.isValidConstructionDescription(description)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new IllegalValueException(Description.formExceptionMessage(description));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (link \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Link.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (!Link.isValidConstructionLink(link)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new IllegalValueException(Link.formExceptionMessage(link));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        final Link modelLink \u003d new Link(link);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (offlineLink \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Link.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        if (!offlineLink.isEmpty() \u0026\u0026 !Link.isValidConstructionLink(offlineLink)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new IllegalValueException(Link.formExceptionMessage(offlineLink));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        final Optional\u003cLink\u003e modelOfflineLink \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                offlineLink.isEmpty()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        ? Optional.empty()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        : Optional.of(new Link(offlineLink));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!Address.isValidConstructionAddress(address)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new IllegalValueException(Address.formExceptionMessage(address));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return new Entry(modelTitle, modelDescription, modelLink, modelOfflineLink, modelAddress, modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 40,
      "-": 66,
      "epicfailname": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new IllegalValueException(Tag.formExceptionMessage(tagName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "epicfailname": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonEntryBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A class to access EntryBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class JsonEntryBookStorage implements EntryBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEntryBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public JsonEntryBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Optional\u003cJsonSerializableEntryBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                filePath, JsonSerializableEntryBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void saveAddressBook(ReadOnlyEntryBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyEntryBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void saveAddressBook(ReadOnlyEntryBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEntryBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "epicfailname": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableEntryBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * An Immutable EntryBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "class JsonSerializableEntryBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate entry(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Constructs a {@code JsonSerializableEntryBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public JsonSerializableEntryBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedEntry\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Converts a given {@code ReadOnlyEntryBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEntryBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public JsonSerializableEntryBook(ReadOnlyEntryBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        persons.addAll(source.getEntryList().stream().map(JsonAdaptedEntry::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Converts this address book into the model\u0027s {@code EntryBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook addressBook \u003d new EntryBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        for (JsonAdaptedEntry jsonAdaptedEntry : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Entry entry \u003d jsonAdaptedEntry.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (addressBook.hasPerson(entry)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            addressBook.addEntry(entry);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 1,
      "epicfailname": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public interface Storage extends EntryBookStorage, UserPrefsStorage, ArticleStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    Optional\u003cReadOnlyEntryBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    void saveAddressBook(ReadOnlyEntryBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    Optional\u003cPath\u003e addArticle(String url, byte[] articleContent) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3,
      "-": 29,
      "epicfailname": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Manages storage of EntryBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private EntryBookStorage entryBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private ArticleStorage articleStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public StorageManager("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            EntryBookStorage entryBookStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            ArticleStorage articleStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.entryBookStorage \u003d entryBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        this.articleStorage \u003d articleStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EntryBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return entryBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return readAddressBook(entryBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return entryBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void saveAddressBook(ReadOnlyEntryBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        saveAddressBook(addressBook, entryBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void saveAddressBook(ReadOnlyEntryBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d article methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticleDataDirectoryPath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return articleStorage.getArticleDataDirectoryPath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cPath\u003e addArticle(String url, byte[] content) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return articleStorage.addArticle(url, content);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticlePath(String url) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return articleStorage.getArticlePath(url);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 22,
      "-": 62,
      "epicfailname": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.jsoup.Jsoup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.jsoup.nodes.Document;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.jsoup.nodes.Element;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.jsoup.parser.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import com.chimbori.crux.articles.Article;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import com.chimbori.crux.articles.ArticleExtractor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private static final String BROWSER_FILE_FOLDER \u003d \"/browser/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            requireNonNull(MainApp.class.getResource(BROWSER_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final URL ERROR_PAGE \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            requireNonNull(MainApp.class.getResource(BROWSER_FILE_FOLDER + \"error.html\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final URL STYLESHEET \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            requireNonNull(MainApp.class.getResource(BROWSER_FILE_FOLDER + \"default.css\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private WebEngine webEngine \u003d browser.getEngine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private String currentLocation;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private boolean isCurrentlyReaderView;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private ViewMode viewMode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cEntry\u003e selectedEntry, ObservableValue\u003cViewMode\u003e viewMode) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.currentLocation \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.isCurrentlyReaderView \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.viewMode \u003d viewMode.getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Load entry page when selected entry changes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        selectedEntry.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            loadEntryPage(newValue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // Reload when view mode changes."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        viewMode.addListener((observable, oldViewMode, newViewMode) -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            this.viewMode \u003d newViewMode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            loadPage(currentLocation);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // Respond to browser state events."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        webEngine.getLoadWorker().stateProperty().addListener((observable, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            switch (newState) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            case RUNNING:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                handleRunning();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            case SUCCEEDED:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                handleSucceeded();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            case FAILED:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                handleFailed();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // Load default page on startup."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Displays loading message."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void handleRunning() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (isCurrentlyReaderView) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String message \u003d String.format(\"Loading reader view for %s...\", this.currentLocation);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            logger.info(message);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String message \u003d String.format(\"Loading %s...\", this.currentLocation);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            logger.info(message);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Displays loaded message, and loads reader view if necessary."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void handleSucceeded() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // Log and display loaded message"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (isCurrentlyReaderView) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String message \u003d String.format(\"Successfully loaded reader view for %s\", this.currentLocation);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            logger.info(message);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String message \u003d String.format(\"Successfully loaded %s\", this.currentLocation);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            logger.info(message);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // Load reader view if reader view mode is selected but not loaded"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (viewMode.equals(ViewMode.READER) \u0026\u0026 !isCurrentlyReaderView) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            loadReader(currentLocation);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Displays failed to load message, and loads error page."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void handleFailed() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String message \u003d String.format(\"Failed to load %s\", this.currentLocation);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        logger.warning(message);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        loadErrorPage();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Loads an entry."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param entry entry to load"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void loadEntryPage(Entry entry) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        loadPage(entry.getOfflineOrOriginalLink().value);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Loads an error HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void loadErrorPage() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        loadPage(ERROR_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Loads a Web page."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param url URL of the Web page to load"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void loadPage(String url) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        isCurrentlyReaderView \u003d false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        currentLocation \u003d url;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            webEngine.setUserStyleSheetLocation(null);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            webEngine.load(url);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Loads reader view of current content."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Assumes original Web page is already loaded."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param url base URL"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void loadReader(String url) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        isCurrentlyReaderView \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // don\u0027t load reader view of default and error pages"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (url.equals(DEFAULT_PAGE.toExternalForm()) || url.equals(ERROR_PAGE.toExternalForm())) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // set stylesheet for reader view"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            Platform.runLater(() -\u003e webEngine.setUserStyleSheetLocation(STYLESHEET.toExternalForm()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } catch (IllegalArgumentException | NullPointerException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String message \u003d \"Failed to set user style sheet location\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            logger.warning(message);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // process loaded content, then load processed content"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String rawHtml \u003d XmlUtil.convertDocumentToString(webEngine.getDocument());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            Document readerDocument \u003d getReaderDocumentFrom(url, rawHtml);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String processedHtml \u003d readerDocument.outerHtml();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            Platform.runLater(() -\u003e webEngine.loadContent(processedHtml));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } catch (TransformerException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            String message \u003d String.format(\"Failed to load reader view for %s\", this.currentLocation);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            logger.warning(message);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Gets browser\u0027s web engine."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @return browser\u0027s web engine"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    protected WebEngine getWebEngine() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return webEngine;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Gets a document representing the reader view of the given HTML."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param baseUrl base URL"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param rawHtml raw HTML to process"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @return document representing the reader view of rawHtml"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    protected Document getReaderDocumentFrom(String baseUrl, String rawHtml) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // extract article metadata and content using Crux"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Article article \u003d ArticleExtractor.with(baseUrl, rawHtml)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .extractMetadata()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .extractContent()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .estimateReadingTime()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .article();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // reparse using Jsoup"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String processedHtml \u003d article.document.outerHtml();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Document document \u003d Jsoup.parse(processedHtml);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // wrap body in container"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        document.body().addClass(\"container py-5\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // add estimated reading time"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Element timeElement \u003d new Element(Tag.valueOf(\"small\"), \"\")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .text(article.estimatedReadingTimeMinutes + \" minutes\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Element timeWrapperElement \u003d new Element(Tag.valueOf(\"p\"), \"\").appendChild(timeElement);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        document.body().prependChild(timeWrapperElement);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // add title"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (!article.title.isEmpty()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            Element titleElement \u003d new Element(Tag.valueOf(\"h1\"), \"\").text(article.title).addClass(\"pb-3\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            document.body().prependChild(titleElement);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // add site name"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        if (!article.siteName.isEmpty()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            Element siteNameElement \u003d new Element(Tag.valueOf(\"p\"), \"\").text(article.siteName).addClass(\"lead\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            document.body().prependChild(siteNameElement);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return document;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 211,
      "thomastanck": 1,
      "-": 62,
      "epicfailname": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            processCommandSuccess();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            processCommandFailure();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Processes a command success."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void processCommandSuccess() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        initHistory();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.next();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Processes a command failure."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void processCommandFailure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        initHistory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 12,
      "-": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * An UI component that displays information of a {@code Entry}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String FXML \u003d \"EntryListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d { \"red\", \"pink\", \"purple\", \"deepPurple\", \"indigo\", \"blue\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                                                       \"lightBlue\", \"cyan\", \"teal\", \"green\", \"lightGreen\", \"lime\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                                                       \"yellow\", \"amber\", \"orange\", \"deepOrange\", \"brown\", \"gray\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                                                       \"blueGray\" };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EntryBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public final Entry entry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Label link;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryCard(Entry entry, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        title.setText(entry.getTitle().fullTitle);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        description.setText(entry.getDescription().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        address.setText(entry.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        address.setManaged(false); // Makes address label invisible, graphic pipeline will not manage it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        link.setText(entry.getLink().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entry.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!(other instanceof EntryCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryCard card \u003d (EntryCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 entry.equals(card.entry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Use hash code of tag title to generate random color, so color remains consistent between different runs."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "         * Java only guarantees the hashCode method must consistently return the same integer whenever it is invoked on"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": "         * the same object more than once during an execution of a Java application, but for practical purposes it"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "         * remains consistent from one execution of an application to another execution of the same application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 21,
      "-": 51,
      "epicfailname": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EntryListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String FXML \u003d \"EntryListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EntryListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private ListView\u003cEntry\u003e entryListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryListPanel(ObservableList\u003cEntry\u003e entryList, ObservableValue\u003cEntry\u003e selectedPerson,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                          Consumer\u003cEntry\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryListView.setItems(entryList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            logger.fine(\"Selection in entry list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            logger.fine(\"Selected entry changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected entry,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (Objects.equals(entryListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                entryListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                int index \u003d entryListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                entryListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                entryListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code EntryCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cEntry\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        protected void updateItem(Entry entry, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private EntryListPanel entryListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private StackPane entryListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedEntryProperty(), logic.viewModeProperty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryListPanel \u003d new EntryListPanel(logic.getFilteredEntryList(), logic.selectedEntryProperty(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                logic::setSelectedEntry);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryListPanelPlaceholder.getChildren().add(entryListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter(logic.getEntryBookFilePath(), logic.getEntryBook(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                logic.getFilteredEntryList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.logic.commandResultProperty().addListener((observable, oldCommandResult, newCommandResult) -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            processManualSuccess(newCommandResult);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        this.logic.exceptionProperty().addListener((observable, oldException, newException) -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            processManualFailure(newException);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryListPanel getEntryListPanel() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return entryListPanel;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            processCommandSuccess(commandResult);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            processCommandFailure(e, commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Processes a successful command entered into the command box."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void processCommandSuccess(CommandResult commandResult) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        resultDisplay.setFeedbackSuccessToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            handleHelp();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Processes a successful manually set command result."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void processManualSuccess(CommandResult commandResult) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        processCommandSuccess(commandResult);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        commandBox.processCommandSuccess();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Processes a failed command entered into the command box."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void processCommandFailure(Exception e, String commandText) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        resultDisplay.setFeedbackErrorToUser(e.getMessage());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Processes a propagated manually set exception."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void processManualFailure(Exception e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        logger.info(\"Operation failed: \" + e.getMessage());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        resultDisplay.setFeedbackErrorToUser(e.getMessage());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        commandBox.processCommandFailure();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 39,
      "thomastanck": 1,
      "-": 191,
      "epicfailname": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the result display style to use the default style."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the result display style to indicate a failed command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setFeedbackErrorToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void setFeedbackSuccessToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        setStyleToDefault();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 2,
      "-": 27,
      "epicfailname": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String TARGET_COUNT_STATUS \u003d \"Found %d entries\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private Label targetCountStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyEntryBook addressBook, ObservableList\u003cEntry\u003e entryList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryList.addListener(this::updateTargetCount);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        targetCountStatus.setText(String.format(TARGET_COUNT_STATUS, entryList.size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Updates the target count whenever the displayed entry list changes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void updateTargetCount(ListChangeListener.Change\u003c? extends Entry\u003e change) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        targetCountStatus.setText(String.format(TARGET_COUNT_STATUS, change.getList().size()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 9,
      "-": 67,
      "epicfailname": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ViewMode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * View modes available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public enum ViewMode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    READER, BROWSER"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 8
    }
  },
  {
    "path": "src/main/resources/browser/default.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/*!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Bootswatch v4.3.1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Homepage: https://bootswatch.com"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Copyright 2012-2019 Thomas Park"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Licensed under MIT"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Based on Bootstrap"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "*//*!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Bootstrap v4.3.1 (https://getbootstrap.com/)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Copyright 2011-2019 The Bootstrap Authors"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Copyright 2011-2019 Twitter, Inc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": " */:root{--blue: #4582EC;--indigo: #6610f2;--purple: #6f42c1;--pink: #e83e8c;--red: #d9534f;--orange: #fd7e14;--yellow: #f0ad4e;--green: #02B875;--teal: #20c997;--cyan: #17a2b8;--white: #fff;--gray: #868e96;--gray-dark: #343a40;--primary: #4582EC;--secondary: #adb5bd;--success: #02B875;--info: #17a2b8;--warning: #f0ad4e;--danger: #d9534f;--light: #f8f9fa;--dark: #343a40;--breakpoint-xs: 0;--breakpoint-sm: 576px;--breakpoint-md: 768px;--breakpoint-lg: 992px;--breakpoint-xl: 1200px;--font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";--font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace}*,*::before,*::after{-webkit-box-sizing:border-box;box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:1.063rem;font-weight:400;line-height:1.5;color:#343a40;text-align:left;background-color:#fff}[tabindex\u003d\"-1\"]:focus{outline:0 !important}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:0.5rem}p{margin-top:0;margin-bottom:1rem}abbr[title],abbr[data-original-title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul,dl{margin-top:0;margin-bottom:1rem}ol ol,ul ul,ol ul,ul ol{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#4582EC;text-decoration:none;background-color:transparent}a:hover{color:#1559cf;text-decoration:underline}a:not([href]):not([tabindex]){color:inherit;text-decoration:none}a:not([href]):not([tabindex]):hover,a:not([href]):not([tabindex]):focus{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}pre,code,kbd,samp{font-family:SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg{overflow:hidden;vertical-align:middle}table{border-collapse:collapse}caption{padding-top:0.75rem;padding-bottom:0.75rem;color:#868e96;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:0.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}input,button,select,optgroup,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}select{word-wrap:normal}button,[type\u003d\"button\"],[type\u003d\"reset\"],[type\u003d\"submit\"]{-webkit-appearance:button}button:not(:disabled),[type\u003d\"button\"]:not(:disabled),[type\u003d\"reset\"]:not(:disabled),[type\u003d\"submit\"]:not(:disabled){cursor:pointer}button::-moz-focus-inner,[type\u003d\"button\"]::-moz-focus-inner,[type\u003d\"reset\"]::-moz-focus-inner,[type\u003d\"submit\"]::-moz-focus-inner{padding:0;border-style:none}input[type\u003d\"radio\"],input[type\u003d\"checkbox\"]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type\u003d\"date\"],input[type\u003d\"time\"],input[type\u003d\"datetime-local\"],input[type\u003d\"month\"]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type\u003d\"number\"]::-webkit-inner-spin-button,[type\u003d\"number\"]::-webkit-outer-spin-button{height:auto}[type\u003d\"search\"]{outline-offset:-2px;-webkit-appearance:none}[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none !important}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{margin-bottom:0.5rem;font-weight:700;line-height:1.2}h1,.h1{font-size:2.6575rem}h2,.h2{font-size:2.126rem}h3,.h3{font-size:1.86025rem}h4,.h4{font-size:1.5945rem}h5,.h5{font-size:1.32875rem}h6,.h6{font-size:1.063rem}.lead{font-size:1.32875rem;font-weight:300}.display-1{font-size:6rem;font-weight:300;line-height:1.2}.display-2{font-size:5.5rem;font-weight:300;line-height:1.2}.display-3{font-size:4.5rem;font-weight:300;line-height:1.2}.display-4{font-size:3.5rem;font-weight:300;line-height:1.2}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,0.1)}small,.small{font-size:80%;font-weight:400}mark,.mark{padding:0.2em;background-color:#fcf8e3}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:0.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.32875rem}.blockquote-footer{display:block;font-size:80%;color:#868e96}.blockquote-footer::before{content:\"\\2014\\00A0\"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:0.25rem;background-color:#fff;border:1px solid #ddd;border-radius:0.25rem;max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:0.5rem;line-height:1}.figure-caption{font-size:90%;color:#868e96}code{font-size:87.5%;color:#e83e8c;word-break:break-word}a\u003ecode{color:inherit}kbd{padding:0.2rem 0.4rem;font-size:87.5%;color:#fff;background-color:#212529;border-radius:0.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:#212529}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width: 576px){.container{max-width:540px}}@media (min-width: 768px){.container{max-width:720px}}@media (min-width: 992px){.container{max-width:960px}}@media (min-width: 1200px){.container{max-width:1140px}}.container-fluid{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters\u003e.col,.no-gutters\u003e[class*\u003d\"col-\"]{padding-right:0;padding-left:0}.col-1,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-10,.col-11,.col-12,.col,.col-auto,.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm,.col-sm-auto,.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12,.col-md,.col-md-auto,.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg,.col-lg-auto,.col-xl-1,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl,.col-xl-auto{position:relative;width:100%;padding-right:15px;padding-left:15px}.col{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-1{margin-left:8.3333333333%}.offset-2{margin-left:16.6666666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.3333333333%}.offset-5{margin-left:41.6666666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.3333333333%}.offset-8{margin-left:66.6666666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.3333333333%}.offset-11{margin-left:91.6666666667%}@media (min-width: 576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-sm-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-sm-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-sm-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-sm-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-sm-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-sm-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-sm-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-sm-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-sm-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-sm-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-sm-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-sm-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-sm-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-sm-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-sm-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-sm-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-sm-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-sm-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-sm-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-sm-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-sm-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-sm-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-sm-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-sm-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.3333333333%}.offset-sm-2{margin-left:16.6666666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.3333333333%}.offset-sm-5{margin-left:41.6666666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.3333333333%}.offset-sm-8{margin-left:66.6666666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.3333333333%}.offset-sm-11{margin-left:91.6666666667%}}@media (min-width: 768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-md-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-md-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-md-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-md-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-md-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-md-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-md-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-md-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-md-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-md-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-md-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-md-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-md-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-md-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-md-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-md-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-md-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-md-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-md-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-md-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-md-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-md-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-md-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-md-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.3333333333%}.offset-md-2{margin-left:16.6666666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.3333333333%}.offset-md-5{margin-left:41.6666666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.3333333333%}.offset-md-8{margin-left:66.6666666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.3333333333%}.offset-md-11{margin-left:91.6666666667%}}@media (min-width: 992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-lg-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-lg-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-lg-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-lg-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-lg-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-lg-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-lg-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-lg-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-lg-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-lg-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-lg-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-lg-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-lg-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-lg-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-lg-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-lg-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-lg-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-lg-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-lg-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-lg-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-lg-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-lg-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-lg-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-lg-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.3333333333%}.offset-lg-2{margin-left:16.6666666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.3333333333%}.offset-lg-5{margin-left:41.6666666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.3333333333%}.offset-lg-8{margin-left:66.6666666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.3333333333%}.offset-lg-11{margin-left:91.6666666667%}}@media (min-width: 1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-xl-auto{-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-xl-1{-webkit-box-flex:0;-ms-flex:0 0 8.3333333333%;flex:0 0 8.3333333333%;max-width:8.3333333333%}.col-xl-2{-webkit-box-flex:0;-ms-flex:0 0 16.6666666667%;flex:0 0 16.6666666667%;max-width:16.6666666667%}.col-xl-3{-webkit-box-flex:0;-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-webkit-box-flex:0;-ms-flex:0 0 33.3333333333%;flex:0 0 33.3333333333%;max-width:33.3333333333%}.col-xl-5{-webkit-box-flex:0;-ms-flex:0 0 41.6666666667%;flex:0 0 41.6666666667%;max-width:41.6666666667%}.col-xl-6{-webkit-box-flex:0;-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-webkit-box-flex:0;-ms-flex:0 0 58.3333333333%;flex:0 0 58.3333333333%;max-width:58.3333333333%}.col-xl-8{-webkit-box-flex:0;-ms-flex:0 0 66.6666666667%;flex:0 0 66.6666666667%;max-width:66.6666666667%}.col-xl-9{-webkit-box-flex:0;-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-webkit-box-flex:0;-ms-flex:0 0 83.3333333333%;flex:0 0 83.3333333333%;max-width:83.3333333333%}.col-xl-11{-webkit-box-flex:0;-ms-flex:0 0 91.6666666667%;flex:0 0 91.6666666667%;max-width:91.6666666667%}.col-xl-12{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-xl-first{-webkit-box-ordinal-group:0;-ms-flex-order:-1;order:-1}.order-xl-last{-webkit-box-ordinal-group:14;-ms-flex-order:13;order:13}.order-xl-0{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.order-xl-1{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.order-xl-2{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}.order-xl-3{-webkit-box-ordinal-group:4;-ms-flex-order:3;order:3}.order-xl-4{-webkit-box-ordinal-group:5;-ms-flex-order:4;order:4}.order-xl-5{-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}.order-xl-6{-webkit-box-ordinal-group:7;-ms-flex-order:6;order:6}.order-xl-7{-webkit-box-ordinal-group:8;-ms-flex-order:7;order:7}.order-xl-8{-webkit-box-ordinal-group:9;-ms-flex-order:8;order:8}.order-xl-9{-webkit-box-ordinal-group:10;-ms-flex-order:9;order:9}.order-xl-10{-webkit-box-ordinal-group:11;-ms-flex-order:10;order:10}.order-xl-11{-webkit-box-ordinal-group:12;-ms-flex-order:11;order:11}.order-xl-12{-webkit-box-ordinal-group:13;-ms-flex-order:12;order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.3333333333%}.offset-xl-2{margin-left:16.6666666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.3333333333%}.offset-xl-5{margin-left:41.6666666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.3333333333%}.offset-xl-8{margin-left:66.6666666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.3333333333%}.offset-xl-11{margin-left:91.6666666667%}}.table{width:100%;margin-bottom:1rem;color:#343a40}.table th,.table td{padding:0.75rem;vertical-align:top;border-top:1px solid rgba(0,0,0,0.1)}.table thead th{vertical-align:bottom;border-bottom:2px solid rgba(0,0,0,0.1)}.table tbody+tbody{border-top:2px solid rgba(0,0,0,0.1)}.table-sm th,.table-sm td{padding:0.3rem}.table-bordered{border:1px solid rgba(0,0,0,0.1)}.table-bordered th,.table-bordered td{border:1px solid rgba(0,0,0,0.1)}.table-bordered thead th,.table-bordered thead td{border-bottom-width:2px}.table-borderless th,.table-borderless td,.table-borderless thead th,.table-borderless tbody+tbody{border:0}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,0.05)}.table-hover tbody tr:hover{color:#343a40;background-color:rgba(0,0,0,0.075)}.table-primary,.table-primary\u003eth,.table-primary\u003etd{background-color:#cbdcfa}.table-primary th,.table-primary td,.table-primary thead th,.table-primary tbody+tbody{border-color:#9ebef5}.table-hover .table-primary:hover{background-color:#b4ccf8}.table-hover .table-primary:hover\u003etd,.table-hover .table-primary:hover\u003eth{background-color:#b4ccf8}.table-secondary,.table-secondary\u003eth,.table-secondary\u003etd{background-color:#e8eaed}.table-secondary th,.table-secondary td,.table-secondary thead th,.table-secondary tbody+tbody{border-color:#d4d9dd}.table-hover .table-secondary:hover{background-color:#dadde2}.table-hover .table-secondary:hover\u003etd,.table-hover .table-secondary:hover\u003eth{background-color:#dadde2}.table-success,.table-success\u003eth,.table-success\u003etd{background-color:#b8ebd8}.table-success th,.table-success td,.table-success thead th,.table-success tbody+tbody{border-color:#7bdab7}.table-hover .table-success:hover{background-color:#a4e5cd}.table-hover .table-success:hover\u003etd,.table-hover .table-success:hover\u003eth{background-color:#a4e5cd}.table-info,.table-info\u003eth,.table-info\u003etd{background-color:#bee5eb}.table-info th,.table-info td,.table-info thead th,.table-info tbody+tbody{border-color:#86cfda}.table-hover .table-info:hover{background-color:#abdde5}.table-hover .table-info:hover\u003etd,.table-hover .table-info:hover\u003eth{background-color:#abdde5}.table-warning,.table-warning\u003eth,.table-warning\u003etd{background-color:#fbe8cd}.table-warning th,.table-warning td,.table-warning thead th,.table-warning tbody+tbody{border-color:#f7d4a3}.table-hover .table-warning:hover{background-color:#f9ddb5}.table-hover .table-warning:hover\u003etd,.table-hover .table-warning:hover\u003eth{background-color:#f9ddb5}.table-danger,.table-danger\u003eth,.table-danger\u003etd{background-color:#f4cfce}.table-danger th,.table-danger td,.table-danger thead th,.table-danger tbody+tbody{border-color:#eba6a3}.table-hover .table-danger:hover{background-color:#efbbb9}.table-hover .table-danger:hover\u003etd,.table-hover .table-danger:hover\u003eth{background-color:#efbbb9}.table-light,.table-light\u003eth,.table-light\u003etd{background-color:#fdfdfe}.table-light th,.table-light td,.table-light thead th,.table-light tbody+tbody{border-color:#fbfcfc}.table-hover .table-light:hover{background-color:#ececf6}.table-hover .table-light:hover\u003etd,.table-hover .table-light:hover\u003eth{background-color:#ececf6}.table-dark,.table-dark\u003eth,.table-dark\u003etd{background-color:#c6c8ca}.table-dark th,.table-dark td,.table-dark thead th,.table-dark tbody+tbody{border-color:#95999c}.table-hover .table-dark:hover{background-color:#b9bbbe}.table-hover .table-dark:hover\u003etd,.table-hover .table-dark:hover\u003eth{background-color:#b9bbbe}.table-active,.table-active\u003eth,.table-active\u003etd{background-color:rgba(0,0,0,0.075)}.table-hover .table-active:hover{background-color:rgba(0,0,0,0.075)}.table-hover .table-active:hover\u003etd,.table-hover .table-active:hover\u003eth{background-color:rgba(0,0,0,0.075)}.table .thead-dark th{color:#fff;background-color:#343a40;border-color:#454d55}.table .thead-light th{color:#495057;background-color:#e9ecef;border-color:rgba(0,0,0,0.1)}.table-dark{color:#fff;background-color:#343a40}.table-dark th,.table-dark td,.table-dark thead th{border-color:#454d55}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:rgba(255,255,255,0.05)}.table-dark.table-hover tbody tr:hover{color:#fff;background-color:rgba(255,255,255,0.075)}@media (max-width: 575.98px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-sm\u003e.table-bordered{border:0}}@media (max-width: 767.98px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-md\u003e.table-bordered{border:0}}@media (max-width: 991.98px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-lg\u003e.table-bordered{border:0}}@media (max-width: 1199.98px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-xl\u003e.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive\u003e.table-bordered{border:0}.form-control{display:block;width:100%;height:calc(1.5em + 1rem + 2px);padding:0.5rem 1.1rem;font-size:1.063rem;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,0.1);border-radius:0.25rem;-webkit-transition:border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.form-control{-webkit-transition:none;transition:none}}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#b9d0f8;outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25)}.form-control::-webkit-input-placeholder{color:#868e96;opacity:1}.form-control::-ms-input-placeholder{color:#868e96;opacity:1}.form-control::placeholder{color:#868e96;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(0.5rem + 1px);padding-bottom:calc(0.5rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(0.5rem + 1px);padding-bottom:calc(0.5rem + 1px);font-size:1.32875rem;line-height:1.5}.col-form-label-sm{padding-top:calc(0.25rem + 1px);padding-bottom:calc(0.25rem + 1px);font-size:0.930125rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding-top:0.5rem;padding-bottom:0.5rem;margin-bottom:0;line-height:1.5;color:#343a40;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-sm,.form-control-plaintext.form-control-lg{padding-right:0;padding-left:0}.form-control-sm{height:calc(1.5em + 0.5rem + 2px);padding:0.25rem 0.5rem;font-size:0.930125rem;line-height:1.5;border-radius:0.2rem}.form-control-lg{height:calc(1.5em + 1rem + 2px);padding:0.5rem 1rem;font-size:1.32875rem;line-height:1.5;border-radius:0.3rem}select.form-control[size],select.form-control[multiple]{height:auto}textarea.form-control{height:auto}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:0.25rem}.form-row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row\u003e.col,.form-row\u003e[class*\u003d\"col-\"]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:0.3rem;margin-left:-1.25rem}.form-check-input:disabled ~ .form-check-label{color:#868e96}.form-check-label{margin-bottom:0}.form-check-inline{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-left:0;margin-right:0.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:0.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:0.25rem;font-size:80%;color:#02B875}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:0.25rem 0.5rem;margin-top:.1rem;font-size:0.930125rem;line-height:1.5;color:#fff;background-color:rgba(2,184,117,0.9);border-radius:0.25rem}.was-validated .form-control:valid,.form-control.is-valid{border-color:#02B875;padding-right:calc(1.5em + 1rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 8 8\u0027%3e%3cpath fill\u003d\u0027%2302B875\u0027 d\u003d\u0027M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z\u0027/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:center right calc(0.375em + 0.25rem);background-size:calc(0.75em + 0.5rem) calc(0.75em + 0.5rem)}.was-validated .form-control:valid:focus,.form-control.is-valid:focus{border-color:#02B875;-webkit-box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25);box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25)}.was-validated .form-control:valid ~ .valid-feedback,.was-validated .form-control:valid ~ .valid-tooltip,.form-control.is-valid ~ .valid-feedback,.form-control.is-valid ~ .valid-tooltip{display:block}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + 1rem);background-position:top calc(0.375em + 0.25rem) right calc(0.375em + 0.25rem)}.was-validated .custom-select:valid,.custom-select.is-valid{border-color:#02B875;padding-right:calc((1em + 1rem) * 3 / 4 + 2.1rem);background:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 4 5\u0027%3e%3cpath fill\u003d\u0027%23343a40\u0027 d\u003d\u0027M2 0L0 2h4zm0 5L0 3h4z\u0027/%3e%3c/svg%3e\") no-repeat right 1.1rem center/8px 10px,url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 8 8\u0027%3e%3cpath fill\u003d\u0027%2302B875\u0027 d\u003d\u0027M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z\u0027/%3e%3c/svg%3e\") #fff no-repeat center right 2.1rem/calc(0.75em + 0.5rem) calc(0.75em + 0.5rem)}.was-validated .custom-select:valid:focus,.custom-select.is-valid:focus{border-color:#02B875;-webkit-box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25);box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25)}.was-validated .custom-select:valid ~ .valid-feedback,.was-validated .custom-select:valid ~ .valid-tooltip,.custom-select.is-valid ~ .valid-feedback,.custom-select.is-valid ~ .valid-tooltip{display:block}.was-validated .form-control-file:valid ~ .valid-feedback,.was-validated .form-control-file:valid ~ .valid-tooltip,.form-control-file.is-valid ~ .valid-feedback,.form-control-file.is-valid ~ .valid-tooltip{display:block}.was-validated .form-check-input:valid ~ .form-check-label,.form-check-input.is-valid ~ .form-check-label{color:#02B875}.was-validated .form-check-input:valid ~ .valid-feedback,.was-validated .form-check-input:valid ~ .valid-tooltip,.form-check-input.is-valid ~ .valid-feedback,.form-check-input.is-valid ~ .valid-tooltip{display:block}.was-validated .custom-control-input:valid ~ .custom-control-label,.custom-control-input.is-valid ~ .custom-control-label{color:#02B875}.was-validated .custom-control-input:valid ~ .custom-control-label::before,.custom-control-input.is-valid ~ .custom-control-label::before{border-color:#02B875}.was-validated .custom-control-input:valid ~ .valid-feedback,.was-validated .custom-control-input:valid ~ .valid-tooltip,.custom-control-input.is-valid ~ .valid-feedback,.custom-control-input.is-valid ~ .valid-tooltip{display:block}.was-validated .custom-control-input:valid:checked ~ .custom-control-label::before,.custom-control-input.is-valid:checked ~ .custom-control-label::before{border-color:#03ea95;background-color:#03ea95}.was-validated .custom-control-input:valid:focus ~ .custom-control-label::before,.custom-control-input.is-valid:focus ~ .custom-control-label::before{-webkit-box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25);box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25)}.was-validated .custom-control-input:valid:focus:not(:checked) ~ .custom-control-label::before,.custom-control-input.is-valid:focus:not(:checked) ~ .custom-control-label::before{border-color:#02B875}.was-validated .custom-file-input:valid ~ .custom-file-label,.custom-file-input.is-valid ~ .custom-file-label{border-color:#02B875}.was-validated .custom-file-input:valid ~ .valid-feedback,.was-validated .custom-file-input:valid ~ .valid-tooltip,.custom-file-input.is-valid ~ .valid-feedback,.custom-file-input.is-valid ~ .valid-tooltip{display:block}.was-validated .custom-file-input:valid:focus ~ .custom-file-label,.custom-file-input.is-valid:focus ~ .custom-file-label{border-color:#02B875;-webkit-box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25);box-shadow:0 0 0 0.2rem rgba(2,184,117,0.25)}.invalid-feedback{display:none;width:100%;margin-top:0.25rem;font-size:80%;color:#d9534f}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:0.25rem 0.5rem;margin-top:.1rem;font-size:0.930125rem;line-height:1.5;color:#fff;background-color:rgba(217,83,79,0.9);border-radius:0.25rem}.was-validated .form-control:invalid,.form-control.is-invalid{border-color:#d9534f;padding-right:calc(1.5em + 1rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 fill\u003d\u0027%23d9534f\u0027 viewBox\u003d\u0027-2 -2 7 7\u0027%3e%3cpath stroke\u003d\u0027%23d9534f\u0027 d\u003d\u0027M0 0l3 3m0-3L0 3\u0027/%3e%3ccircle r\u003d\u0027.5\u0027/%3e%3ccircle cx\u003d\u00273\u0027 r\u003d\u0027.5\u0027/%3e%3ccircle cy\u003d\u00273\u0027 r\u003d\u0027.5\u0027/%3e%3ccircle cx\u003d\u00273\u0027 cy\u003d\u00273\u0027 r\u003d\u0027.5\u0027/%3e%3c/svg%3E\");background-repeat:no-repeat;background-position:center right calc(0.375em + 0.25rem);background-size:calc(0.75em + 0.5rem) calc(0.75em + 0.5rem)}.was-validated .form-control:invalid:focus,.form-control.is-invalid:focus{border-color:#d9534f;-webkit-box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25);box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25)}.was-validated .form-control:invalid ~ .invalid-feedback,.was-validated .form-control:invalid ~ .invalid-tooltip,.form-control.is-invalid ~ .invalid-feedback,.form-control.is-invalid ~ .invalid-tooltip{display:block}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + 1rem);background-position:top calc(0.375em + 0.25rem) right calc(0.375em + 0.25rem)}.was-validated .custom-select:invalid,.custom-select.is-invalid{border-color:#d9534f;padding-right:calc((1em + 1rem) * 3 / 4 + 2.1rem);background:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 4 5\u0027%3e%3cpath fill\u003d\u0027%23343a40\u0027 d\u003d\u0027M2 0L0 2h4zm0 5L0 3h4z\u0027/%3e%3c/svg%3e\") no-repeat right 1.1rem center/8px 10px,url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 fill\u003d\u0027%23d9534f\u0027 viewBox\u003d\u0027-2 -2 7 7\u0027%3e%3cpath stroke\u003d\u0027%23d9534f\u0027 d\u003d\u0027M0 0l3 3m0-3L0 3\u0027/%3e%3ccircle r\u003d\u0027.5\u0027/%3e%3ccircle cx\u003d\u00273\u0027 r\u003d\u0027.5\u0027/%3e%3ccircle cy\u003d\u00273\u0027 r\u003d\u0027.5\u0027/%3e%3ccircle cx\u003d\u00273\u0027 cy\u003d\u00273\u0027 r\u003d\u0027.5\u0027/%3e%3c/svg%3E\") #fff no-repeat center right 2.1rem/calc(0.75em + 0.5rem) calc(0.75em + 0.5rem)}.was-validated .custom-select:invalid:focus,.custom-select.is-invalid:focus{border-color:#d9534f;-webkit-box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25);box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25)}.was-validated .custom-select:invalid ~ .invalid-feedback,.was-validated .custom-select:invalid ~ .invalid-tooltip,.custom-select.is-invalid ~ .invalid-feedback,.custom-select.is-invalid ~ .invalid-tooltip{display:block}.was-validated .form-control-file:invalid ~ .invalid-feedback,.was-validated .form-control-file:invalid ~ .invalid-tooltip,.form-control-file.is-invalid ~ .invalid-feedback,.form-control-file.is-invalid ~ .invalid-tooltip{display:block}.was-validated .form-check-input:invalid ~ .form-check-label,.form-check-input.is-invalid ~ .form-check-label{color:#d9534f}.was-validated .form-check-input:invalid ~ .invalid-feedback,.was-validated .form-check-input:invalid ~ .invalid-tooltip,.form-check-input.is-invalid ~ .invalid-feedback,.form-check-input.is-invalid ~ .invalid-tooltip{display:block}.was-validated .custom-control-input:invalid ~ .custom-control-label,.custom-control-input.is-invalid ~ .custom-control-label{color:#d9534f}.was-validated .custom-control-input:invalid ~ .custom-control-label::before,.custom-control-input.is-invalid ~ .custom-control-label::before{border-color:#d9534f}.was-validated .custom-control-input:invalid ~ .invalid-feedback,.was-validated .custom-control-input:invalid ~ .invalid-tooltip,.custom-control-input.is-invalid ~ .invalid-feedback,.custom-control-input.is-invalid ~ .invalid-tooltip{display:block}.was-validated .custom-control-input:invalid:checked ~ .custom-control-label::before,.custom-control-input.is-invalid:checked ~ .custom-control-label::before{border-color:#e27c79;background-color:#e27c79}.was-validated .custom-control-input:invalid:focus ~ .custom-control-label::before,.custom-control-input.is-invalid:focus ~ .custom-control-label::before{-webkit-box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25);box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25)}.was-validated .custom-control-input:invalid:focus:not(:checked) ~ .custom-control-label::before,.custom-control-input.is-invalid:focus:not(:checked) ~ .custom-control-label::before{border-color:#d9534f}.was-validated .custom-file-input:invalid ~ .custom-file-label,.custom-file-input.is-invalid ~ .custom-file-label{border-color:#d9534f}.was-validated .custom-file-input:invalid ~ .invalid-feedback,.was-validated .custom-file-input:invalid ~ .invalid-tooltip,.custom-file-input.is-invalid ~ .invalid-feedback,.custom-file-input.is-invalid ~ .invalid-tooltip{display:block}.was-validated .custom-file-input:invalid:focus ~ .custom-file-label,.custom-file-input.is-invalid:focus ~ .custom-file-label{border-color:#d9534f;-webkit-box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25);box-shadow:0 0 0 0.2rem rgba(217,83,79,0.25)}.form-inline{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.form-inline .form-check{width:100%}@media (min-width: 576px){.form-inline label{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-bottom:0}.form-inline .form-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:0;-ms-flex:0 0 auto;flex:0 0 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:0}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .input-group,.form-inline .custom-select{width:auto}.form-inline .form-check{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;-ms-flex-negative:0;flex-shrink:0;margin-top:0;margin-right:0.25rem;margin-left:0}.form-inline .custom-control{-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;color:#343a40;text-align:center;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;border:1px solid transparent;padding:0.5rem 1.1rem;font-size:1.063rem;line-height:1.5;border-radius:0.25rem;-webkit-transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.btn{-webkit-transition:none;transition:none}}.btn:hover{color:#343a40;text-decoration:none}.btn:focus,.btn.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25)}.btn.disabled,.btn:disabled{opacity:0.65}a.btn.disabled,fieldset:disabled a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#4582EC;border-color:#4582EC}.btn-primary:hover{color:#fff;background-color:#226be8;border-color:#1863e6}.btn-primary:focus,.btn-primary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(97,149,239,0.5);box-shadow:0 0 0 0.2rem rgba(97,149,239,0.5)}.btn-primary.disabled,.btn-primary:disabled{color:#fff;background-color:#4582EC;border-color:#4582EC}.btn-primary:not(:disabled):not(.disabled):active,.btn-primary:not(:disabled):not(.disabled).active,.show\u003e.btn-primary.dropdown-toggle{color:#fff;background-color:#1863e6;border-color:#165edb}.btn-primary:not(:disabled):not(.disabled):active:focus,.btn-primary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-primary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(97,149,239,0.5);box-shadow:0 0 0 0.2rem rgba(97,149,239,0.5)}.btn-secondary{color:#fff;background-color:#adb5bd;border-color:#adb5bd}.btn-secondary:hover{color:#fff;background-color:#98a2ac;border-color:#919ca6}.btn-secondary:focus,.btn-secondary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(185,192,199,0.5);box-shadow:0 0 0 0.2rem rgba(185,192,199,0.5)}.btn-secondary.disabled,.btn-secondary:disabled{color:#fff;background-color:#adb5bd;border-color:#adb5bd}.btn-secondary:not(:disabled):not(.disabled):active,.btn-secondary:not(:disabled):not(.disabled).active,.show\u003e.btn-secondary.dropdown-toggle{color:#fff;background-color:#919ca6;border-color:#8a95a1}.btn-secondary:not(:disabled):not(.disabled):active:focus,.btn-secondary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-secondary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(185,192,199,0.5);box-shadow:0 0 0 0.2rem rgba(185,192,199,0.5)}.btn-success{color:#fff;background-color:#02B875;border-color:#02B875}.btn-success:hover{color:#fff;background-color:#02925d;border-color:#018655}.btn-success:focus,.btn-success.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(40,195,138,0.5);box-shadow:0 0 0 0.2rem rgba(40,195,138,0.5)}.btn-success.disabled,.btn-success:disabled{color:#fff;background-color:#02B875;border-color:#02B875}.btn-success:not(:disabled):not(.disabled):active,.btn-success:not(:disabled):not(.disabled).active,.show\u003e.btn-success.dropdown-toggle{color:#fff;background-color:#018655;border-color:#01794d}.btn-success:not(:disabled):not(.disabled):active:focus,.btn-success:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-success.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(40,195,138,0.5);box-shadow:0 0 0 0.2rem rgba(40,195,138,0.5)}.btn-info{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:hover{color:#fff;background-color:#138496;border-color:#117a8b}.btn-info:focus,.btn-info.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(58,176,195,0.5);box-shadow:0 0 0 0.2rem rgba(58,176,195,0.5)}.btn-info.disabled,.btn-info:disabled{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:not(:disabled):not(.disabled):active,.btn-info:not(:disabled):not(.disabled).active,.show\u003e.btn-info.dropdown-toggle{color:#fff;background-color:#117a8b;border-color:#10707f}.btn-info:not(:disabled):not(.disabled):active:focus,.btn-info:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-info.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(58,176,195,0.5);box-shadow:0 0 0 0.2rem rgba(58,176,195,0.5)}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#f0ad4e}.btn-warning:hover{color:#fff;background-color:#ed9d2b;border-color:#ec971f}.btn-warning:focus,.btn-warning.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(242,185,105,0.5);box-shadow:0 0 0 0.2rem rgba(242,185,105,0.5)}.btn-warning.disabled,.btn-warning:disabled{color:#fff;background-color:#f0ad4e;border-color:#f0ad4e}.btn-warning:not(:disabled):not(.disabled):active,.btn-warning:not(:disabled):not(.disabled).active,.show\u003e.btn-warning.dropdown-toggle{color:#fff;background-color:#ec971f;border-color:#ea9214}.btn-warning:not(:disabled):not(.disabled):active:focus,.btn-warning:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-warning.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(242,185,105,0.5);box-shadow:0 0 0 0.2rem rgba(242,185,105,0.5)}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d9534f}.btn-danger:hover{color:#fff;background-color:#d23430;border-color:#c9302c}.btn-danger:focus,.btn-danger.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(223,109,105,0.5);box-shadow:0 0 0 0.2rem rgba(223,109,105,0.5)}.btn-danger.disabled,.btn-danger:disabled{color:#fff;background-color:#d9534f;border-color:#d9534f}.btn-danger:not(:disabled):not(.disabled):active,.btn-danger:not(:disabled):not(.disabled).active,.show\u003e.btn-danger.dropdown-toggle{color:#fff;background-color:#c9302c;border-color:#bf2e29}.btn-danger:not(:disabled):not(.disabled):active:focus,.btn-danger:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-danger.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(223,109,105,0.5);box-shadow:0 0 0 0.2rem rgba(223,109,105,0.5)}.btn-light{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#212529;background-color:#e2e6ea;border-color:#dae0e5}.btn-light:focus,.btn-light.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(216,217,219,0.5);box-shadow:0 0 0 0.2rem rgba(216,217,219,0.5)}.btn-light.disabled,.btn-light:disabled{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:not(:disabled):not(.disabled):active,.btn-light:not(:disabled):not(.disabled).active,.show\u003e.btn-light.dropdown-toggle{color:#212529;background-color:#dae0e5;border-color:#d3d9df}.btn-light:not(:disabled):not(.disabled):active:focus,.btn-light:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-light.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(216,217,219,0.5);box-shadow:0 0 0 0.2rem rgba(216,217,219,0.5)}.btn-dark{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:hover{color:#fff;background-color:#23272b;border-color:#1d2124}.btn-dark:focus,.btn-dark.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(82,88,93,0.5);box-shadow:0 0 0 0.2rem rgba(82,88,93,0.5)}.btn-dark.disabled,.btn-dark:disabled{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:not(:disabled):not(.disabled):active,.btn-dark:not(:disabled):not(.disabled).active,.show\u003e.btn-dark.dropdown-toggle{color:#fff;background-color:#1d2124;border-color:#171a1d}.btn-dark:not(:disabled):not(.disabled):active:focus,.btn-dark:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-dark.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(82,88,93,0.5);box-shadow:0 0 0 0.2rem rgba(82,88,93,0.5)}.btn-outline-primary{color:#4582EC;border-color:#4582EC}.btn-outline-primary:hover{color:#fff;background-color:#4582EC;border-color:#4582EC}.btn-outline-primary:focus,.btn-outline-primary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.5);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#4582EC;background-color:transparent}.btn-outline-primary:not(:disabled):not(.disabled):active,.btn-outline-primary:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#4582EC;border-color:#4582EC}.btn-outline-primary:not(:disabled):not(.disabled):active:focus,.btn-outline-primary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-primary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.5);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.5)}.btn-outline-secondary{color:#adb5bd;border-color:#adb5bd}.btn-outline-secondary:hover{color:#fff;background-color:#adb5bd;border-color:#adb5bd}.btn-outline-secondary:focus,.btn-outline-secondary.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5);box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#adb5bd;background-color:transparent}.btn-outline-secondary:not(:disabled):not(.disabled):active,.btn-outline-secondary:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-secondary.dropdown-toggle{color:#fff;background-color:#adb5bd;border-color:#adb5bd}.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-secondary.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5);box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5)}.btn-outline-success{color:#02B875;border-color:#02B875}.btn-outline-success:hover{color:#fff;background-color:#02B875;border-color:#02B875}.btn-outline-success:focus,.btn-outline-success.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(2,184,117,0.5);box-shadow:0 0 0 0.2rem rgba(2,184,117,0.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#02B875;background-color:transparent}.btn-outline-success:not(:disabled):not(.disabled):active,.btn-outline-success:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-success.dropdown-toggle{color:#fff;background-color:#02B875;border-color:#02B875}.btn-outline-success:not(:disabled):not(.disabled):active:focus,.btn-outline-success:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-success.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(2,184,117,0.5);box-shadow:0 0 0 0.2rem rgba(2,184,117,0.5)}.btn-outline-info{color:#17a2b8;border-color:#17a2b8}.btn-outline-info:hover{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info:focus,.btn-outline-info.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(23,162,184,0.5);box-shadow:0 0 0 0.2rem rgba(23,162,184,0.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#17a2b8;background-color:transparent}.btn-outline-info:not(:disabled):not(.disabled):active,.btn-outline-info:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-info.dropdown-toggle{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info:not(:disabled):not(.disabled):active:focus,.btn-outline-info:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-info.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(23,162,184,0.5);box-shadow:0 0 0 0.2rem rgba(23,162,184,0.5)}.btn-outline-warning{color:#f0ad4e;border-color:#f0ad4e}.btn-outline-warning:hover{color:#fff;background-color:#f0ad4e;border-color:#f0ad4e}.btn-outline-warning:focus,.btn-outline-warning.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(240,173,78,0.5);box-shadow:0 0 0 0.2rem rgba(240,173,78,0.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#f0ad4e;background-color:transparent}.btn-outline-warning:not(:disabled):not(.disabled):active,.btn-outline-warning:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-warning.dropdown-toggle{color:#fff;background-color:#f0ad4e;border-color:#f0ad4e}.btn-outline-warning:not(:disabled):not(.disabled):active:focus,.btn-outline-warning:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-warning.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(240,173,78,0.5);box-shadow:0 0 0 0.2rem rgba(240,173,78,0.5)}.btn-outline-danger{color:#d9534f;border-color:#d9534f}.btn-outline-danger:hover{color:#fff;background-color:#d9534f;border-color:#d9534f}.btn-outline-danger:focus,.btn-outline-danger.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(217,83,79,0.5);box-shadow:0 0 0 0.2rem rgba(217,83,79,0.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#d9534f;background-color:transparent}.btn-outline-danger:not(:disabled):not(.disabled):active,.btn-outline-danger:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#d9534f;border-color:#d9534f}.btn-outline-danger:not(:disabled):not(.disabled):active:focus,.btn-outline-danger:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-danger.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(217,83,79,0.5);box-shadow:0 0 0 0.2rem rgba(217,83,79,0.5)}.btn-outline-light{color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:focus,.btn-outline-light.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(248,249,250,0.5);box-shadow:0 0 0 0.2rem rgba(248,249,250,0.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#f8f9fa;background-color:transparent}.btn-outline-light:not(:disabled):not(.disabled):active,.btn-outline-light:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-light.dropdown-toggle{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:not(:disabled):not(.disabled):active:focus,.btn-outline-light:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-light.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(248,249,250,0.5);box-shadow:0 0 0 0.2rem rgba(248,249,250,0.5)}.btn-outline-dark{color:#343a40;border-color:#343a40}.btn-outline-dark:hover{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark:focus,.btn-outline-dark.focus{-webkit-box-shadow:0 0 0 0.2rem rgba(52,58,64,0.5);box-shadow:0 0 0 0.2rem rgba(52,58,64,0.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#343a40;background-color:transparent}.btn-outline-dark:not(:disabled):not(.disabled):active,.btn-outline-dark:not(:disabled):not(.disabled).active,.show\u003e.btn-outline-dark.dropdown-toggle{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark:not(:disabled):not(.disabled):active:focus,.btn-outline-dark:not(:disabled):not(.disabled).active:focus,.show\u003e.btn-outline-dark.dropdown-toggle:focus{-webkit-box-shadow:0 0 0 0.2rem rgba(52,58,64,0.5);box-shadow:0 0 0 0.2rem rgba(52,58,64,0.5)}.btn-link{font-weight:400;color:#4582EC;text-decoration:none}.btn-link:hover{color:#1559cf;text-decoration:underline}.btn-link:focus,.btn-link.focus{text-decoration:underline;-webkit-box-shadow:none;box-shadow:none}.btn-link:disabled,.btn-link.disabled{color:#868e96;pointer-events:none}.btn-lg,.btn-group-lg\u003e.btn{padding:0.5rem 1rem;font-size:1.32875rem;line-height:1.5;border-radius:0.3rem}.btn-sm,.btn-group-sm\u003e.btn{padding:0.25rem 0.5rem;font-size:0.930125rem;line-height:1.5;border-radius:0.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:0.5rem}input[type\u003d\"submit\"].btn-block,input[type\u003d\"reset\"].btn-block,input[type\u003d\"button\"].btn-block{width:100%}.fade{-webkit-transition:opacity 0.15s linear;transition:opacity 0.15s linear}@media (prefers-reduced-motion: reduce){.fade{-webkit-transition:none;transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition:height 0.35s ease;transition:height 0.35s ease}@media (prefers-reduced-motion: reduce){.collapsing{-webkit-transition:none;transition:none}}.dropup,.dropright,.dropdown,.dropleft{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle::after{display:inline-block;margin-left:0.255em;vertical-align:0.255em;content:\"\";border-top:0.3em solid;border-right:0.3em solid transparent;border-bottom:0;border-left:0.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:0.5rem 0;margin:0.125rem 0 0;font-size:1.063rem;color:#343a40;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,0.15);border-radius:0.25rem}.dropdown-menu-left{right:auto;left:0}.dropdown-menu-right{right:0;left:auto}@media (min-width: 576px){.dropdown-menu-sm-left{right:auto;left:0}.dropdown-menu-sm-right{right:0;left:auto}}@media (min-width: 768px){.dropdown-menu-md-left{right:auto;left:0}.dropdown-menu-md-right{right:0;left:auto}}@media (min-width: 992px){.dropdown-menu-lg-left{right:auto;left:0}.dropdown-menu-lg-right{right:0;left:auto}}@media (min-width: 1200px){.dropdown-menu-xl-left{right:auto;left:0}.dropdown-menu-xl-right{right:0;left:auto}}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:0.125rem}.dropup .dropdown-toggle::after{display:inline-block;margin-left:0.255em;vertical-align:0.255em;content:\"\";border-top:0;border-right:0.3em solid transparent;border-bottom:0.3em solid;border-left:0.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:0.125rem}.dropright .dropdown-toggle::after{display:inline-block;margin-left:0.255em;vertical-align:0.255em;content:\"\";border-top:0.3em solid transparent;border-right:0;border-bottom:0.3em solid transparent;border-left:0.3em solid}.dropright .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-toggle::after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:0.125rem}.dropleft .dropdown-toggle::after{display:inline-block;margin-left:0.255em;vertical-align:0.255em;content:\"\"}.dropleft .dropdown-toggle::after{display:none}.dropleft .dropdown-toggle::before{display:inline-block;margin-right:0.255em;vertical-align:0.255em;content:\"\";border-top:0.3em solid transparent;border-right:0.3em solid;border-bottom:0.3em solid transparent}.dropleft .dropdown-toggle:empty::after{margin-left:0}.dropleft .dropdown-toggle::before{vertical-align:0}.dropdown-menu[x-placement^\u003d\"top\"],.dropdown-menu[x-placement^\u003d\"right\"],.dropdown-menu[x-placement^\u003d\"bottom\"],.dropdown-menu[x-placement^\u003d\"left\"]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:0.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:0.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:hover,.dropdown-item:focus{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#4582EC}.dropdown-item.disabled,.dropdown-item:disabled{color:#868e96;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:0.5rem 1.5rem;margin-bottom:0;font-size:0.930125rem;color:#868e96;white-space:nowrap}.dropdown-item-text{display:block;padding:0.25rem 1.5rem;color:#212529}.btn-group,.btn-group-vertical{position:relative;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.btn-group\u003e.btn,.btn-group-vertical\u003e.btn{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.btn-group\u003e.btn:hover,.btn-group-vertical\u003e.btn:hover{z-index:1}.btn-group\u003e.btn:focus,.btn-group\u003e.btn:active,.btn-group\u003e.btn.active,.btn-group-vertical\u003e.btn:focus,.btn-group-vertical\u003e.btn:active,.btn-group-vertical\u003e.btn.active{z-index:1}.btn-toolbar{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group\u003e.btn:not(:first-child),.btn-group\u003e.btn-group:not(:first-child){margin-left:-1px}.btn-group\u003e.btn:not(:last-child):not(.dropdown-toggle),.btn-group\u003e.btn-group:not(:last-child)\u003e.btn{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group\u003e.btn:not(:first-child),.btn-group\u003e.btn-group:not(:first-child)\u003e.btn{border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:0.825rem;padding-left:0.825rem}.dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after,.dropright .dropdown-toggle-split::after{margin-left:0}.dropleft .dropdown-toggle-split::before{margin-right:0}.btn-sm+.dropdown-toggle-split,.btn-group-sm\u003e.btn+.dropdown-toggle-split{padding-right:0.375rem;padding-left:0.375rem}.btn-lg+.dropdown-toggle-split,.btn-group-lg\u003e.btn+.dropdown-toggle-split{padding-right:0.75rem;padding-left:0.75rem}.btn-group-vertical{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.btn-group-vertical\u003e.btn,.btn-group-vertical\u003e.btn-group{width:100%}.btn-group-vertical\u003e.btn:not(:first-child),.btn-group-vertical\u003e.btn-group:not(:first-child){margin-top:-1px}.btn-group-vertical\u003e.btn:not(:last-child):not(.dropdown-toggle),.btn-group-vertical\u003e.btn-group:not(:last-child)\u003e.btn{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical\u003e.btn:not(:first-child),.btn-group-vertical\u003e.btn-group:not(:first-child)\u003e.btn{border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle\u003e.btn,.btn-group-toggle\u003e.btn-group\u003e.btn{margin-bottom:0}.btn-group-toggle\u003e.btn input[type\u003d\"radio\"],.btn-group-toggle\u003e.btn input[type\u003d\"checkbox\"],.btn-group-toggle\u003e.btn-group\u003e.btn input[type\u003d\"radio\"],.btn-group-toggle\u003e.btn-group\u003e.btn input[type\u003d\"checkbox\"]{position:absolute;clip:rect(0, 0, 0, 0);pointer-events:none}.input-group{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;width:100%}.input-group\u003e.form-control,.input-group\u003e.form-control-plaintext,.input-group\u003e.custom-select,.input-group\u003e.custom-file{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;width:1%;margin-bottom:0}.input-group\u003e.form-control+.form-control,.input-group\u003e.form-control+.custom-select,.input-group\u003e.form-control+.custom-file,.input-group\u003e.form-control-plaintext+.form-control,.input-group\u003e.form-control-plaintext+.custom-select,.input-group\u003e.form-control-plaintext+.custom-file,.input-group\u003e.custom-select+.form-control,.input-group\u003e.custom-select+.custom-select,.input-group\u003e.custom-select+.custom-file,.input-group\u003e.custom-file+.form-control,.input-group\u003e.custom-file+.custom-select,.input-group\u003e.custom-file+.custom-file{margin-left:-1px}.input-group\u003e.form-control:focus,.input-group\u003e.custom-select:focus,.input-group\u003e.custom-file .custom-file-input:focus ~ .custom-file-label{z-index:3}.input-group\u003e.custom-file .custom-file-input:focus{z-index:4}.input-group\u003e.form-control:not(:last-child),.input-group\u003e.custom-select:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group\u003e.form-control:not(:first-child),.input-group\u003e.custom-select:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group\u003e.custom-file{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.input-group\u003e.custom-file:not(:last-child) .custom-file-label,.input-group\u003e.custom-file:not(:last-child) .custom-file-label::after{border-top-right-radius:0;border-bottom-right-radius:0}.input-group\u003e.custom-file:not(:first-child) .custom-file-label{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-prepend,.input-group-append{display:-webkit-box;display:-ms-flexbox;display:flex}.input-group-prepend .btn,.input-group-append .btn{position:relative;z-index:2}.input-group-prepend .btn:focus,.input-group-append .btn:focus{z-index:3}.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.input-group-text,.input-group-append .input-group-text+.btn{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0.5rem 1.1rem;margin-bottom:0;font-size:1.063rem;font-weight:400;line-height:1.5;color:#495057;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid rgba(0,0,0,0.1);border-radius:0.25rem}.input-group-text input[type\u003d\"radio\"],.input-group-text input[type\u003d\"checkbox\"]{margin-top:0}.input-group-lg\u003e.form-control:not(textarea),.input-group-lg\u003e.custom-select{height:calc(1.5em + 1rem + 2px)}.input-group-lg\u003e.form-control,.input-group-lg\u003e.custom-select,.input-group-lg\u003e.input-group-prepend\u003e.input-group-text,.input-group-lg\u003e.input-group-append\u003e.input-group-text,.input-group-lg\u003e.input-group-prepend\u003e.btn,.input-group-lg\u003e.input-group-append\u003e.btn{padding:0.5rem 1rem;font-size:1.32875rem;line-height:1.5;border-radius:0.3rem}.input-group-sm\u003e.form-control:not(textarea),.input-group-sm\u003e.custom-select{height:calc(1.5em + 0.5rem + 2px)}.input-group-sm\u003e.form-control,.input-group-sm\u003e.custom-select,.input-group-sm\u003e.input-group-prepend\u003e.input-group-text,.input-group-sm\u003e.input-group-append\u003e.input-group-text,.input-group-sm\u003e.input-group-prepend\u003e.btn,.input-group-sm\u003e.input-group-append\u003e.btn{padding:0.25rem 0.5rem;font-size:0.930125rem;line-height:1.5;border-radius:0.2rem}.input-group-lg\u003e.custom-select,.input-group-sm\u003e.custom-select{padding-right:2.1rem}.input-group\u003e.input-group-prepend\u003e.btn,.input-group\u003e.input-group-prepend\u003e.input-group-text,.input-group\u003e.input-group-append:not(:last-child)\u003e.btn,.input-group\u003e.input-group-append:not(:last-child)\u003e.input-group-text,.input-group\u003e.input-group-append:last-child\u003e.btn:not(:last-child):not(.dropdown-toggle),.input-group\u003e.input-group-append:last-child\u003e.input-group-text:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group\u003e.input-group-append\u003e.btn,.input-group\u003e.input-group-append\u003e.input-group-text,.input-group\u003e.input-group-prepend:not(:first-child)\u003e.btn,.input-group\u003e.input-group-prepend:not(:first-child)\u003e.input-group-text,.input-group\u003e.input-group-prepend:first-child\u003e.btn:not(:first-child),.input-group\u003e.input-group-prepend:first-child\u003e.input-group-text:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;display:block;min-height:1.5945rem;padding-left:1.5rem}.custom-control-inline{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked ~ .custom-control-label::before{color:#fff;border-color:#4582EC;background-color:#4582EC}.custom-control-input:focus ~ .custom-control-label::before{-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25)}.custom-control-input:focus:not(:checked) ~ .custom-control-label::before{border-color:#b9d0f8}.custom-control-input:not(:disabled):active ~ .custom-control-label::before{color:#fff;background-color:#e7effd;border-color:#e7effd}.custom-control-input:disabled ~ .custom-control-label{color:#868e96}.custom-control-input:disabled ~ .custom-control-label::before{background-color:#e9ecef}.custom-control-label{position:relative;margin-bottom:0;vertical-align:top}.custom-control-label::before{position:absolute;top:0.29725rem;left:-1.5rem;display:block;width:1rem;height:1rem;pointer-events:none;content:\"\";background-color:#fff;border:#adb5bd solid 1px}.custom-control-label::after{position:absolute;top:0.29725rem;left:-1.5rem;display:block;width:1rem;height:1rem;content:\"\";background:no-repeat 50% / 50% 50%}.custom-checkbox .custom-control-label::before{border-radius:0.25rem}.custom-checkbox .custom-control-input:checked ~ .custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 8 8\u0027%3e%3cpath fill\u003d\u0027%23fff\u0027 d\u003d\u0027M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\u0027/%3e%3c/svg%3e\")}.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::before{border-color:#4582EC;background-color:#4582EC}.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 4 4\u0027%3e%3cpath stroke\u003d\u0027%23fff\u0027 d\u003d\u0027M0 2h4\u0027/%3e%3c/svg%3e\")}.custom-checkbox .custom-control-input:disabled:checked ~ .custom-control-label::before{background-color:rgba(69,130,236,0.5)}.custom-checkbox .custom-control-input:disabled:indeterminate ~ .custom-control-label::before{background-color:rgba(69,130,236,0.5)}.custom-radio .custom-control-label::before{border-radius:50%}.custom-radio .custom-control-input:checked ~ .custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u0027-4 -4 8 8\u0027%3e%3ccircle r\u003d\u00273\u0027 fill\u003d\u0027%23fff\u0027/%3e%3c/svg%3e\")}.custom-radio .custom-control-input:disabled:checked ~ .custom-control-label::before{background-color:rgba(69,130,236,0.5)}.custom-switch{padding-left:2.25rem}.custom-switch .custom-control-label::before{left:-2.25rem;width:1.75rem;pointer-events:all;border-radius:0.5rem}.custom-switch .custom-control-label::after{top:calc(0.29725rem + 2px);left:calc(-2.25rem + 2px);width:calc(1rem - 4px);height:calc(1rem - 4px);background-color:#adb5bd;border-radius:0.5rem;-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-transform 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-transform 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:transform 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:transform 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-transform 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.custom-switch .custom-control-label::after{-webkit-transition:none;transition:none}}.custom-switch .custom-control-input:checked ~ .custom-control-label::after{background-color:#fff;-webkit-transform:translateX(0.75rem);transform:translateX(0.75rem)}.custom-switch .custom-control-input:disabled:checked ~ .custom-control-label::before{background-color:rgba(69,130,236,0.5)}.custom-select{display:inline-block;width:100%;height:calc(1.5em + 1rem + 2px);padding:0.5rem 2.1rem 0.5rem 1.1rem;font-size:1.063rem;font-weight:400;line-height:1.5;color:#495057;vertical-align:middle;background:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 viewBox\u003d\u00270 0 4 5\u0027%3e%3cpath fill\u003d\u0027%23343a40\u0027 d\u003d\u0027M2 0L0 2h4zm0 5L0 3h4z\u0027/%3e%3c/svg%3e\") no-repeat right 1.1rem center/8px 10px;background-color:#fff;border:1px solid rgba(0,0,0,0.1);border-radius:0.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#b9d0f8;outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25)}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size\u003d\"1\"]){height:auto;padding-right:1.1rem;background-image:none}.custom-select:disabled{color:#868e96;background-color:#e9ecef}.custom-select::-ms-expand{display:none}.custom-select-sm{height:calc(1.5em + 0.5rem + 2px);padding-top:0.25rem;padding-bottom:0.25rem;padding-left:0.5rem;font-size:0.930125rem}.custom-select-lg{height:calc(1.5em + 1rem + 2px);padding-top:0.5rem;padding-bottom:0.5rem;padding-left:1rem;font-size:1.32875rem}.custom-file{position:relative;display:inline-block;width:100%;height:calc(1.5em + 1rem + 2px);margin-bottom:0}.custom-file-input{position:relative;z-index:2;width:100%;height:calc(1.5em + 1rem + 2px);margin:0;opacity:0}.custom-file-input:focus ~ .custom-file-label{border-color:#b9d0f8;-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25)}.custom-file-input:disabled ~ .custom-file-label{background-color:#e9ecef}.custom-file-input:lang(en) ~ .custom-file-label::after{content:\"Browse\"}.custom-file-input ~ .custom-file-label[data-browse]::after{content:attr(data-browse)}.custom-file-label{position:absolute;top:0;right:0;left:0;z-index:1;height:calc(1.5em + 1rem + 2px);padding:0.5rem 1.1rem;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;border:1px solid rgba(0,0,0,0.1);border-radius:0.25rem}.custom-file-label::after{position:absolute;top:0;right:0;bottom:0;z-index:3;display:block;height:calc(1.5em + 1rem);padding:0.5rem 1.1rem;line-height:1.5;color:#495057;content:\"Browse\";background-color:#e9ecef;border-left:inherit;border-radius:0 0.25rem 0.25rem 0}.custom-range{width:100%;height:calc(1rem + 0.4rem);padding:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-range:focus{outline:none}.custom-range:focus::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 1px #fff,0 0 0 0.2rem rgba(69,130,236,0.25);box-shadow:0 0 0 1px #fff,0 0 0 0.2rem rgba(69,130,236,0.25)}.custom-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 0.2rem rgba(69,130,236,0.25)}.custom-range:focus::-ms-thumb{box-shadow:0 0 0 1px #fff,0 0 0 0.2rem rgba(69,130,236,0.25)}.custom-range::-moz-focus-outer{border:0}.custom-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-0.25rem;background-color:#4582EC;border:0;border-radius:1rem;-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;-webkit-appearance:none;appearance:none}@media (prefers-reduced-motion: reduce){.custom-range::-webkit-slider-thumb{-webkit-transition:none;transition:none}}.custom-range::-webkit-slider-thumb:active{background-color:#e7effd}.custom-range::-webkit-slider-runnable-track{width:100%;height:0.5rem;color:transparent;cursor:pointer;background-color:#ddd;border-color:transparent;border-radius:1rem}.custom-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#4582EC;border:0;border-radius:1rem;-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;-moz-appearance:none;appearance:none}@media (prefers-reduced-motion: reduce){.custom-range::-moz-range-thumb{-webkit-transition:none;transition:none}}.custom-range::-moz-range-thumb:active{background-color:#e7effd}.custom-range::-moz-range-track{width:100%;height:0.5rem;color:transparent;cursor:pointer;background-color:#ddd;border-color:transparent;border-radius:1rem}.custom-range::-ms-thumb{width:1rem;height:1rem;margin-top:0;margin-right:0.2rem;margin-left:0.2rem;background-color:#4582EC;border:0;border-radius:1rem;-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;appearance:none}@media (prefers-reduced-motion: reduce){.custom-range::-ms-thumb{-webkit-transition:none;transition:none}}.custom-range::-ms-thumb:active{background-color:#e7effd}.custom-range::-ms-track{width:100%;height:0.5rem;color:transparent;cursor:pointer;background-color:transparent;border-color:transparent;border-width:0.5rem}.custom-range::-ms-fill-lower{background-color:#ddd;border-radius:1rem}.custom-range::-ms-fill-upper{margin-right:15px;background-color:#ddd;border-radius:1rem}.custom-range:disabled::-webkit-slider-thumb{background-color:#adb5bd}.custom-range:disabled::-webkit-slider-runnable-track{cursor:default}.custom-range:disabled::-moz-range-thumb{background-color:#adb5bd}.custom-range:disabled::-moz-range-track{cursor:default}.custom-range:disabled::-ms-thumb{background-color:#adb5bd}.custom-control-label::before,.custom-file-label,.custom-select{-webkit-transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.custom-control-label::before,.custom-file-label,.custom-select{-webkit-transition:none;transition:none}}.nav{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:0.5rem 1rem}.nav-link:hover,.nav-link:focus{text-decoration:none}.nav-link.disabled{color:#868e96;pointer-events:none;cursor:default}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:0.25rem;border-top-right-radius:0.25rem}.nav-tabs .nav-link:hover,.nav-tabs .nav-link:focus{border-color:#e9ecef #e9ecef #ddd}.nav-tabs .nav-link.disabled{color:#868e96;background-color:transparent;border-color:transparent}.nav-tabs .nav-link.active,.nav-tabs .nav-item.show .nav-link{color:#495057;background-color:#fff;border-color:#ddd #ddd #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:0.25rem}.nav-pills .nav-link.active,.nav-pills .show\u003e.nav-link{color:#fff;background-color:#4582EC}.nav-fill .nav-item{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;text-align:center}.nav-justified .nav-item{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;text-align:center}.tab-content\u003e.tab-pane{display:none}.tab-content\u003e.active{display:block}.navbar{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:0.5rem 1rem}.navbar\u003e.container,.navbar\u003e.container-fluid{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:0.3006875rem;padding-bottom:0.3006875rem;margin-right:1rem;font-size:1.32875rem;line-height:inherit;white-space:nowrap}.navbar-brand:hover,.navbar-brand:focus{text-decoration:none}.navbar-nav{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:0.5rem;padding-bottom:0.5rem}.navbar-collapse{-ms-flex-preferred-size:100%;flex-basis:100%;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.navbar-toggler{padding:0.25rem 0.75rem;font-size:1.32875rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:0.25rem}.navbar-toggler:hover,.navbar-toggler:focus{text-decoration:none}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\"\";background:no-repeat center center;background-size:100% 100%}@media (max-width: 575.98px){.navbar-expand-sm\u003e.container,.navbar-expand-sm\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 576px){.navbar-expand-sm{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-sm .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-sm\u003e.container,.navbar-expand-sm\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}}@media (max-width: 767.98px){.navbar-expand-md\u003e.container,.navbar-expand-md\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 768px){.navbar-expand-md{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-md .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-md\u003e.container,.navbar-expand-md\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}}@media (max-width: 991.98px){.navbar-expand-lg\u003e.container,.navbar-expand-lg\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 992px){.navbar-expand-lg{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-lg .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-lg\u003e.container,.navbar-expand-lg\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}}@media (max-width: 1199.98px){.navbar-expand-xl\u003e.container,.navbar-expand-xl\u003e.container-fluid{padding-right:0;padding-left:0}}@media (min-width: 1200px){.navbar-expand-xl{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-xl .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand-xl\u003e.container,.navbar-expand-xl\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}}.navbar-expand{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand\u003e.container,.navbar-expand\u003e.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:0.5rem;padding-left:0.5rem}.navbar-expand\u003e.container,.navbar-expand\u003e.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-light .navbar-brand{color:#343a40}.navbar-light .navbar-brand:hover,.navbar-light .navbar-brand:focus{color:#343a40}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,0.5)}.navbar-light .navbar-nav .nav-link:hover,.navbar-light .navbar-nav .nav-link:focus{color:#343a40}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,0.3)}.navbar-light .navbar-nav .show\u003e.nav-link,.navbar-light .navbar-nav .active\u003e.nav-link,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .nav-link.active{color:#343a40}.navbar-light .navbar-toggler{color:rgba(0,0,0,0.5);border-color:rgba(0,0,0,0.1)}.navbar-light .navbar-toggler-icon{background-image:url(\"data:image/svg+xml,%3csvg viewBox\u003d\u00270 0 30 30\u0027 xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027%3e%3cpath stroke\u003d\u0027rgba(0, 0, 0, 0.5)\u0027 stroke-width\u003d\u00272\u0027 stroke-linecap\u003d\u0027round\u0027 stroke-miterlimit\u003d\u002710\u0027 d\u003d\u0027M4 7h22M4 15h22M4 23h22\u0027/%3e%3c/svg%3e\")}.navbar-light .navbar-text{color:rgba(0,0,0,0.5)}.navbar-light .navbar-text a{color:#343a40}.navbar-light .navbar-text a:hover,.navbar-light .navbar-text a:focus{color:#343a40}.navbar-dark .navbar-brand{color:#fff}.navbar-dark .navbar-brand:hover,.navbar-dark .navbar-brand:focus{color:#fff}.navbar-dark .navbar-nav .nav-link{color:rgba(255,255,255,0.6)}.navbar-dark .navbar-nav .nav-link:hover,.navbar-dark .navbar-nav .nav-link:focus{color:#fff}.navbar-dark .navbar-nav .nav-link.disabled{color:rgba(255,255,255,0.25)}.navbar-dark .navbar-nav .show\u003e.nav-link,.navbar-dark .navbar-nav .active\u003e.nav-link,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .nav-link.active{color:#fff}.navbar-dark .navbar-toggler{color:rgba(255,255,255,0.6);border-color:rgba(255,255,255,0.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\"data:image/svg+xml,%3csvg viewBox\u003d\u00270 0 30 30\u0027 xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027%3e%3cpath stroke\u003d\u0027rgba(255, 255, 255, 0.6)\u0027 stroke-width\u003d\u00272\u0027 stroke-linecap\u003d\u0027round\u0027 stroke-miterlimit\u003d\u002710\u0027 d\u003d\u0027M4 7h22M4 15h22M4 23h22\u0027/%3e%3c/svg%3e\")}.navbar-dark .navbar-text{color:rgba(255,255,255,0.6)}.navbar-dark .navbar-text a{color:#fff}.navbar-dark .navbar-text a:hover,.navbar-dark .navbar-text a:focus{color:#fff}.card{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,0.125);border-radius:0.25rem}.card\u003ehr{margin-right:0;margin-left:0}.card\u003e.list-group:first-child .list-group-item:first-child{border-top-left-radius:0.25rem;border-top-right-radius:0.25rem}.card\u003e.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:0.25rem;border-bottom-left-radius:0.25rem}.card-body{-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:1.25rem}.card-title{margin-bottom:0.75rem}.card-subtitle{margin-top:-0.375rem;margin-bottom:0}.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card-header{padding:0.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,0.03);border-bottom:1px solid rgba(0,0,0,0.125)}.card-header:first-child{border-radius:calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0}.card-header+.list-group .list-group-item:first-child{border-top:0}.card-footer{padding:0.75rem 1.25rem;background-color:rgba(0,0,0,0.03);border-top:1px solid rgba(0,0,0,0.125)}.card-footer:last-child{border-radius:0 0 calc(0.25rem - 1px) calc(0.25rem - 1px)}.card-header-tabs{margin-right:-0.625rem;margin-bottom:-0.75rem;margin-left:-0.625rem;border-bottom:0}.card-header-pills{margin-right:-0.625rem;margin-left:-0.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem}.card-img{width:100%;border-radius:calc(0.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(0.25rem - 1px);border-bottom-left-radius:calc(0.25rem - 1px)}.card-deck{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.card-deck .card{margin-bottom:15px}@media (min-width: 576px){.card-deck{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.card-group\u003e.card{margin-bottom:15px}@media (min-width: 576px){.card-group{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row wrap;flex-flow:row wrap}.card-group\u003e.card{-webkit-box-flex:1;-ms-flex:1 0 0%;flex:1 0 0%;margin-bottom:0}.card-group\u003e.card+.card{margin-left:0;border-left:0}.card-group\u003e.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group\u003e.card:not(:last-child) .card-img-top,.card-group\u003e.card:not(:last-child) .card-header{border-top-right-radius:0}.card-group\u003e.card:not(:last-child) .card-img-bottom,.card-group\u003e.card:not(:last-child) .card-footer{border-bottom-right-radius:0}.card-group\u003e.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group\u003e.card:not(:first-child) .card-img-top,.card-group\u003e.card:not(:first-child) .card-header{border-top-left-radius:0}.card-group\u003e.card:not(:first-child) .card-img-bottom,.card-group\u003e.card:not(:first-child) .card-footer{border-bottom-left-radius:0}}.card-columns .card{margin-bottom:0.75rem}@media (min-width: 576px){.card-columns{-webkit-column-count:3;column-count:3;-webkit-column-gap:1.25rem;column-gap:1.25rem;orphans:1;widows:1}.card-columns .card{display:inline-block;width:100%}}.accordion\u003e.card{overflow:hidden}.accordion\u003e.card:not(:first-of-type) .card-header:first-child{border-radius:0}.accordion\u003e.card:not(:first-of-type):not(:last-of-type){border-bottom:0;border-radius:0}.accordion\u003e.card:first-of-type{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.accordion\u003e.card:last-of-type{border-top-left-radius:0;border-top-right-radius:0}.accordion\u003e.card .card-header{margin-bottom:-1px}.breadcrumb{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:0.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:0.25rem}.breadcrumb-item+.breadcrumb-item{padding-left:0.5rem}.breadcrumb-item+.breadcrumb-item::before{display:inline-block;padding-right:0.5rem;color:#868e96;content:\"/\"}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:underline}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:none}.breadcrumb-item.active{color:#868e96}.pagination{display:-webkit-box;display:-ms-flexbox;display:flex;padding-left:0;list-style:none;border-radius:0.25rem}.page-link{position:relative;display:block;padding:0.5rem 0.75rem;margin-left:-1px;line-height:1.25;color:#4582EC;background-color:#fff;border:1px solid #ddd}.page-link:hover{z-index:2;color:#1559cf;text-decoration:none;background-color:#e9ecef;border-color:#ddd}.page-link:focus{z-index:2;outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.25)}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem}.page-item:last-child .page-link{border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem}.page-item.active .page-link{z-index:1;color:#fff;background-color:#4582EC;border-color:#4582EC}.page-item.disabled .page-link{color:#868e96;pointer-events:none;cursor:auto;background-color:#fff;border-color:#ddd}.pagination-lg .page-link{padding:0.75rem 1.5rem;font-size:1.32875rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:0.3rem;border-bottom-left-radius:0.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:0.3rem;border-bottom-right-radius:0.3rem}.pagination-sm .page-link{padding:0.25rem 0.5rem;font-size:0.930125rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:0.2rem;border-bottom-left-radius:0.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:0.2rem;border-bottom-right-radius:0.2rem}.badge{display:inline-block;padding:0.6em 1.2em;font-size:75%;font-weight:normal;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0.25rem;-webkit-transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.badge{-webkit-transition:none;transition:none}}a.badge:hover,a.badge:focus{text-decoration:none}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:0.6em;padding-left:0.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#4582EC}a.badge-primary:hover,a.badge-primary:focus{color:#fff;background-color:#1863e6}a.badge-primary:focus,a.badge-primary.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(69,130,236,0.5);box-shadow:0 0 0 0.2rem rgba(69,130,236,0.5)}.badge-secondary{color:#fff;background-color:#adb5bd}a.badge-secondary:hover,a.badge-secondary:focus{color:#fff;background-color:#919ca6}a.badge-secondary:focus,a.badge-secondary.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5);box-shadow:0 0 0 0.2rem rgba(173,181,189,0.5)}.badge-success{color:#fff;background-color:#02B875}a.badge-success:hover,a.badge-success:focus{color:#fff;background-color:#018655}a.badge-success:focus,a.badge-success.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(2,184,117,0.5);box-shadow:0 0 0 0.2rem rgba(2,184,117,0.5)}.badge-info{color:#fff;background-color:#17a2b8}a.badge-info:hover,a.badge-info:focus{color:#fff;background-color:#117a8b}a.badge-info:focus,a.badge-info.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(23,162,184,0.5);box-shadow:0 0 0 0.2rem rgba(23,162,184,0.5)}.badge-warning{color:#fff;background-color:#f0ad4e}a.badge-warning:hover,a.badge-warning:focus{color:#fff;background-color:#ec971f}a.badge-warning:focus,a.badge-warning.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(240,173,78,0.5);box-shadow:0 0 0 0.2rem rgba(240,173,78,0.5)}.badge-danger{color:#fff;background-color:#d9534f}a.badge-danger:hover,a.badge-danger:focus{color:#fff;background-color:#c9302c}a.badge-danger:focus,a.badge-danger.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(217,83,79,0.5);box-shadow:0 0 0 0.2rem rgba(217,83,79,0.5)}.badge-light{color:#212529;background-color:#f8f9fa}a.badge-light:hover,a.badge-light:focus{color:#212529;background-color:#dae0e5}a.badge-light:focus,a.badge-light.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(248,249,250,0.5);box-shadow:0 0 0 0.2rem rgba(248,249,250,0.5)}.badge-dark{color:#fff;background-color:#343a40}a.badge-dark:hover,a.badge-dark:focus{color:#fff;background-color:#1d2124}a.badge-dark:focus,a.badge-dark.focus{outline:0;-webkit-box-shadow:0 0 0 0.2rem rgba(52,58,64,0.5);box-shadow:0 0 0 0.2rem rgba(52,58,64,0.5)}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#e9ecef;border-radius:0.3rem}@media (min-width: 576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:0.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:0.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:4.0945rem}.alert-dismissible .close{position:absolute;top:0;right:0;padding:0.75rem 1.25rem;color:inherit}.alert-primary{color:#24447b;background-color:#dae6fb;border-color:#cbdcfa}.alert-primary hr{border-top-color:#b4ccf8}.alert-primary .alert-link{color:#182e54}.alert-secondary{color:#5a5e62;background-color:#eff0f2;border-color:#e8eaed}.alert-secondary hr{border-top-color:#dadde2}.alert-secondary .alert-link{color:#424547}.alert-success{color:#01603d;background-color:#ccf1e3;border-color:#b8ebd8}.alert-success hr{border-top-color:#a4e5cd}.alert-success .alert-link{color:#002e1d}.alert-info{color:#0c5460;background-color:#d1ecf1;border-color:#bee5eb}.alert-info hr{border-top-color:#abdde5}.alert-info .alert-link{color:#062c33}.alert-warning{color:#7d5a29;background-color:#fcefdc;border-color:#fbe8cd}.alert-warning hr{border-top-color:#f9ddb5}.alert-warning .alert-link{color:#573e1c}.alert-danger{color:#712b29;background-color:#f7dddc;border-color:#f4cfce}.alert-danger hr{border-top-color:#efbbb9}.alert-danger .alert-link{color:#4c1d1b}.alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}.alert-light hr{border-top-color:#ececf6}.alert-light .alert-link{color:#686868}.alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}.alert-dark hr{border-top-color:#b9bbbe}.alert-dark .alert-link{color:#040505}@-webkit-keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}.progress{display:-webkit-box;display:-ms-flexbox;display:flex;height:1rem;overflow:hidden;font-size:0.79725rem;background-color:#e9ecef;border-radius:0.25rem}.progress-bar{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;color:#fff;text-align:center;white-space:nowrap;background-color:#4582EC;-webkit-transition:width 0.6s ease;transition:width 0.6s ease}@media (prefers-reduced-motion: reduce){.progress-bar{-webkit-transition:none;transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-size:1rem 1rem}.progress-bar-animated{-webkit-animation:progress-bar-stripes 1s linear infinite;animation:progress-bar-stripes 1s linear infinite}@media (prefers-reduced-motion: reduce){.progress-bar-animated{-webkit-animation:none;animation:none}}.media{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.media-body{-webkit-box-flex:1;-ms-flex:1;flex:1}.list-group{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:hover,.list-group-item-action:focus{z-index:1;color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#343a40;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:0.75rem 1.25rem;margin-bottom:-1px;background-color:#fff;border:1px solid rgba(0,0,0,0.125)}.list-group-item:first-child{border-top-left-radius:0.25rem;border-top-right-radius:0.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:0.25rem;border-bottom-left-radius:0.25rem}.list-group-item.disabled,.list-group-item:disabled{color:#868e96;pointer-events:none;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#4582EC;border-color:#4582EC}.list-group-horizontal{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.list-group-horizontal .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal .list-group-item:first-child{border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem;border-top-right-radius:0}.list-group-horizontal .list-group-item:last-child{margin-right:0;border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem;border-bottom-left-radius:0}@media (min-width: 576px){.list-group-horizontal-sm{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-sm .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-sm .list-group-item:first-child{border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem;border-top-right-radius:0}.list-group-horizontal-sm .list-group-item:last-child{margin-right:0;border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem;border-bottom-left-radius:0}}@media (min-width: 768px){.list-group-horizontal-md{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-md .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-md .list-group-item:first-child{border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem;border-top-right-radius:0}.list-group-horizontal-md .list-group-item:last-child{margin-right:0;border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem;border-bottom-left-radius:0}}@media (min-width: 992px){.list-group-horizontal-lg{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-lg .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-lg .list-group-item:first-child{border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem;border-top-right-radius:0}.list-group-horizontal-lg .list-group-item:last-child{margin-right:0;border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem;border-bottom-left-radius:0}}@media (min-width: 1200px){.list-group-horizontal-xl{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-xl .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-xl .list-group-item:first-child{border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem;border-top-right-radius:0}.list-group-horizontal-xl .list-group-item:last-child{margin-right:0;border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem;border-bottom-left-radius:0}}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush .list-group-item:last-child{margin-bottom:-1px}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{margin-bottom:0;border-bottom:0}.list-group-item-primary{color:#24447b;background-color:#cbdcfa}.list-group-item-primary.list-group-item-action:hover,.list-group-item-primary.list-group-item-action:focus{color:#24447b;background-color:#b4ccf8}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#24447b;border-color:#24447b}.list-group-item-secondary{color:#5a5e62;background-color:#e8eaed}.list-group-item-secondary.list-group-item-action:hover,.list-group-item-secondary.list-group-item-action:focus{color:#5a5e62;background-color:#dadde2}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#5a5e62;border-color:#5a5e62}.list-group-item-success{color:#01603d;background-color:#b8ebd8}.list-group-item-success.list-group-item-action:hover,.list-group-item-success.list-group-item-action:focus{color:#01603d;background-color:#a4e5cd}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#01603d;border-color:#01603d}.list-group-item-info{color:#0c5460;background-color:#bee5eb}.list-group-item-info.list-group-item-action:hover,.list-group-item-info.list-group-item-action:focus{color:#0c5460;background-color:#abdde5}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#0c5460;border-color:#0c5460}.list-group-item-warning{color:#7d5a29;background-color:#fbe8cd}.list-group-item-warning.list-group-item-action:hover,.list-group-item-warning.list-group-item-action:focus{color:#7d5a29;background-color:#f9ddb5}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#7d5a29;border-color:#7d5a29}.list-group-item-danger{color:#712b29;background-color:#f4cfce}.list-group-item-danger.list-group-item-action:hover,.list-group-item-danger.list-group-item-action:focus{color:#712b29;background-color:#efbbb9}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#712b29;border-color:#712b29}.list-group-item-light{color:#818182;background-color:#fdfdfe}.list-group-item-light.list-group-item-action:hover,.list-group-item-light.list-group-item-action:focus{color:#818182;background-color:#ececf6}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#818182;border-color:#818182}.list-group-item-dark{color:#1b1e21;background-color:#c6c8ca}.list-group-item-dark.list-group-item-action:hover,.list-group-item-dark.list-group-item-action:focus{color:#1b1e21;background-color:#b9bbbe}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#1b1e21;border-color:#1b1e21}.close{float:right;font-size:1.5945rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:hover{color:#000;text-decoration:none}.close:not(:disabled):not(.disabled):hover,.close:not(:disabled):not(.disabled):focus{opacity:.75}button.close{padding:0;background-color:transparent;border:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}a.close.disabled{pointer-events:none}.toast{max-width:350px;overflow:hidden;font-size:0.875rem;background-color:rgba(255,255,255,0.85);background-clip:padding-box;border:1px solid rgba(0,0,0,0.1);-webkit-box-shadow:0 0.25rem 0.75rem rgba(0,0,0,0.1);box-shadow:0 0.25rem 0.75rem rgba(0,0,0,0.1);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);opacity:0;border-radius:0.25rem}.toast:not(:last-child){margin-bottom:0.75rem}.toast.showing{opacity:1}.toast.show{display:block;opacity:1}.toast.hide{display:none}.toast-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0.25rem 0.75rem;color:#868e96;background-color:rgba(255,255,255,0.85);background-clip:padding-box;border-bottom:1px solid rgba(0,0,0,0.05)}.toast-body{padding:0.75rem}.modal-open{overflow:hidden}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal{position:fixed;top:0;left:0;z-index:1050;display:none;width:100%;height:100%;overflow:hidden;outline:0}.modal-dialog{position:relative;width:auto;margin:0.5rem;pointer-events:none}.modal.fade .modal-dialog{-webkit-transition:-webkit-transform 0.3s ease-out;transition:-webkit-transform 0.3s ease-out;transition:transform 0.3s ease-out;transition:transform 0.3s ease-out, -webkit-transform 0.3s ease-out;-webkit-transform:translate(0, -50px);transform:translate(0, -50px)}@media (prefers-reduced-motion: reduce){.modal.fade .modal-dialog{-webkit-transition:none;transition:none}}.modal.show .modal-dialog{-webkit-transform:none;transform:none}.modal-dialog-scrollable{display:-webkit-box;display:-ms-flexbox;display:flex;max-height:calc(100% - 1rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 1rem);overflow:hidden}.modal-dialog-scrollable .modal-header,.modal-dialog-scrollable .modal-footer{-ms-flex-negative:0;flex-shrink:0}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;min-height:calc(100% - 1rem)}.modal-dialog-centered::before{display:block;height:calc(100vh - 1rem);content:\"\"}.modal-dialog-centered.modal-dialog-scrollable{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;height:100%}.modal-dialog-centered.modal-dialog-scrollable .modal-content{max-height:none}.modal-dialog-centered.modal-dialog-scrollable::before{content:none}.modal-content{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,0.2);border-radius:0.3rem;outline:0}.modal-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:0.5}.modal-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:1rem 1rem;border-bottom:1px solid #ddd;border-top-left-radius:0.3rem;border-top-right-radius:0.3rem}.modal-header .close{padding:1rem 1rem;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto;padding:1rem}.modal-footer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:1rem;border-top:1px solid #ddd;border-bottom-right-radius:0.3rem;border-bottom-left-radius:0.3rem}.modal-footer\u003e:not(:first-child){margin-left:.25rem}.modal-footer\u003e:not(:last-child){margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width: 576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-scrollable{max-height:calc(100% - 3.5rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 3.5rem)}.modal-dialog-centered{min-height:calc(100% - 3.5rem)}.modal-dialog-centered::before{height:calc(100vh - 3.5rem)}.modal-sm{max-width:300px}}@media (min-width: 992px){.modal-lg,.modal-xl{max-width:800px}}@media (min-width: 1200px){.modal-xl{max-width:1140px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:0.930125rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:0.9}.tooltip .arrow{position:absolute;display:block;width:0.8rem;height:0.4rem}.tooltip .arrow::before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-top,.bs-tooltip-auto[x-placement^\u003d\"top\"]{padding:0.4rem 0}.bs-tooltip-top .arrow,.bs-tooltip-auto[x-placement^\u003d\"top\"] .arrow{bottom:0}.bs-tooltip-top .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"top\"] .arrow::before{top:0;border-width:0.4rem 0.4rem 0;border-top-color:#000}.bs-tooltip-right,.bs-tooltip-auto[x-placement^\u003d\"right\"]{padding:0 0.4rem}.bs-tooltip-right .arrow,.bs-tooltip-auto[x-placement^\u003d\"right\"] .arrow{left:0;width:0.4rem;height:0.8rem}.bs-tooltip-right .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"right\"] .arrow::before{right:0;border-width:0.4rem 0.4rem 0.4rem 0;border-right-color:#000}.bs-tooltip-bottom,.bs-tooltip-auto[x-placement^\u003d\"bottom\"]{padding:0.4rem 0}.bs-tooltip-bottom .arrow,.bs-tooltip-auto[x-placement^\u003d\"bottom\"] .arrow{top:0}.bs-tooltip-bottom .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"bottom\"] .arrow::before{bottom:0;border-width:0 0.4rem 0.4rem;border-bottom-color:#000}.bs-tooltip-left,.bs-tooltip-auto[x-placement^\u003d\"left\"]{padding:0 0.4rem}.bs-tooltip-left .arrow,.bs-tooltip-auto[x-placement^\u003d\"left\"] .arrow{right:0;width:0.4rem;height:0.8rem}.bs-tooltip-left .arrow::before,.bs-tooltip-auto[x-placement^\u003d\"left\"] .arrow::before{left:0;border-width:0.4rem 0 0.4rem 0.4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:0.25rem 0.5rem;color:#fff;text-align:center;background-color:#000;border-radius:0.25rem}.popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:0.930125rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,0.2);border-radius:0.3rem}.popover .arrow{position:absolute;display:block;width:1rem;height:0.5rem;margin:0 0.3rem}.popover .arrow::before,.popover .arrow::after{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid}.bs-popover-top,.bs-popover-auto[x-placement^\u003d\"top\"]{margin-bottom:0.5rem}.bs-popover-top\u003e.arrow,.bs-popover-auto[x-placement^\u003d\"top\"]\u003e.arrow{bottom:calc((0.5rem + 1px) * -1)}.bs-popover-top\u003e.arrow::before,.bs-popover-auto[x-placement^\u003d\"top\"]\u003e.arrow::before{bottom:0;border-width:0.5rem 0.5rem 0;border-top-color:rgba(0,0,0,0.25)}.bs-popover-top\u003e.arrow::after,.bs-popover-auto[x-placement^\u003d\"top\"]\u003e.arrow::after{bottom:1px;border-width:0.5rem 0.5rem 0;border-top-color:#fff}.bs-popover-right,.bs-popover-auto[x-placement^\u003d\"right\"]{margin-left:0.5rem}.bs-popover-right\u003e.arrow,.bs-popover-auto[x-placement^\u003d\"right\"]\u003e.arrow{left:calc((0.5rem + 1px) * -1);width:0.5rem;height:1rem;margin:0.3rem 0}.bs-popover-right\u003e.arrow::before,.bs-popover-auto[x-placement^\u003d\"right\"]\u003e.arrow::before{left:0;border-width:0.5rem 0.5rem 0.5rem 0;border-right-color:rgba(0,0,0,0.25)}.bs-popover-right\u003e.arrow::after,.bs-popover-auto[x-placement^\u003d\"right\"]\u003e.arrow::after{left:1px;border-width:0.5rem 0.5rem 0.5rem 0;border-right-color:#fff}.bs-popover-bottom,.bs-popover-auto[x-placement^\u003d\"bottom\"]{margin-top:0.5rem}.bs-popover-bottom\u003e.arrow,.bs-popover-auto[x-placement^\u003d\"bottom\"]\u003e.arrow{top:calc((0.5rem + 1px) * -1)}.bs-popover-bottom\u003e.arrow::before,.bs-popover-auto[x-placement^\u003d\"bottom\"]\u003e.arrow::before{top:0;border-width:0 0.5rem 0.5rem 0.5rem;border-bottom-color:rgba(0,0,0,0.25)}.bs-popover-bottom\u003e.arrow::after,.bs-popover-auto[x-placement^\u003d\"bottom\"]\u003e.arrow::after{top:1px;border-width:0 0.5rem 0.5rem 0.5rem;border-bottom-color:#fff}.bs-popover-bottom .popover-header::before,.bs-popover-auto[x-placement^\u003d\"bottom\"] .popover-header::before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-0.5rem;content:\"\";border-bottom:1px solid #f7f7f7}.bs-popover-left,.bs-popover-auto[x-placement^\u003d\"left\"]{margin-right:0.5rem}.bs-popover-left\u003e.arrow,.bs-popover-auto[x-placement^\u003d\"left\"]\u003e.arrow{right:calc((0.5rem + 1px) * -1);width:0.5rem;height:1rem;margin:0.3rem 0}.bs-popover-left\u003e.arrow::before,.bs-popover-auto[x-placement^\u003d\"left\"]\u003e.arrow::before{right:0;border-width:0.5rem 0 0.5rem 0.5rem;border-left-color:rgba(0,0,0,0.25)}.bs-popover-left\u003e.arrow::after,.bs-popover-auto[x-placement^\u003d\"left\"]\u003e.arrow::after{right:1px;border-width:0.5rem 0 0.5rem 0.5rem;border-left-color:#fff}.popover-header{padding:0.5rem 0.75rem;margin-bottom:0;font-size:1.063rem;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(0.3rem - 1px);border-top-right-radius:calc(0.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:0.5rem 0.75rem;color:#343a40}.carousel{position:relative}.carousel.pointer-event{-ms-touch-action:pan-y;touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner::after{display:block;clear:both;content:\"\"}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transition:-webkit-transform 0.6s ease-in-out;transition:-webkit-transform 0.6s ease-in-out;transition:transform 0.6s ease-in-out;transition:transform 0.6s ease-in-out, -webkit-transform 0.6s ease-in-out}@media (prefers-reduced-motion: reduce){.carousel-item{-webkit-transition:none;transition:none}}.carousel-item.active,.carousel-item-next,.carousel-item-prev{display:block}.carousel-item-next:not(.carousel-item-left),.active.carousel-item-right{-webkit-transform:translateX(100%);transform:translateX(100%)}.carousel-item-prev:not(.carousel-item-right),.active.carousel-item-left{-webkit-transform:translateX(-100%);transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;-webkit-transition-property:opacity;transition-property:opacity;-webkit-transform:none;transform:none}.carousel-fade .carousel-item.active,.carousel-fade .carousel-item-next.carousel-item-left,.carousel-fade .carousel-item-prev.carousel-item-right{z-index:1;opacity:1}.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{z-index:0;opacity:0;-webkit-transition:0s 0.6s opacity;transition:0s 0.6s opacity}@media (prefers-reduced-motion: reduce){.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{-webkit-transition:none;transition:none}}.carousel-control-prev,.carousel-control-next{position:absolute;top:0;bottom:0;z-index:1;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:0.5;-webkit-transition:opacity 0.15s ease;transition:opacity 0.15s ease}@media (prefers-reduced-motion: reduce){.carousel-control-prev,.carousel-control-next{-webkit-transition:none;transition:none}}.carousel-control-prev:hover,.carousel-control-prev:focus,.carousel-control-next:hover,.carousel-control-next:focus{color:#fff;text-decoration:none;outline:0;opacity:0.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-prev-icon,.carousel-control-next-icon{display:inline-block;width:20px;height:20px;background:no-repeat 50% / 100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 fill\u003d\u0027%23fff\u0027 viewBox\u003d\u00270 0 8 8\u0027%3e%3cpath d\u003d\u0027M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z\u0027/%3e%3c/svg%3e\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns\u003d\u0027http://www.w3.org/2000/svg\u0027 fill\u003d\u0027%23fff\u0027 viewBox\u003d\u00270 0 8 8\u0027%3e%3cpath d\u003d\u0027M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z\u0027/%3e%3c/svg%3e\")}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:15;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{-webkit-box-sizing:content-box;box-sizing:content-box;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;-webkit-transition:opacity 0.6s ease;transition:opacity 0.6s ease}@media (prefers-reduced-motion: reduce){.carousel-indicators li{-webkit-transition:none;transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}@-webkit-keyframes spinner-border{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-border{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.spinner-border{display:inline-block;width:2rem;height:2rem;vertical-align:text-bottom;border:0.25em solid currentColor;border-right-color:transparent;border-radius:50%;-webkit-animation:spinner-border .75s linear infinite;animation:spinner-border .75s linear infinite}.spinner-border-sm{width:1rem;height:1rem;border-width:0.2em}@-webkit-keyframes spinner-grow{0%{-webkit-transform:scale(0);transform:scale(0)}50%{opacity:1}}@keyframes spinner-grow{0%{-webkit-transform:scale(0);transform:scale(0)}50%{opacity:1}}.spinner-grow{display:inline-block;width:2rem;height:2rem;vertical-align:text-bottom;background-color:currentColor;border-radius:50%;opacity:0;-webkit-animation:spinner-grow .75s linear infinite;animation:spinner-grow .75s linear infinite}.spinner-grow-sm{width:1rem;height:1rem}.align-baseline{vertical-align:baseline !important}.align-top{vertical-align:top !important}.align-middle{vertical-align:middle !important}.align-bottom{vertical-align:bottom !important}.align-text-bottom{vertical-align:text-bottom !important}.align-text-top{vertical-align:text-top !important}.bg-primary{background-color:#4582EC !important}a.bg-primary:hover,a.bg-primary:focus,button.bg-primary:hover,button.bg-primary:focus{background-color:#1863e6 !important}.bg-secondary{background-color:#adb5bd !important}a.bg-secondary:hover,a.bg-secondary:focus,button.bg-secondary:hover,button.bg-secondary:focus{background-color:#919ca6 !important}.bg-success{background-color:#02B875 !important}a.bg-success:hover,a.bg-success:focus,button.bg-success:hover,button.bg-success:focus{background-color:#018655 !important}.bg-info{background-color:#17a2b8 !important}a.bg-info:hover,a.bg-info:focus,button.bg-info:hover,button.bg-info:focus{background-color:#117a8b !important}.bg-warning{background-color:#f0ad4e !important}a.bg-warning:hover,a.bg-warning:focus,button.bg-warning:hover,button.bg-warning:focus{background-color:#ec971f !important}.bg-danger{background-color:#d9534f !important}a.bg-danger:hover,a.bg-danger:focus,button.bg-danger:hover,button.bg-danger:focus{background-color:#c9302c !important}.bg-light{background-color:#f8f9fa !important}a.bg-light:hover,a.bg-light:focus,button.bg-light:hover,button.bg-light:focus{background-color:#dae0e5 !important}.bg-dark{background-color:#343a40 !important}a.bg-dark:hover,a.bg-dark:focus,button.bg-dark:hover,button.bg-dark:focus{background-color:#1d2124 !important}.bg-white{background-color:#fff !important}.bg-transparent{background-color:transparent !important}.border{border:1px solid #ddd !important}.border-top{border-top:1px solid #ddd !important}.border-right{border-right:1px solid #ddd !important}.border-bottom{border-bottom:1px solid #ddd !important}.border-left{border-left:1px solid #ddd !important}.border-0{border:0 !important}.border-top-0{border-top:0 !important}.border-right-0{border-right:0 !important}.border-bottom-0{border-bottom:0 !important}.border-left-0{border-left:0 !important}.border-primary{border-color:#4582EC !important}.border-secondary{border-color:#adb5bd !important}.border-success{border-color:#02B875 !important}.border-info{border-color:#17a2b8 !important}.border-warning{border-color:#f0ad4e !important}.border-danger{border-color:#d9534f !important}.border-light{border-color:#f8f9fa !important}.border-dark{border-color:#343a40 !important}.border-white{border-color:#fff !important}.rounded-sm{border-radius:0.2rem !important}.rounded{border-radius:0.25rem !important}.rounded-top{border-top-left-radius:0.25rem !important;border-top-right-radius:0.25rem !important}.rounded-right{border-top-right-radius:0.25rem !important;border-bottom-right-radius:0.25rem !important}.rounded-bottom{border-bottom-right-radius:0.25rem !important;border-bottom-left-radius:0.25rem !important}.rounded-left{border-top-left-radius:0.25rem !important;border-bottom-left-radius:0.25rem !important}.rounded-lg{border-radius:0.3rem !important}.rounded-circle{border-radius:50% !important}.rounded-pill{border-radius:50rem !important}.rounded-0{border-radius:0 !important}.clearfix::after{display:block;clear:both;content:\"\"}.d-none{display:none !important}.d-inline{display:inline !important}.d-inline-block{display:inline-block !important}.d-block{display:block !important}.d-table{display:table !important}.d-table-row{display:table-row !important}.d-table-cell{display:table-cell !important}.d-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}@media (min-width: 576px){.d-sm-none{display:none !important}.d-sm-inline{display:inline !important}.d-sm-inline-block{display:inline-block !important}.d-sm-block{display:block !important}.d-sm-table{display:table !important}.d-sm-table-row{display:table-row !important}.d-sm-table-cell{display:table-cell !important}.d-sm-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-sm-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media (min-width: 768px){.d-md-none{display:none !important}.d-md-inline{display:inline !important}.d-md-inline-block{display:inline-block !important}.d-md-block{display:block !important}.d-md-table{display:table !important}.d-md-table-row{display:table-row !important}.d-md-table-cell{display:table-cell !important}.d-md-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-md-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media (min-width: 992px){.d-lg-none{display:none !important}.d-lg-inline{display:inline !important}.d-lg-inline-block{display:inline-block !important}.d-lg-block{display:block !important}.d-lg-table{display:table !important}.d-lg-table-row{display:table-row !important}.d-lg-table-cell{display:table-cell !important}.d-lg-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-lg-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media (min-width: 1200px){.d-xl-none{display:none !important}.d-xl-inline{display:inline !important}.d-xl-inline-block{display:inline-block !important}.d-xl-block{display:block !important}.d-xl-table{display:table !important}.d-xl-table-row{display:table-row !important}.d-xl-table-cell{display:table-cell !important}.d-xl-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-xl-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}@media print{.d-print-none{display:none !important}.d-print-inline{display:inline !important}.d-print-inline-block{display:inline-block !important}.d-print-block{display:block !important}.d-print-table{display:table !important}.d-print-table-row{display:table-row !important}.d-print-table-cell{display:table-cell !important}.d-print-flex{display:-webkit-box !important;display:-ms-flexbox !important;display:flex !important}.d-print-inline-flex{display:-webkit-inline-box !important;display:-ms-inline-flexbox !important;display:inline-flex !important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive::before{display:block;content:\"\"}.embed-responsive .embed-responsive-item,.embed-responsive iframe,.embed-responsive embed,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9::before{padding-top:42.8571428571%}.embed-responsive-16by9::before{padding-top:56.25%}.embed-responsive-4by3::before{padding-top:75%}.embed-responsive-1by1::before{padding-top:100%}.flex-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}@media (min-width: 576px){.flex-sm-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-sm-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-sm-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-sm-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-sm-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-sm-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-sm-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-sm-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-sm-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-sm-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-sm-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-sm-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-sm-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-sm-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-sm-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-sm-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-sm-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-sm-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-sm-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-sm-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-sm-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-sm-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-sm-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-sm-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-sm-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-sm-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-sm-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-sm-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-sm-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-sm-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-sm-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-sm-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-sm-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-sm-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}@media (min-width: 768px){.flex-md-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-md-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-md-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-md-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-md-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-md-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-md-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-md-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-md-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-md-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-md-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-md-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-md-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-md-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-md-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-md-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-md-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-md-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-md-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-md-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-md-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-md-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-md-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-md-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-md-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-md-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-md-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-md-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-md-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-md-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-md-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-md-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-md-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-md-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}@media (min-width: 992px){.flex-lg-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-lg-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-lg-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-lg-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-lg-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-lg-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-lg-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-lg-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-lg-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-lg-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-lg-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-lg-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-lg-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-lg-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-lg-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-lg-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-lg-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-lg-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-lg-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-lg-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-lg-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-lg-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-lg-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-lg-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-lg-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-lg-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-lg-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-lg-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-lg-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-lg-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-lg-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-lg-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-lg-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-lg-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}@media (min-width: 1200px){.flex-xl-row{-webkit-box-orient:horizontal !important;-webkit-box-direction:normal !important;-ms-flex-direction:row !important;flex-direction:row !important}.flex-xl-column{-webkit-box-orient:vertical !important;-webkit-box-direction:normal !important;-ms-flex-direction:column !important;flex-direction:column !important}.flex-xl-row-reverse{-webkit-box-orient:horizontal !important;-webkit-box-direction:reverse !important;-ms-flex-direction:row-reverse !important;flex-direction:row-reverse !important}.flex-xl-column-reverse{-webkit-box-orient:vertical !important;-webkit-box-direction:reverse !important;-ms-flex-direction:column-reverse !important;flex-direction:column-reverse !important}.flex-xl-wrap{-ms-flex-wrap:wrap !important;flex-wrap:wrap !important}.flex-xl-nowrap{-ms-flex-wrap:nowrap !important;flex-wrap:nowrap !important}.flex-xl-wrap-reverse{-ms-flex-wrap:wrap-reverse !important;flex-wrap:wrap-reverse !important}.flex-xl-fill{-webkit-box-flex:1 !important;-ms-flex:1 1 auto !important;flex:1 1 auto !important}.flex-xl-grow-0{-webkit-box-flex:0 !important;-ms-flex-positive:0 !important;flex-grow:0 !important}.flex-xl-grow-1{-webkit-box-flex:1 !important;-ms-flex-positive:1 !important;flex-grow:1 !important}.flex-xl-shrink-0{-ms-flex-negative:0 !important;flex-shrink:0 !important}.flex-xl-shrink-1{-ms-flex-negative:1 !important;flex-shrink:1 !important}.justify-content-xl-start{-webkit-box-pack:start !important;-ms-flex-pack:start !important;justify-content:flex-start !important}.justify-content-xl-end{-webkit-box-pack:end !important;-ms-flex-pack:end !important;justify-content:flex-end !important}.justify-content-xl-center{-webkit-box-pack:center !important;-ms-flex-pack:center !important;justify-content:center !important}.justify-content-xl-between{-webkit-box-pack:justify !important;-ms-flex-pack:justify !important;justify-content:space-between !important}.justify-content-xl-around{-ms-flex-pack:distribute !important;justify-content:space-around !important}.align-items-xl-start{-webkit-box-align:start !important;-ms-flex-align:start !important;align-items:flex-start !important}.align-items-xl-end{-webkit-box-align:end !important;-ms-flex-align:end !important;align-items:flex-end !important}.align-items-xl-center{-webkit-box-align:center !important;-ms-flex-align:center !important;align-items:center !important}.align-items-xl-baseline{-webkit-box-align:baseline !important;-ms-flex-align:baseline !important;align-items:baseline !important}.align-items-xl-stretch{-webkit-box-align:stretch !important;-ms-flex-align:stretch !important;align-items:stretch !important}.align-content-xl-start{-ms-flex-line-pack:start !important;align-content:flex-start !important}.align-content-xl-end{-ms-flex-line-pack:end !important;align-content:flex-end !important}.align-content-xl-center{-ms-flex-line-pack:center !important;align-content:center !important}.align-content-xl-between{-ms-flex-line-pack:justify !important;align-content:space-between !important}.align-content-xl-around{-ms-flex-line-pack:distribute !important;align-content:space-around !important}.align-content-xl-stretch{-ms-flex-line-pack:stretch !important;align-content:stretch !important}.align-self-xl-auto{-ms-flex-item-align:auto !important;align-self:auto !important}.align-self-xl-start{-ms-flex-item-align:start !important;align-self:flex-start !important}.align-self-xl-end{-ms-flex-item-align:end !important;align-self:flex-end !important}.align-self-xl-center{-ms-flex-item-align:center !important;align-self:center !important}.align-self-xl-baseline{-ms-flex-item-align:baseline !important;align-self:baseline !important}.align-self-xl-stretch{-ms-flex-item-align:stretch !important;align-self:stretch !important}}.float-left{float:left !important}.float-right{float:right !important}.float-none{float:none !important}@media (min-width: 576px){.float-sm-left{float:left !important}.float-sm-right{float:right !important}.float-sm-none{float:none !important}}@media (min-width: 768px){.float-md-left{float:left !important}.float-md-right{float:right !important}.float-md-none{float:none !important}}@media (min-width: 992px){.float-lg-left{float:left !important}.float-lg-right{float:right !important}.float-lg-none{float:none !important}}@media (min-width: 1200px){.float-xl-left{float:left !important}.float-xl-right{float:right !important}.float-xl-none{float:none !important}}.overflow-auto{overflow:auto !important}.overflow-hidden{overflow:hidden !important}.position-static{position:static !important}.position-relative{position:relative !important}.position-absolute{position:absolute !important}.position-fixed{position:fixed !important}.position-sticky{position:-webkit-sticky !important;position:sticky !important}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}@supports (position: -webkit-sticky) or (position: sticky){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal}.shadow-sm{-webkit-box-shadow:0 0.125rem 0.25rem rgba(0,0,0,0.075) !important;box-shadow:0 0.125rem 0.25rem rgba(0,0,0,0.075) !important}.shadow{-webkit-box-shadow:0 0.5rem 1rem rgba(0,0,0,0.15) !important;box-shadow:0 0.5rem 1rem rgba(0,0,0,0.15) !important}.shadow-lg{-webkit-box-shadow:0 1rem 3rem rgba(0,0,0,0.175) !important;box-shadow:0 1rem 3rem rgba(0,0,0,0.175) !important}.shadow-none{-webkit-box-shadow:none !important;box-shadow:none !important}.w-25{width:25% !important}.w-50{width:50% !important}.w-75{width:75% !important}.w-100{width:100% !important}.w-auto{width:auto !important}.h-25{height:25% !important}.h-50{height:50% !important}.h-75{height:75% !important}.h-100{height:100% !important}.h-auto{height:auto !important}.mw-100{max-width:100% !important}.mh-100{max-height:100% !important}.min-vw-100{min-width:100vw !important}.min-vh-100{min-height:100vh !important}.vw-100{width:100vw !important}.vh-100{height:100vh !important}.stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;pointer-events:auto;content:\"\";background-color:rgba(0,0,0,0)}.m-0{margin:0 !important}.mt-0,.my-0{margin-top:0 !important}.mr-0,.mx-0{margin-right:0 !important}.mb-0,.my-0{margin-bottom:0 !important}.ml-0,.mx-0{margin-left:0 !important}.m-1{margin:0.25rem !important}.mt-1,.my-1{margin-top:0.25rem !important}.mr-1,.mx-1{margin-right:0.25rem !important}.mb-1,.my-1{margin-bottom:0.25rem !important}.ml-1,.mx-1{margin-left:0.25rem !important}.m-2{margin:0.5rem !important}.mt-2,.my-2{margin-top:0.5rem !important}.mr-2,.mx-2{margin-right:0.5rem !important}.mb-2,.my-2{margin-bottom:0.5rem !important}.ml-2,.mx-2{margin-left:0.5rem !important}.m-3{margin:1rem !important}.mt-3,.my-3{margin-top:1rem !important}.mr-3,.mx-3{margin-right:1rem !important}.mb-3,.my-3{margin-bottom:1rem !important}.ml-3,.mx-3{margin-left:1rem !important}.m-4{margin:1.5rem !important}.mt-4,.my-4{margin-top:1.5rem !important}.mr-4,.mx-4{margin-right:1.5rem !important}.mb-4,.my-4{margin-bottom:1.5rem !important}.ml-4,.mx-4{margin-left:1.5rem !important}.m-5{margin:3rem !important}.mt-5,.my-5{margin-top:3rem !important}.mr-5,.mx-5{margin-right:3rem !important}.mb-5,.my-5{margin-bottom:3rem !important}.ml-5,.mx-5{margin-left:3rem !important}.p-0{padding:0 !important}.pt-0,.py-0{padding-top:0 !important}.pr-0,.px-0{padding-right:0 !important}.pb-0,.py-0{padding-bottom:0 !important}.pl-0,.px-0{padding-left:0 !important}.p-1{padding:0.25rem !important}.pt-1,.py-1{padding-top:0.25rem !important}.pr-1,.px-1{padding-right:0.25rem !important}.pb-1,.py-1{padding-bottom:0.25rem !important}.pl-1,.px-1{padding-left:0.25rem !important}.p-2{padding:0.5rem !important}.pt-2,.py-2{padding-top:0.5rem !important}.pr-2,.px-2{padding-right:0.5rem !important}.pb-2,.py-2{padding-bottom:0.5rem !important}.pl-2,.px-2{padding-left:0.5rem !important}.p-3{padding:1rem !important}.pt-3,.py-3{padding-top:1rem !important}.pr-3,.px-3{padding-right:1rem !important}.pb-3,.py-3{padding-bottom:1rem !important}.pl-3,.px-3{padding-left:1rem !important}.p-4{padding:1.5rem !important}.pt-4,.py-4{padding-top:1.5rem !important}.pr-4,.px-4{padding-right:1.5rem !important}.pb-4,.py-4{padding-bottom:1.5rem !important}.pl-4,.px-4{padding-left:1.5rem !important}.p-5{padding:3rem !important}.pt-5,.py-5{padding-top:3rem !important}.pr-5,.px-5{padding-right:3rem !important}.pb-5,.py-5{padding-bottom:3rem !important}.pl-5,.px-5{padding-left:3rem !important}.m-n1{margin:-0.25rem !important}.mt-n1,.my-n1{margin-top:-0.25rem !important}.mr-n1,.mx-n1{margin-right:-0.25rem !important}.mb-n1,.my-n1{margin-bottom:-0.25rem !important}.ml-n1,.mx-n1{margin-left:-0.25rem !important}.m-n2{margin:-0.5rem !important}.mt-n2,.my-n2{margin-top:-0.5rem !important}.mr-n2,.mx-n2{margin-right:-0.5rem !important}.mb-n2,.my-n2{margin-bottom:-0.5rem !important}.ml-n2,.mx-n2{margin-left:-0.5rem !important}.m-n3{margin:-1rem !important}.mt-n3,.my-n3{margin-top:-1rem !important}.mr-n3,.mx-n3{margin-right:-1rem !important}.mb-n3,.my-n3{margin-bottom:-1rem !important}.ml-n3,.mx-n3{margin-left:-1rem !important}.m-n4{margin:-1.5rem !important}.mt-n4,.my-n4{margin-top:-1.5rem !important}.mr-n4,.mx-n4{margin-right:-1.5rem !important}.mb-n4,.my-n4{margin-bottom:-1.5rem !important}.ml-n4,.mx-n4{margin-left:-1.5rem !important}.m-n5{margin:-3rem !important}.mt-n5,.my-n5{margin-top:-3rem !important}.mr-n5,.mx-n5{margin-right:-3rem !important}.mb-n5,.my-n5{margin-bottom:-3rem !important}.ml-n5,.mx-n5{margin-left:-3rem !important}.m-auto{margin:auto !important}.mt-auto,.my-auto{margin-top:auto !important}.mr-auto,.mx-auto{margin-right:auto !important}.mb-auto,.my-auto{margin-bottom:auto !important}.ml-auto,.mx-auto{margin-left:auto !important}@media (min-width: 576px){.m-sm-0{margin:0 !important}.mt-sm-0,.my-sm-0{margin-top:0 !important}.mr-sm-0,.mx-sm-0{margin-right:0 !important}.mb-sm-0,.my-sm-0{margin-bottom:0 !important}.ml-sm-0,.mx-sm-0{margin-left:0 !important}.m-sm-1{margin:0.25rem !important}.mt-sm-1,.my-sm-1{margin-top:0.25rem !important}.mr-sm-1,.mx-sm-1{margin-right:0.25rem !important}.mb-sm-1,.my-sm-1{margin-bottom:0.25rem !important}.ml-sm-1,.mx-sm-1{margin-left:0.25rem !important}.m-sm-2{margin:0.5rem !important}.mt-sm-2,.my-sm-2{margin-top:0.5rem !important}.mr-sm-2,.mx-sm-2{margin-right:0.5rem !important}.mb-sm-2,.my-sm-2{margin-bottom:0.5rem !important}.ml-sm-2,.mx-sm-2{margin-left:0.5rem !important}.m-sm-3{margin:1rem !important}.mt-sm-3,.my-sm-3{margin-top:1rem !important}.mr-sm-3,.mx-sm-3{margin-right:1rem !important}.mb-sm-3,.my-sm-3{margin-bottom:1rem !important}.ml-sm-3,.mx-sm-3{margin-left:1rem !important}.m-sm-4{margin:1.5rem !important}.mt-sm-4,.my-sm-4{margin-top:1.5rem !important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem !important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem !important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem !important}.m-sm-5{margin:3rem !important}.mt-sm-5,.my-sm-5{margin-top:3rem !important}.mr-sm-5,.mx-sm-5{margin-right:3rem !important}.mb-sm-5,.my-sm-5{margin-bottom:3rem !important}.ml-sm-5,.mx-sm-5{margin-left:3rem !important}.p-sm-0{padding:0 !important}.pt-sm-0,.py-sm-0{padding-top:0 !important}.pr-sm-0,.px-sm-0{padding-right:0 !important}.pb-sm-0,.py-sm-0{padding-bottom:0 !important}.pl-sm-0,.px-sm-0{padding-left:0 !important}.p-sm-1{padding:0.25rem !important}.pt-sm-1,.py-sm-1{padding-top:0.25rem !important}.pr-sm-1,.px-sm-1{padding-right:0.25rem !important}.pb-sm-1,.py-sm-1{padding-bottom:0.25rem !important}.pl-sm-1,.px-sm-1{padding-left:0.25rem !important}.p-sm-2{padding:0.5rem !important}.pt-sm-2,.py-sm-2{padding-top:0.5rem !important}.pr-sm-2,.px-sm-2{padding-right:0.5rem !important}.pb-sm-2,.py-sm-2{padding-bottom:0.5rem !important}.pl-sm-2,.px-sm-2{padding-left:0.5rem !important}.p-sm-3{padding:1rem !important}.pt-sm-3,.py-sm-3{padding-top:1rem !important}.pr-sm-3,.px-sm-3{padding-right:1rem !important}.pb-sm-3,.py-sm-3{padding-bottom:1rem !important}.pl-sm-3,.px-sm-3{padding-left:1rem !important}.p-sm-4{padding:1.5rem !important}.pt-sm-4,.py-sm-4{padding-top:1.5rem !important}.pr-sm-4,.px-sm-4{padding-right:1.5rem !important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem !important}.pl-sm-4,.px-sm-4{padding-left:1.5rem !important}.p-sm-5{padding:3rem !important}.pt-sm-5,.py-sm-5{padding-top:3rem !important}.pr-sm-5,.px-sm-5{padding-right:3rem !important}.pb-sm-5,.py-sm-5{padding-bottom:3rem !important}.pl-sm-5,.px-sm-5{padding-left:3rem !important}.m-sm-n1{margin:-0.25rem !important}.mt-sm-n1,.my-sm-n1{margin-top:-0.25rem !important}.mr-sm-n1,.mx-sm-n1{margin-right:-0.25rem !important}.mb-sm-n1,.my-sm-n1{margin-bottom:-0.25rem !important}.ml-sm-n1,.mx-sm-n1{margin-left:-0.25rem !important}.m-sm-n2{margin:-0.5rem !important}.mt-sm-n2,.my-sm-n2{margin-top:-0.5rem !important}.mr-sm-n2,.mx-sm-n2{margin-right:-0.5rem !important}.mb-sm-n2,.my-sm-n2{margin-bottom:-0.5rem !important}.ml-sm-n2,.mx-sm-n2{margin-left:-0.5rem !important}.m-sm-n3{margin:-1rem !important}.mt-sm-n3,.my-sm-n3{margin-top:-1rem !important}.mr-sm-n3,.mx-sm-n3{margin-right:-1rem !important}.mb-sm-n3,.my-sm-n3{margin-bottom:-1rem !important}.ml-sm-n3,.mx-sm-n3{margin-left:-1rem !important}.m-sm-n4{margin:-1.5rem !important}.mt-sm-n4,.my-sm-n4{margin-top:-1.5rem !important}.mr-sm-n4,.mx-sm-n4{margin-right:-1.5rem !important}.mb-sm-n4,.my-sm-n4{margin-bottom:-1.5rem !important}.ml-sm-n4,.mx-sm-n4{margin-left:-1.5rem !important}.m-sm-n5{margin:-3rem !important}.mt-sm-n5,.my-sm-n5{margin-top:-3rem !important}.mr-sm-n5,.mx-sm-n5{margin-right:-3rem !important}.mb-sm-n5,.my-sm-n5{margin-bottom:-3rem !important}.ml-sm-n5,.mx-sm-n5{margin-left:-3rem !important}.m-sm-auto{margin:auto !important}.mt-sm-auto,.my-sm-auto{margin-top:auto !important}.mr-sm-auto,.mx-sm-auto{margin-right:auto !important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto !important}.ml-sm-auto,.mx-sm-auto{margin-left:auto !important}}@media (min-width: 768px){.m-md-0{margin:0 !important}.mt-md-0,.my-md-0{margin-top:0 !important}.mr-md-0,.mx-md-0{margin-right:0 !important}.mb-md-0,.my-md-0{margin-bottom:0 !important}.ml-md-0,.mx-md-0{margin-left:0 !important}.m-md-1{margin:0.25rem !important}.mt-md-1,.my-md-1{margin-top:0.25rem !important}.mr-md-1,.mx-md-1{margin-right:0.25rem !important}.mb-md-1,.my-md-1{margin-bottom:0.25rem !important}.ml-md-1,.mx-md-1{margin-left:0.25rem !important}.m-md-2{margin:0.5rem !important}.mt-md-2,.my-md-2{margin-top:0.5rem !important}.mr-md-2,.mx-md-2{margin-right:0.5rem !important}.mb-md-2,.my-md-2{margin-bottom:0.5rem !important}.ml-md-2,.mx-md-2{margin-left:0.5rem !important}.m-md-3{margin:1rem !important}.mt-md-3,.my-md-3{margin-top:1rem !important}.mr-md-3,.mx-md-3{margin-right:1rem !important}.mb-md-3,.my-md-3{margin-bottom:1rem !important}.ml-md-3,.mx-md-3{margin-left:1rem !important}.m-md-4{margin:1.5rem !important}.mt-md-4,.my-md-4{margin-top:1.5rem !important}.mr-md-4,.mx-md-4{margin-right:1.5rem !important}.mb-md-4,.my-md-4{margin-bottom:1.5rem !important}.ml-md-4,.mx-md-4{margin-left:1.5rem !important}.m-md-5{margin:3rem !important}.mt-md-5,.my-md-5{margin-top:3rem !important}.mr-md-5,.mx-md-5{margin-right:3rem !important}.mb-md-5,.my-md-5{margin-bottom:3rem !important}.ml-md-5,.mx-md-5{margin-left:3rem !important}.p-md-0{padding:0 !important}.pt-md-0,.py-md-0{padding-top:0 !important}.pr-md-0,.px-md-0{padding-right:0 !important}.pb-md-0,.py-md-0{padding-bottom:0 !important}.pl-md-0,.px-md-0{padding-left:0 !important}.p-md-1{padding:0.25rem !important}.pt-md-1,.py-md-1{padding-top:0.25rem !important}.pr-md-1,.px-md-1{padding-right:0.25rem !important}.pb-md-1,.py-md-1{padding-bottom:0.25rem !important}.pl-md-1,.px-md-1{padding-left:0.25rem !important}.p-md-2{padding:0.5rem !important}.pt-md-2,.py-md-2{padding-top:0.5rem !important}.pr-md-2,.px-md-2{padding-right:0.5rem !important}.pb-md-2,.py-md-2{padding-bottom:0.5rem !important}.pl-md-2,.px-md-2{padding-left:0.5rem !important}.p-md-3{padding:1rem !important}.pt-md-3,.py-md-3{padding-top:1rem !important}.pr-md-3,.px-md-3{padding-right:1rem !important}.pb-md-3,.py-md-3{padding-bottom:1rem !important}.pl-md-3,.px-md-3{padding-left:1rem !important}.p-md-4{padding:1.5rem !important}.pt-md-4,.py-md-4{padding-top:1.5rem !important}.pr-md-4,.px-md-4{padding-right:1.5rem !important}.pb-md-4,.py-md-4{padding-bottom:1.5rem !important}.pl-md-4,.px-md-4{padding-left:1.5rem !important}.p-md-5{padding:3rem !important}.pt-md-5,.py-md-5{padding-top:3rem !important}.pr-md-5,.px-md-5{padding-right:3rem !important}.pb-md-5,.py-md-5{padding-bottom:3rem !important}.pl-md-5,.px-md-5{padding-left:3rem !important}.m-md-n1{margin:-0.25rem !important}.mt-md-n1,.my-md-n1{margin-top:-0.25rem !important}.mr-md-n1,.mx-md-n1{margin-right:-0.25rem !important}.mb-md-n1,.my-md-n1{margin-bottom:-0.25rem !important}.ml-md-n1,.mx-md-n1{margin-left:-0.25rem !important}.m-md-n2{margin:-0.5rem !important}.mt-md-n2,.my-md-n2{margin-top:-0.5rem !important}.mr-md-n2,.mx-md-n2{margin-right:-0.5rem !important}.mb-md-n2,.my-md-n2{margin-bottom:-0.5rem !important}.ml-md-n2,.mx-md-n2{margin-left:-0.5rem !important}.m-md-n3{margin:-1rem !important}.mt-md-n3,.my-md-n3{margin-top:-1rem !important}.mr-md-n3,.mx-md-n3{margin-right:-1rem !important}.mb-md-n3,.my-md-n3{margin-bottom:-1rem !important}.ml-md-n3,.mx-md-n3{margin-left:-1rem !important}.m-md-n4{margin:-1.5rem !important}.mt-md-n4,.my-md-n4{margin-top:-1.5rem !important}.mr-md-n4,.mx-md-n4{margin-right:-1.5rem !important}.mb-md-n4,.my-md-n4{margin-bottom:-1.5rem !important}.ml-md-n4,.mx-md-n4{margin-left:-1.5rem !important}.m-md-n5{margin:-3rem !important}.mt-md-n5,.my-md-n5{margin-top:-3rem !important}.mr-md-n5,.mx-md-n5{margin-right:-3rem !important}.mb-md-n5,.my-md-n5{margin-bottom:-3rem !important}.ml-md-n5,.mx-md-n5{margin-left:-3rem !important}.m-md-auto{margin:auto !important}.mt-md-auto,.my-md-auto{margin-top:auto !important}.mr-md-auto,.mx-md-auto{margin-right:auto !important}.mb-md-auto,.my-md-auto{margin-bottom:auto !important}.ml-md-auto,.mx-md-auto{margin-left:auto !important}}@media (min-width: 992px){.m-lg-0{margin:0 !important}.mt-lg-0,.my-lg-0{margin-top:0 !important}.mr-lg-0,.mx-lg-0{margin-right:0 !important}.mb-lg-0,.my-lg-0{margin-bottom:0 !important}.ml-lg-0,.mx-lg-0{margin-left:0 !important}.m-lg-1{margin:0.25rem !important}.mt-lg-1,.my-lg-1{margin-top:0.25rem !important}.mr-lg-1,.mx-lg-1{margin-right:0.25rem !important}.mb-lg-1,.my-lg-1{margin-bottom:0.25rem !important}.ml-lg-1,.mx-lg-1{margin-left:0.25rem !important}.m-lg-2{margin:0.5rem !important}.mt-lg-2,.my-lg-2{margin-top:0.5rem !important}.mr-lg-2,.mx-lg-2{margin-right:0.5rem !important}.mb-lg-2,.my-lg-2{margin-bottom:0.5rem !important}.ml-lg-2,.mx-lg-2{margin-left:0.5rem !important}.m-lg-3{margin:1rem !important}.mt-lg-3,.my-lg-3{margin-top:1rem !important}.mr-lg-3,.mx-lg-3{margin-right:1rem !important}.mb-lg-3,.my-lg-3{margin-bottom:1rem !important}.ml-lg-3,.mx-lg-3{margin-left:1rem !important}.m-lg-4{margin:1.5rem !important}.mt-lg-4,.my-lg-4{margin-top:1.5rem !important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem !important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem !important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem !important}.m-lg-5{margin:3rem !important}.mt-lg-5,.my-lg-5{margin-top:3rem !important}.mr-lg-5,.mx-lg-5{margin-right:3rem !important}.mb-lg-5,.my-lg-5{margin-bottom:3rem !important}.ml-lg-5,.mx-lg-5{margin-left:3rem !important}.p-lg-0{padding:0 !important}.pt-lg-0,.py-lg-0{padding-top:0 !important}.pr-lg-0,.px-lg-0{padding-right:0 !important}.pb-lg-0,.py-lg-0{padding-bottom:0 !important}.pl-lg-0,.px-lg-0{padding-left:0 !important}.p-lg-1{padding:0.25rem !important}.pt-lg-1,.py-lg-1{padding-top:0.25rem !important}.pr-lg-1,.px-lg-1{padding-right:0.25rem !important}.pb-lg-1,.py-lg-1{padding-bottom:0.25rem !important}.pl-lg-1,.px-lg-1{padding-left:0.25rem !important}.p-lg-2{padding:0.5rem !important}.pt-lg-2,.py-lg-2{padding-top:0.5rem !important}.pr-lg-2,.px-lg-2{padding-right:0.5rem !important}.pb-lg-2,.py-lg-2{padding-bottom:0.5rem !important}.pl-lg-2,.px-lg-2{padding-left:0.5rem !important}.p-lg-3{padding:1rem !important}.pt-lg-3,.py-lg-3{padding-top:1rem !important}.pr-lg-3,.px-lg-3{padding-right:1rem !important}.pb-lg-3,.py-lg-3{padding-bottom:1rem !important}.pl-lg-3,.px-lg-3{padding-left:1rem !important}.p-lg-4{padding:1.5rem !important}.pt-lg-4,.py-lg-4{padding-top:1.5rem !important}.pr-lg-4,.px-lg-4{padding-right:1.5rem !important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem !important}.pl-lg-4,.px-lg-4{padding-left:1.5rem !important}.p-lg-5{padding:3rem !important}.pt-lg-5,.py-lg-5{padding-top:3rem !important}.pr-lg-5,.px-lg-5{padding-right:3rem !important}.pb-lg-5,.py-lg-5{padding-bottom:3rem !important}.pl-lg-5,.px-lg-5{padding-left:3rem !important}.m-lg-n1{margin:-0.25rem !important}.mt-lg-n1,.my-lg-n1{margin-top:-0.25rem !important}.mr-lg-n1,.mx-lg-n1{margin-right:-0.25rem !important}.mb-lg-n1,.my-lg-n1{margin-bottom:-0.25rem !important}.ml-lg-n1,.mx-lg-n1{margin-left:-0.25rem !important}.m-lg-n2{margin:-0.5rem !important}.mt-lg-n2,.my-lg-n2{margin-top:-0.5rem !important}.mr-lg-n2,.mx-lg-n2{margin-right:-0.5rem !important}.mb-lg-n2,.my-lg-n2{margin-bottom:-0.5rem !important}.ml-lg-n2,.mx-lg-n2{margin-left:-0.5rem !important}.m-lg-n3{margin:-1rem !important}.mt-lg-n3,.my-lg-n3{margin-top:-1rem !important}.mr-lg-n3,.mx-lg-n3{margin-right:-1rem !important}.mb-lg-n3,.my-lg-n3{margin-bottom:-1rem !important}.ml-lg-n3,.mx-lg-n3{margin-left:-1rem !important}.m-lg-n4{margin:-1.5rem !important}.mt-lg-n4,.my-lg-n4{margin-top:-1.5rem !important}.mr-lg-n4,.mx-lg-n4{margin-right:-1.5rem !important}.mb-lg-n4,.my-lg-n4{margin-bottom:-1.5rem !important}.ml-lg-n4,.mx-lg-n4{margin-left:-1.5rem !important}.m-lg-n5{margin:-3rem !important}.mt-lg-n5,.my-lg-n5{margin-top:-3rem !important}.mr-lg-n5,.mx-lg-n5{margin-right:-3rem !important}.mb-lg-n5,.my-lg-n5{margin-bottom:-3rem !important}.ml-lg-n5,.mx-lg-n5{margin-left:-3rem !important}.m-lg-auto{margin:auto !important}.mt-lg-auto,.my-lg-auto{margin-top:auto !important}.mr-lg-auto,.mx-lg-auto{margin-right:auto !important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto !important}.ml-lg-auto,.mx-lg-auto{margin-left:auto !important}}@media (min-width: 1200px){.m-xl-0{margin:0 !important}.mt-xl-0,.my-xl-0{margin-top:0 !important}.mr-xl-0,.mx-xl-0{margin-right:0 !important}.mb-xl-0,.my-xl-0{margin-bottom:0 !important}.ml-xl-0,.mx-xl-0{margin-left:0 !important}.m-xl-1{margin:0.25rem !important}.mt-xl-1,.my-xl-1{margin-top:0.25rem !important}.mr-xl-1,.mx-xl-1{margin-right:0.25rem !important}.mb-xl-1,.my-xl-1{margin-bottom:0.25rem !important}.ml-xl-1,.mx-xl-1{margin-left:0.25rem !important}.m-xl-2{margin:0.5rem !important}.mt-xl-2,.my-xl-2{margin-top:0.5rem !important}.mr-xl-2,.mx-xl-2{margin-right:0.5rem !important}.mb-xl-2,.my-xl-2{margin-bottom:0.5rem !important}.ml-xl-2,.mx-xl-2{margin-left:0.5rem !important}.m-xl-3{margin:1rem !important}.mt-xl-3,.my-xl-3{margin-top:1rem !important}.mr-xl-3,.mx-xl-3{margin-right:1rem !important}.mb-xl-3,.my-xl-3{margin-bottom:1rem !important}.ml-xl-3,.mx-xl-3{margin-left:1rem !important}.m-xl-4{margin:1.5rem !important}.mt-xl-4,.my-xl-4{margin-top:1.5rem !important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem !important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem !important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem !important}.m-xl-5{margin:3rem !important}.mt-xl-5,.my-xl-5{margin-top:3rem !important}.mr-xl-5,.mx-xl-5{margin-right:3rem !important}.mb-xl-5,.my-xl-5{margin-bottom:3rem !important}.ml-xl-5,.mx-xl-5{margin-left:3rem !important}.p-xl-0{padding:0 !important}.pt-xl-0,.py-xl-0{padding-top:0 !important}.pr-xl-0,.px-xl-0{padding-right:0 !important}.pb-xl-0,.py-xl-0{padding-bottom:0 !important}.pl-xl-0,.px-xl-0{padding-left:0 !important}.p-xl-1{padding:0.25rem !important}.pt-xl-1,.py-xl-1{padding-top:0.25rem !important}.pr-xl-1,.px-xl-1{padding-right:0.25rem !important}.pb-xl-1,.py-xl-1{padding-bottom:0.25rem !important}.pl-xl-1,.px-xl-1{padding-left:0.25rem !important}.p-xl-2{padding:0.5rem !important}.pt-xl-2,.py-xl-2{padding-top:0.5rem !important}.pr-xl-2,.px-xl-2{padding-right:0.5rem !important}.pb-xl-2,.py-xl-2{padding-bottom:0.5rem !important}.pl-xl-2,.px-xl-2{padding-left:0.5rem !important}.p-xl-3{padding:1rem !important}.pt-xl-3,.py-xl-3{padding-top:1rem !important}.pr-xl-3,.px-xl-3{padding-right:1rem !important}.pb-xl-3,.py-xl-3{padding-bottom:1rem !important}.pl-xl-3,.px-xl-3{padding-left:1rem !important}.p-xl-4{padding:1.5rem !important}.pt-xl-4,.py-xl-4{padding-top:1.5rem !important}.pr-xl-4,.px-xl-4{padding-right:1.5rem !important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem !important}.pl-xl-4,.px-xl-4{padding-left:1.5rem !important}.p-xl-5{padding:3rem !important}.pt-xl-5,.py-xl-5{padding-top:3rem !important}.pr-xl-5,.px-xl-5{padding-right:3rem !important}.pb-xl-5,.py-xl-5{padding-bottom:3rem !important}.pl-xl-5,.px-xl-5{padding-left:3rem !important}.m-xl-n1{margin:-0.25rem !important}.mt-xl-n1,.my-xl-n1{margin-top:-0.25rem !important}.mr-xl-n1,.mx-xl-n1{margin-right:-0.25rem !important}.mb-xl-n1,.my-xl-n1{margin-bottom:-0.25rem !important}.ml-xl-n1,.mx-xl-n1{margin-left:-0.25rem !important}.m-xl-n2{margin:-0.5rem !important}.mt-xl-n2,.my-xl-n2{margin-top:-0.5rem !important}.mr-xl-n2,.mx-xl-n2{margin-right:-0.5rem !important}.mb-xl-n2,.my-xl-n2{margin-bottom:-0.5rem !important}.ml-xl-n2,.mx-xl-n2{margin-left:-0.5rem !important}.m-xl-n3{margin:-1rem !important}.mt-xl-n3,.my-xl-n3{margin-top:-1rem !important}.mr-xl-n3,.mx-xl-n3{margin-right:-1rem !important}.mb-xl-n3,.my-xl-n3{margin-bottom:-1rem !important}.ml-xl-n3,.mx-xl-n3{margin-left:-1rem !important}.m-xl-n4{margin:-1.5rem !important}.mt-xl-n4,.my-xl-n4{margin-top:-1.5rem !important}.mr-xl-n4,.mx-xl-n4{margin-right:-1.5rem !important}.mb-xl-n4,.my-xl-n4{margin-bottom:-1.5rem !important}.ml-xl-n4,.mx-xl-n4{margin-left:-1.5rem !important}.m-xl-n5{margin:-3rem !important}.mt-xl-n5,.my-xl-n5{margin-top:-3rem !important}.mr-xl-n5,.mx-xl-n5{margin-right:-3rem !important}.mb-xl-n5,.my-xl-n5{margin-bottom:-3rem !important}.ml-xl-n5,.mx-xl-n5{margin-left:-3rem !important}.m-xl-auto{margin:auto !important}.mt-xl-auto,.my-xl-auto{margin-top:auto !important}.mr-xl-auto,.mx-xl-auto{margin-right:auto !important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto !important}.ml-xl-auto,.mx-xl-auto{margin-left:auto !important}}.text-monospace{font-family:SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace !important}.text-justify{text-align:justify !important}.text-wrap{white-space:normal !important}.text-nowrap{white-space:nowrap !important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left !important}.text-right{text-align:right !important}.text-center{text-align:center !important}@media (min-width: 576px){.text-sm-left{text-align:left !important}.text-sm-right{text-align:right !important}.text-sm-center{text-align:center !important}}@media (min-width: 768px){.text-md-left{text-align:left !important}.text-md-right{text-align:right !important}.text-md-center{text-align:center !important}}@media (min-width: 992px){.text-lg-left{text-align:left !important}.text-lg-right{text-align:right !important}.text-lg-center{text-align:center !important}}@media (min-width: 1200px){.text-xl-left{text-align:left !important}.text-xl-right{text-align:right !important}.text-xl-center{text-align:center !important}}.text-lowercase{text-transform:lowercase !important}.text-uppercase{text-transform:uppercase !important}.text-capitalize{text-transform:capitalize !important}.font-weight-light{font-weight:300 !important}.font-weight-lighter{font-weight:lighter !important}.font-weight-normal{font-weight:400 !important}.font-weight-bold{font-weight:700 !important}.font-weight-bolder{font-weight:bolder !important}.font-italic{font-style:italic !important}.text-white{color:#fff !important}.text-primary{color:#4582EC !important}a.text-primary:hover,a.text-primary:focus{color:#1559cf !important}.text-secondary{color:#adb5bd !important}a.text-secondary:hover,a.text-secondary:focus{color:#838f9b !important}.text-success{color:#02B875 !important}a.text-success:hover,a.text-success:focus{color:#016c45 !important}.text-info{color:#17a2b8 !important}a.text-info:hover,a.text-info:focus{color:#0f6674 !important}.text-warning{color:#f0ad4e !important}a.text-warning:hover,a.text-warning:focus{color:#df8a13 !important}.text-danger{color:#d9534f !important}a.text-danger:hover,a.text-danger:focus{color:#b52b27 !important}.text-light{color:#f8f9fa !important}a.text-light:hover,a.text-light:focus{color:#cbd3da !important}.text-dark{color:#343a40 !important}a.text-dark:hover,a.text-dark:focus{color:#121416 !important}.text-body{color:#343a40 !important}.text-muted{color:#868e96 !important}.text-black-50{color:rgba(0,0,0,0.5) !important}.text-white-50{color:rgba(255,255,255,0.5) !important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.text-decoration-none{text-decoration:none !important}.text-break{word-break:break-word !important;overflow-wrap:break-word !important}.text-reset{color:inherit !important}.visible{visibility:visible !important}.invisible{visibility:hidden !important}@media print{*,*::before,*::after{text-shadow:none !important;-webkit-box-shadow:none !important;box-shadow:none !important}a:not(.btn){text-decoration:underline}abbr[title]::after{content:\" (\" attr(title) \")\"}pre{white-space:pre-wrap !important}pre,blockquote{border:1px solid #adb5bd;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}p,h2,h3{orphans:3;widows:3}h2,h3{page-break-after:avoid}@page{size:a3}body{min-width:992px !important}.container{min-width:992px !important}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse !important}.table td,.table th{background-color:#fff !important}.table-bordered th,.table-bordered td{border:1px solid #ddd !important}.table-dark{color:inherit}.table-dark th,.table-dark td,.table-dark thead th,.table-dark tbody+tbody{border-color:rgba(0,0,0,0.1)}.table .thead-dark th{color:inherit;border-color:rgba(0,0,0,0.1)}}.navbar{font-size:0.875em}.bg-dark{background-color:#02B875 !important}.bg-light{background-color:#fff !important;border:1px solid rgba(0,0,0,0.1)}.bg-light.navbar-fixed-top{border-width:0 0 1px 0}.bg-light.navbar-fixed-bottom{border-width:1px 0 0 0}.btn{border-radius:1.078em;font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875em}.btn-lg,.btn-group-lg\u003e.btn{border-radius:2.688em}.btn-sm,.btn-group-sm\u003e.btn{border-radius:0.844em;font-size:0.688em}.btn-secondary,.btn-secondary:hover,.btn-warning,.btn-warning:hover{color:#fff}p{font-family:Georgia, Cambria, \"Times New Roman\", Times, serif}blockquote{font-style:italic}footer{font-size:0.875em}.lead{color:#868e96;font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"}table,.table{font-size:0.875em}table-primary,table-secondary,table-success,table-info,table-warning,table-danger,.table-primary,.table-secondary,.table-success,.table-info,.table-warning,.table-danger{color:#fff}.table-primary,.table-primary\u003eth,.table-primary\u003etd{background-color:#4582EC}.table-secondary,.table-secondary\u003eth,.table-secondary\u003etd{background-color:#adb5bd}.table-light,.table-light\u003eth,.table-light\u003etd{background-color:#f8f9fa}.table-dark,.table-dark\u003eth,.table-dark\u003etd{background-color:#343a40}.table-success,.table-success\u003eth,.table-success\u003etd{background-color:#02B875}.table-info,.table-info\u003eth,.table-info\u003etd{background-color:#17a2b8}.table-danger,.table-danger\u003eth,.table-danger\u003etd{background-color:#d9534f}.table-warning,.table-warning\u003eth,.table-warning\u003etd{background-color:#f0ad4e}.table-active,.table-active\u003eth,.table-active\u003etd{background-color:rgba(0,0,0,0.075)}.table-hover .table-primary:hover,.table-hover .table-primary:hover\u003eth,.table-hover .table-primary:hover\u003etd{background-color:#2e72ea}.table-hover .table-secondary:hover,.table-hover .table-secondary:hover\u003eth,.table-hover .table-secondary:hover\u003etd{background-color:#9fa8b2}.table-hover .table-light:hover,.table-hover .table-light:hover\u003eth,.table-hover .table-light:hover\u003etd{background-color:#e9ecef}.table-hover .table-dark:hover,.table-hover .table-dark:hover\u003eth,.table-hover .table-dark:hover\u003etd{background-color:#292d32}.table-hover .table-success:hover,.table-hover .table-success:hover\u003eth,.table-hover .table-success:hover\u003etd{background-color:#029f65}.table-hover .table-info:hover,.table-hover .table-info:hover\u003eth,.table-hover .table-info:hover\u003etd{background-color:#148ea1}.table-hover .table-danger:hover,.table-hover .table-danger:hover\u003eth,.table-hover .table-danger:hover\u003etd{background-color:#d43f3a}.table-hover .table-warning:hover,.table-hover .table-warning:hover\u003eth,.table-hover .table-warning:hover\u003etd{background-color:#eea236}.table-hover .table-active:hover,.table-hover .table-active:hover\u003eth,.table-hover .table-active:hover\u003etd{background-color:rgba(0,0,0,0.075)}.nav,.breadcrumb,.pagination{font-size:0.875em}.dropdown-menu{font-size:0.875em}.alert{border:none;color:#fff;font-size:0.875em}.alert,.alert p{font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"}.alert a,.alert .alert-link{color:#fff;font-weight:normal;text-decoration:underline}.alert-primary{background-color:#4582EC}.alert-secondary{background-color:#adb5bd}.alert-success{background-color:#02B875}.alert-info{background-color:#17a2b8}.alert-warning{background-color:#f0ad4e}.alert-danger{background-color:#d9534f}.alert-light{background-color:#f8f9fa}.alert-dark{background-color:#343a40}.alert-light,.alert-light a,.alert-light .alert-link{color:#343a40}.badge{vertical-align:bottom}.badge-secondary,.badge-warning{color:#fff}.tooltip{font-size:11px}.list-group{font-size:0.875em}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 12
    }
  },
  {
    "path": "src/main/resources/browser/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"../view/DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "rlrh": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/browser/error.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    \u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        \u003ctitle\u003eError Occurred\u003c/title\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        \u003clink rel\u003d\"stylesheet\" href\u003d\"../view/DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    \u003c/head\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    \u003cbody class\u003d\"background\" style\u003d\"color: white; font-family: \u0027Segoe UI\u0027, Helvetica, Arial, sans-serif\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        \u003ch1\u003eAn error occurred.\u003c/h1\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        \u003cp\u003eTry:\u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        \u003cul\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            \u003cli\u003eChecking your Internet connection\u003c/li\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            \u003cli\u003eVerifying the URL is valid\u003c/li\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        \u003c/ul\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    \u003c/body\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "rlrh": 16
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #f44336;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #e91e63;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .purple {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #9c27b0;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .deepPurple {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #673ab7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .indigo {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #3f51b5;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #1e88e5;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .lightBlue {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #03a9f4;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .cyan {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #00bcd4;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #009688;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #43a047;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .lightGreen {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #8bc34a;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .lime {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #cddc39;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #ffeB3b;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .amber {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #ffc107;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #ff9800;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .deepOrange {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #f4511e;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #795548;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .gray {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #9e9e9e;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rlrh"
        },
        "content": "#tags .blueGray {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    -fx-background-color: #607d8b;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 95,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/EntryListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "      \u003cLabel fx:id\u003d\"link\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$link\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "epicfailname": 3
    }
  },
  {
    "path": "src/main/resources/view/EntryListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "  \u003cListView fx:id\u003d\"entryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "epicfailname": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "         title\u003d\"Readme\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "          \u003cVBox fx:id\u003d\"entryList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \u003cStackPane fx:id\u003d\"entryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "epicfailname": 3
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "  \u003cLabel fx:id\u003d\"targetCountStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/data/JsonEntryBookStorageTest/invalidAndValidEntryEntryBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\": \"Valid Title!\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\": \"Val1d-C@mment! ~ !\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\": \"https://hans.example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\": \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\": \"Entry With Invalid Link Field\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\": \"Oh no!\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\": \"hans@example.com\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\": \"\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 8,
      "epicfailname": 7
    }
  },
  {
    "path": "src/test/data/JsonEntryBookStorageTest/invalidEntryEntryBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\": \"Entry with invalid link field\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\": \"Oh no!\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\": \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 4,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableEntryBookTest/duplicateEntryEntryBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\": \"Comment1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\": \"https://alice.example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\": \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\": \"Alice Pauline\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\": \"Comment2\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\": \"https://alice.example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\": \"\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 8,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableEntryBookTest/invalidEntryEntryBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\": \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 4,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableEntryBookTest/typicalEntryEntryBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\" : \"Description place-holder\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\" : \"https://alice.example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\" : \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\" : \"Benson Meier\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\" : \"Description place-holder\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\" : \"https://johnd.example.com\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\" : \"\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\" : \"Description place-holder\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\" : \"https://heinz.example.com\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\" : \"\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\" : \"Description place-holder\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\" : \"https://cornelia.example.com\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\" : \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\" : \"Description place-holder\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\" : \"https://werner.example.com\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\" : \"\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\" : \"Description place-holder\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\" : \"https://lydia.example.com\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\" : \"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"title\" : \"George Best\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"description\" : \"Description place-holder\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"link\" : \"https://anna.example.com\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    \"offlineLink\" : \"\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 28,
      "-": 25
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  \"articleDataDirectoryPath\" : \"data\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "  \"articleDataDirectoryPath\" : \"data\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 60000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/EntryCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Provides a handle to a entry card in the entry list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String TITLE_FIELD_ID \u003d \"#title\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String LINK_FIELD_ID \u003d \"#link\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Label titleLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final Label linkLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        titleLabel \u003d getChildNode(TITLE_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        linkLabel \u003d getChildNode(LINK_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return titleLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public String getLink() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return linkLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if this handle contains {@code entry}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean equals(Entry entry) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return getTitle().equals(entry.getTitle().fullTitle)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 getAddress().equals(entry.getAddress().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 getDescription().equals(entry.getDescription().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 getLink().equals(entry.getLink().value)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(entry.getTags().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 9,
      "-": 61,
      "epicfailname": 26
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/EntryListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Provides a handle for {@code EntryListPanel} containing the list of {@code EntryCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryListPanelHandle extends NodeHandle\u003cListView\u003cEntry\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String ENTRY_LIST_VIEW_ID \u003d \"#entryListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Optional\u003cEntry\u003e lastRememberedSelectedEntryCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryListPanelHandle(ListView\u003cEntry\u003e entryListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        super(entryListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns a handle to the selected {@code EntryCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e selectedEntryList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (selectedEntryList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new AssertionError(\"Entry list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .map(EntryCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedEntryList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Navigates the listview to display {@code entry}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void navigateToCard(Entry entry) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        if (!getRootNode().getItems().contains(entry)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new IllegalArgumentException(\"Entry does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            getRootNode().scrollTo(entry);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Selects the {@code EntryCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the entry card handle of a entry associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryCardHandle getEntryCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .map(EntryCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .filter(handle -\u003e handle.equals(getEntry(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Entry getEntry(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Remembers the selected {@code EntryCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void rememberSelectedEntryCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            lastRememberedSelectedEntryCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            lastRememberedSelectedEntryCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns true if the selected {@code EntryCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code rememberSelectedEntryCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public boolean isSelectedEntryCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return lastRememberedSelectedEntryCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return !lastRememberedSelectedEntryCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                    || !lastRememberedSelectedEntryCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "epicfailname": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final EntryListPanelHandle entryListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryListPanel \u003d new EntryListPanelHandle(getChildNode(EntryListPanelHandle.ENTRY_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryListPanelHandle getEntryListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return entryListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "epicfailname": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "epicfailname": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private static final String TARGET_COUNT_STATUS_ID \u003d \"#targetCountStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Labeled syncStatusNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Labeled saveLocationNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private final Labeled targetCountNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        targetCountNode \u003d getChildNode(TARGET_COUNT_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     * Returns the text of the \u0027targets counter\u0027 section of the status bar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public String getTargetCount() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return targetCountNode.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 10,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.StorageStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.storage.JsonEntryBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected Supplier\u003cReadOnlyEntryBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyEntryBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            JsonEntryBookStorage jsonAddressBookStorage \u003d new JsonEntryBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new EntryBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new AssertionError(\"Data is not in the EntryBook format.\", dce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Model copy \u003d new ModelManager(model.getListEntryBook(), new UserPrefs(), new StorageStub());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        copy.setContext(model.getContext());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredEntryList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the command result in the app."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param commandResult command result to set"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void setCommandResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        model.setCommandResult(commandResult);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the exception in the app."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param e exception to set"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void setException(Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        model.setException(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 17,
      "qjqqyy": 1,
      "thomastanck": 1,
      "-": 98,
      "epicfailname": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.ArticleStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.DataDirectoryArticleStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.storage.JsonEntryBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonEntryBookStorage addressBookStorage \u003d new JsonEntryBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ArticleStorage articleStorage \u003d new DataDirectoryArticleStorage(temporaryFolder.newFolder().toPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, articleStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        model \u003d new ModelManager(new EntryBook(), new UserPrefs(), storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void execute_validAliasCommand_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_ALIAS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Setup LogicManager with JsonEntryBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonEntryBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new JsonEntryBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ArticleStorage articleStorage \u003d new DataDirectoryArticleStorage(temporaryFolder.newFolder().toPath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, articleStorage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        model \u003d new ModelManager(model.getListEntryBook(), model.getUserPrefs(), storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + LINK_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String expectedInitialMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, expectedEntry);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        String expectedFinalMessage \u003d ModelManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        expectedModel.addEntry(expectedEntry);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedModel.setException(new CommandException(expectedFinalMessage));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandSuccess(addCommand, expectedInitialMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertManualExceptionPropagated(CommandException.class, expectedFinalMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_manualCommandResultSet_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String expectedMessage \u003d \"Command result successfully set manually\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        logic.setCommandResult(result);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertManualCommandResultSet(expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_manualExceptionPropagated_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String expectedMessage \u003d \"Exception successfully set manually\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Exception exception \u003d new Exception(expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        logic.setException(exception);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertManualExceptionPropagated(Exception.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        logic.getFilteredEntryList().remove(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getListEntryBook(), model.getUserPrefs(), model.getStorage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * For manually set command result, confirms that the result message is correct."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Exception can be propagated from previous commands so it cannot be checked."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void assertManualCommandResultSet(String expectedMessage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertNotNull(model.getCommandResult());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(expectedMessage, model.getCommandResult().getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * For manually set exception, confirms that the expected exception is propagated."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Command result can be propagated from previous commands so it cannot be checked."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void assertManualExceptionPropagated(Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertNotNull(model.getException());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(expectedException, model.getException().getClass());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(expectedMessage, model.getException().getMessage());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static class JsonEntryBookIoExceptionThrowingStub extends JsonEntryBookStorage {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        private JsonEntryBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void saveAddressBook(ReadOnlyEntryBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 40,
      "qjqqyy": 2,
      "thomastanck": 22,
      "-": 160,
      "epicfailname": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_COMPLETE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_INCOMPLETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_newEntry_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.addEntry(validEntry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(new AddCommand(validEntry), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validEntry), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_newEntryHasNoTitleAndNoDescription_titleAndDescriptionReplacedSuccess() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedModel.addEntry(CRUX_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandSuccess(new AddCommand(CRUX_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, CRUX_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_newEntryHasNoTitle_titleReplacedSuccess() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedModel.addEntry(CRUX_LINK_NO_TITLE_COMPLETE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandSuccess(new AddCommand(CRUX_LINK_NO_TITLE_INCOMPLETE), model, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, CRUX_LINK_NO_TITLE_COMPLETE), expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_newEntryHasNoDescription_descriptionReplacedSuccess() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedModel.addEntry(CRUX_LINK_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandSuccess(new AddCommand(CRUX_LINK_NO_DESCRIPTION_INCOMPLETE), model, commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, CRUX_LINK_NO_DESCRIPTION_COMPLETE), expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_duplicateEntry_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Entry entryInList \u003d model.getListEntryBook().getEntryList().get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(new AddCommand(entryInList), model, commandHistory,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 27,
      "qjqqyy": 1,
      "thomastanck": 3,
      "-": 35,
      "epicfailname": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_COMPLETE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_COMPLETE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_INCOMPLETE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CRUX_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.REAL_LINK_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.REAL_LINK_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.REAL_LINK_NO_TITLE_COMPLETE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.REAL_LINK_NO_TITLE_INCOMPLETE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.REAL_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.REAL_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.STUB_LINK_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.STUB_LINK_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.STUB_LINK_NO_TITLE_COMPLETE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.STUB_LINK_NO_TITLE_INCOMPLETE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.STUB_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.STUB_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ModelContext;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void constructor_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_entryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ModelStubAcceptingEntryAdded modelStub \u003d new ModelStubAcceptingEntryAdded();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validEntry).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEntry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(Arrays.asList(validEntry), modelStub.entriesAdded);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry validEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validEntry);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEntry(validEntry);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_stubEntryHasNoTitleAndNoDescription_titleAndDescriptionReplaced() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                STUB_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE, STUB_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_stubEntryHasNoTitle_onlyTitleReplaced() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry(STUB_LINK_NO_TITLE_INCOMPLETE, STUB_LINK_NO_TITLE_COMPLETE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_stubEntryHasNoDescription_onlyDescriptionReplaced() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry(STUB_LINK_NO_DESCRIPTION_INCOMPLETE, STUB_LINK_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_realEntryHasNoTitleAndNoDescription_titleAndDescriptionReplaced() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                REAL_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE, REAL_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_realEntryHasNoTitle_onlytitleReplaced() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry(REAL_LINK_NO_TITLE_INCOMPLETE, REAL_LINK_NO_TITLE_COMPLETE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_realEntryHasNoDescription_onlydescriptionReplaced() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry(REAL_LINK_NO_DESCRIPTION_INCOMPLETE, REAL_LINK_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_cruxEntryHasNoTitleAndNoDescription_titleAndDescriptionReplaced() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                CRUX_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE, CRUX_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_cruxEntryHasNoTitle_onlyTitleReplaced() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry(CRUX_LINK_NO_TITLE_INCOMPLETE, CRUX_LINK_NO_TITLE_COMPLETE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_cruxEntryHasNoDescription_onlyDescriptionReplaced() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry(CRUX_LINK_NO_DESCRIPTION_INCOMPLETE, CRUX_LINK_NO_DESCRIPTION_COMPLETE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_entryHasTitleAndDescription_noChange() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertInitialEntryBecomesFinalEntry(CRUX_LINK_COMPLETE, CRUX_LINK_COMPLETE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry alice \u003d new EntryBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry bob \u003d new EntryBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Asserts that {@code initialEntry} in an {@code AddCommand} becomes {@code finalEntry} after its execution."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void assertInitialEntryBecomesFinalEntry(Entry initialEntry, Entry finalEntry) throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ModelStubAcceptingEntryAdded modelStub \u003d new ModelStubAcceptingEntryAdded();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(initialEntry).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, finalEntry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(Arrays.asList(finalEntry), modelStub.entriesAdded);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        public Storage getStorage() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        public Optional\u003cPath\u003e addArticle(String url, byte[] articleContent) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public Path getEntryBookFilePath() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void setEntryBookFilePath(Path entryBookFilePath) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        public Path getArticleDataDirectoryPath() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        public void setArticleDataDirectoryPath(Path articleDataDirectoryPath) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        public void setListEntryBook(ReadOnlyEntryBook listEntryBook) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        public ReadOnlyEntryBook getListEntryBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void deleteEntry(Entry target) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void setEntry(Entry target, Entry editedEntry) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        public void clearEntryBook() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        public void displayEntryBook(ReadOnlyEntryBook entryBook) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public ObservableList\u003cEntry\u003e getFilteredEntryList() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public ReadOnlyProperty\u003cEntry\u003e selectedEntryProperty() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public Entry getSelectedEntry() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void setSelectedEntry(Entry entry) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public ReadOnlyProperty\u003cViewMode\u003e viewModeProperty() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public ViewMode getViewMode() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public void setViewMode(ViewMode viewMode) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public ReadOnlyProperty\u003cException\u003e exceptionProperty() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public Exception getException() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public void setException(Exception exceptionToBePropagated) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public ReadOnlyProperty\u003cCommandResult\u003e commandResultProperty() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public CommandResult getCommandResult() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        public void setCommandResult(CommandResult result) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        public Model clone() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public ModelContext getContext() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void setContext(ModelContext context) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void archiveEntry(Entry target) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void unarchiveEntry(Entry entry) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * A Model stub that contains a single entry."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private class ModelStubWithEntry extends ModelStub {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        private final Entry entry;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ModelStubWithEntry(Entry entry) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            this.entry \u003d entry;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return this.entry.isSameEntry(entry);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * A Model stub that always accepts the entry being added."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private class ModelStubAcceptingEntryAdded extends ModelStub {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        private final ArrayList\u003cEntry\u003e entriesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        public Optional\u003cPath\u003e addArticle(String url, byte[] articleContent) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return entriesAdded.stream().anyMatch(entry::isSameEntry);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            entriesAdded.add(entry);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        public ReadOnlyEntryBook getListEntryBook() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return new EntryBook();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 106,
      "qjqqyy": 7,
      "thomastanck": 33,
      "-": 228,
      "epicfailname": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        expectedModel.setListEntryBook(new EntryBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 1,
      "thomastanck": 6,
      "-": 26,
      "epicfailname": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee bankrupt?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo\u0027s affair!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"Bad investments??\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"The answer will shock you!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_LINK_AMY \u003d \"https://amy.example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_LINK_BOB \u003d \"file:///bob/example/file\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_TAG_SCIENCE \u003d \"science\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String VALID_TAG_TECH \u003d \"tech\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String TITLE_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String TITLE_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String LINK_DESC_AMY \u003d \" \" + PREFIX_LINK + VALID_LINK_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String LINK_DESC_BOB \u003d \" \" + PREFIX_LINK + VALID_LINK_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String TAG_DESC_TECH \u003d \" \" + PREFIX_TAG + VALID_TAG_TECH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String TAG_DESC_SCIENCE \u003d \" \" + PREFIX_TAG + VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // string starting with space not allowed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + INVALID_TITLE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // string starting with space not allowed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // missing protocol"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_LINK \u003d \"bob.yahoo.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_LINK_DESC \u003d \" \" + PREFIX_LINK + INVALID_LINK;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // string starting with space not allowed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS + INVALID_ADDRESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_TAG \u003d \"tech*\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + INVALID_TAG;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final EditCommand.EditEntryDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        DESC_AMY \u003d new EditEntryDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY).withLink(VALID_LINK_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withTags(VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        DESC_BOB \u003d new EditEntryDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).withLink(VALID_LINK_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withTags(VALID_TAG_SCIENCE, VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * - the address book, filtered entry list and selected entry in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        EntryBook expectedAddressBook \u003d new EntryBook(actualModel.getListEntryBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEntryList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry expectedSelectedEntry \u003d actualModel.getSelectedEntry();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getListEntryBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredEntryList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            assertEquals(expectedSelectedEntry, actualModel.getSelectedEntry());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the entry at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entry \u003d model.getFilteredEntryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        final String[] splitName \u003d entry.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.updateFilteredEntryList(new TitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(1, model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Deletes the first entry in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry firstEntry \u003d model.getFilteredEntryList().get(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.deleteEntry(firstEntry);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 2,
      "-": 99,
      "epicfailname": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.StorageStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryToDelete \u003d model.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, entryToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getListEntryBook(), new UserPrefs(), new StorageStub());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEntryList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryToDelete \u003d model.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, entryToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getListEntryBook(), new UserPrefs(), new StorageStub());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.deleteEntry(entryToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getListEntryBook().getEntryList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ENTRY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.updateFilteredEntryList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(model.getFilteredEntryList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 3,
      "thomastanck": 4,
      "-": 84,
      "epicfailname": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedEntry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(editedEntry).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEntry);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.setEntry(model.getFilteredEntryList().get(0), editedEntry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry lastEntry \u003d model.getFilteredEntryList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBuilder personInList \u003d new EntryBuilder(lastEntry);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedEntry \u003d personInList.withTitle(VALID_TITLE_BOB).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withTags(VALID_TAG_SCIENCE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).withTags(VALID_TAG_SCIENCE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEntry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.setEntry(lastEntry, editedEntry);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, new EditCommand.EditEntryDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedEntry \u003d model.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEntry);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryInFilteredList \u003d model.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedEntry \u003d new EntryBuilder(entryInFilteredList).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new EditEntryDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEntry);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Model expectedModel \u003d model.clone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.setEntry(model.getFilteredEntryList().get(0), editedEntry);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry firstEntry \u003d model.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(firstEntry).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ENTRY, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // edit entry in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Entry entryInList \u003d model.getListEntryBook().getEntryList().get(INDEX_SECOND_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new EditEntryDescriptorBuilder(entryInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEntryList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                                            .withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                                            .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getListEntryBook().getEntryList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new EditEntryDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand.EditEntryDescriptor copyDescriptor \u003d new EditCommand.EditEntryDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ENTRY, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ENTRY, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ENTRY, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 2,
      "thomastanck": 7,
      "-": 113,
      "epicfailname": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEntryDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EditEntryDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor descriptorWithSameValues \u003d new EditEntryDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor editedAmy \u003d new EditEntryDescriptorBuilder(DESC_AMY).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_AMY).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_AMY).withLink(VALID_LINK_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAmy \u003d new EditEntryDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_SCIENCE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "epicfailname": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FeedCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.FeedCommand.DEFAULT_DESCRIPTION_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.logic.commands.FeedCommand.MESSAGE_FAILURE_NET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.logic.commands.FeedCommand.MESSAGE_FAILURE_XML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.logic.commands.FeedCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.testutil.EntryBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "public class FeedCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private static final String TEST_URL \u003d \"https://cs2103-ay1819s2-w10-1.github.io/main/networktests/rss.xml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private static final String TEST_URL_LOCAL \u003d MainApp.class.getResource(\"/RssFeedTest/rss.xml\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            .toExternalForm();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private static final String MALFORMED_URL \u003d \"notavalidprotocol://malformed.url/invalid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private static final String NOTAFEED_URL \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        \"https://cs2103-ay1819s2-w10-1.github.io/main/networktests/notafeed.notxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     * Generates a list of entries. Based on how the default command works, it has"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     * to be a function that takes in the url."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private static EntryBook getTestEntryBook(String url) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return new EntryBookBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Mahoujin Guru Guru\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/mahoujin-guru-guru.html\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"Anime review 1\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Gamers!\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/gamers.html\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"Anime review 2\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Made in Abyss\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/made-in-abyss.html\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"Anime review n\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Mob Psycho 100\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/mob-psycho.html\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"Anime review\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: New Game!!\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/new-game-2.html\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"Anime revieww\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Saiki Kusuo no Psi-nan\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/saiki-kusuo.html\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"sigh\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Durarara!!\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/durarara.html\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        String.format(DEFAULT_DESCRIPTION_TEXT, url)))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Battle Programmer Shirase\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/bps.html\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"lol\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Re:Zero\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/re_zero.html\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"idk\"))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .withEntry(makeEntryFromRssTriple(\"Anime: Youjo Senki\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"https://blog.GNU.moe/anime/review/youjo_senki.html\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                        \"I like this reviewer\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /** Makes an EntryBook entry from the 3 fields that we are harvesting from RSS. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static Entry makeEntryFromRssTriple(String title, String link, String description) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        return new Entry("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                new Title(title),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new Description(description),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                new Link(link),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                new Address(\"unused\"), // this dummy matches that in FeedCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                Collections.emptySet()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    /** Asserts that executing a FeedCommand with the given url imports the Entry list. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void assertLoadingUrlDisplaysEntryBook(String url, EntryBook expectedDisplayedEntryBook) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, url);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        FeedCommand command \u003d new FeedCommand(url);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        expectedModel.displayEntryBook(expectedDisplayedEntryBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        String firstUrl \u003d \"https://open.kattis.com/rss/new-problems\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        String secondUrl \u003d \"https://en.wikipedia.org/w/index.php?title\u003dSpecial:RecentChanges\u0026feed\u003drss\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        FeedCommand feedFirstCommand \u003d new FeedCommand(firstUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        FeedCommand feedSecondCommand \u003d new FeedCommand(secondUrl);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(feedFirstCommand.equals(feedFirstCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        FeedCommand feedFirstCommandCopy \u003d new FeedCommand(firstUrl);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(feedFirstCommand.equals(feedFirstCommandCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(feedFirstCommand.equals(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(feedFirstCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(feedFirstCommand.equals(feedSecondCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void execute_localUrl_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertLoadingUrlDisplaysEntryBook(TEST_URL_LOCAL, getTestEntryBook(TEST_URL_LOCAL));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void execute_remoteUrl_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertLoadingUrlDisplaysEntryBook(TEST_URL, getTestEntryBook(TEST_URL));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void execute_malformedUrlGiven_commandFails() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FAILURE_NET,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                \"java.net.MalformedURLException: unknown protocol: notavalidprotocol\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        FeedCommand command \u003d new FeedCommand(MALFORMED_URL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void execute_urlIsNotAFeed_commandFails() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FAILURE_XML, NOTAFEED_URL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        FeedCommand command \u003d new FeedCommand(NOTAFEED_URL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 151,
      "epicfailname": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model expectedModel \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEntryList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.updateFilteredEntryList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredEntryList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private TitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3,
      "-": 62,
      "epicfailname": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model expectedModel \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model expectedModel \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3,
      "-": 27,
      "epicfailname": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Model expectedModel \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_ENTRY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredEntryList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getListEntryBook().getEntryList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_ENTRY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and checks that the model\u0027s selected entry is set to the entry at {@code index} in the filtered entry list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.setSelectedEntry(model.getFilteredEntryList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 1,
      "thomastanck": 3,
      "-": 83,
      "epicfailname": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewModeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.mocks.TypicalModelManagerStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewModeCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public class ViewModeCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private Model model \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private Model expectedModel \u003d new TypicalModelManagerStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void execute_viewMode_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        for (ViewMode viewMode: ViewMode.values()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            assertExecutionSuccess(viewMode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand viewModeFirstCommand \u003d new ViewModeCommand(ViewMode.values()[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand viewModeSecondCommand \u003d new ViewModeCommand(ViewMode.values()[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(viewModeFirstCommand, viewModeFirstCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand viewModeFirstCommandCopy \u003d new ViewModeCommand(ViewMode.values()[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(viewModeFirstCommand, viewModeFirstCommandCopy);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertNotEquals(viewModeFirstCommand, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertNotEquals(viewModeFirstCommand, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertNotEquals(viewModeFirstCommand, viewModeSecondCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Executes a {@code ViewModeCommand} with the given {@code viewMode},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * and checks that the model\u0027s view mode is set to the specified {@code viewMode}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void assertExecutionSuccess(ViewMode viewMode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand viewModeCommand \u003d new ViewModeCommand(viewMode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String expectedMessage \u003d String.format(ViewModeCommand.MESSAGE_SET_VIEW_MODE_SUCCESS, viewMode.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedModel.setViewMode(viewMode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandSuccess(viewModeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /* code snippet for future use"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Executes a {@code ViewModeCommand} with the given {@code viewMode}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void assertExecutionFailure(ViewMode viewMode, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand viewModeCommand \u003d new ViewModeCommand(viewMode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandFailure(viewModeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(BOB).withTags(VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH, new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH, new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_AMY + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH, new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_AMY + LINK_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH, new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH, new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry expectedEntryMultipleTags \u003d new EntryBuilder(BOB).withTags(VALID_TAG_TECH, VALID_TAG_SCIENCE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_SCIENCE + TAG_DESC_TECH, new AddCommand(expectedEntryMultipleTags));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + LINK_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new AddCommand(expectedEntry));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // missing link prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + VALID_LINK_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // To be deprecated"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + VALID_DESCRIPTION_BOB + LINK_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + VALID_DESCRIPTION_BOB + VALID_LINK_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_SCIENCE + TAG_DESC_TECH, Title.formExceptionMessage(INVALID_TITLE.trim()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + INVALID_DESCRIPTION_DESC + LINK_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_SCIENCE + TAG_DESC_TECH, Description.formExceptionMessage(INVALID_DESCRIPTION.trim()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + INVALID_LINK_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_SCIENCE + TAG_DESC_TECH, Link.formExceptionMessage(INVALID_LINK.trim()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_SCIENCE + TAG_DESC_TECH, Address.formExceptionMessage(INVALID_ADDRESS.trim()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INVALID_TAG_DESC, Tag.formExceptionMessage(INVALID_TAG.trim()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_BOB + LINK_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                Title.formExceptionMessage(INVALID_TITLE.trim()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_SCIENCE + TAG_DESC_TECH,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "epicfailname": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ENTRY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "epicfailname": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String TAG_EMPTY_DESC \u003d \" \" + PREFIX_TAG + \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + INVALID_TITLE_DESC, Title.formExceptionMessage(INVALID_TITLE.trim())); // invalid title"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + INVALID_DESCRIPTION_DESC, Description.formExceptionMessage(INVALID_DESCRIPTION.trim())); // invalid desc"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + INVALID_LINK_DESC, Link.formExceptionMessage(INVALID_LINK.trim())); // invalid link"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + INVALID_ADDRESS_DESC, Address.formExceptionMessage(INVALID_ADDRESS.trim())); // invalid address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + INVALID_TAG_DESC, Tag.formExceptionMessage(INVALID_TAG.trim())); // invalid tag"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid description followed by valid link"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + INVALID_DESCRIPTION_DESC + LINK_DESC_AMY, Description.formExceptionMessage(INVALID_DESCRIPTION.trim()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid description followed by invalid description."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // The test case for invalid description followed by valid description"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + DESCRIPTION_DESC_BOB + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Description.formExceptionMessage(INVALID_DESCRIPTION.trim()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Entry} being edited,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + TAG_DESC_TECH + TAG_DESC_SCIENCE + TAG_EMPTY_DESC, Tag.formExceptionMessage(\"\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + TAG_DESC_TECH + TAG_EMPTY_DESC + TAG_DESC_SCIENCE, Tag.formExceptionMessage(\"\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + TAG_EMPTY_DESC + TAG_DESC_TECH + TAG_DESC_SCIENCE, Tag.formExceptionMessage(\"\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"1\" + INVALID_TITLE_DESC + INVALID_LINK_DESC + VALID_ADDRESS_AMY + VALID_DESCRIPTION_AMY,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                Title.formExceptionMessage(INVALID_TITLE.trim()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BOB + TAG_DESC_SCIENCE"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + LINK_DESC_AMY + ADDRESS_DESC_AMY + TITLE_DESC_AMY + TAG_DESC_TECH;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).withLink(VALID_LINK_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withTags(VALID_TAG_SCIENCE, VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BOB + LINK_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withLink(VALID_LINK_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ENTRY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withTitle(VALID_TITLE_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor \u003d new EditEntryDescriptorBuilder().withDescription(VALID_DESCRIPTION_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LINK_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor \u003d new EditEntryDescriptorBuilder().withLink(VALID_LINK_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor \u003d new EditEntryDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TECH;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor \u003d new EditEntryDescriptorBuilder().withTags(VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_AMY + ADDRESS_DESC_AMY + LINK_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_TECH + DESCRIPTION_DESC_AMY + ADDRESS_DESC_AMY + LINK_DESC_AMY + TAG_DESC_TECH"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + DESCRIPTION_DESC_BOB + ADDRESS_DESC_BOB + LINK_DESC_BOB + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withLink(VALID_LINK_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_TECH, VALID_TAG_SCIENCE)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DESCRIPTION_DESC + DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                                            .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                                            .build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LINK_DESC_BOB + INVALID_DESCRIPTION_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor \u003d new EditEntryDescriptorBuilder().withDescription(VALID_DESCRIPTION_BOB).withLink(VALID_LINK_BOB)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ENTRY;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY_DESC;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 129,
      "epicfailname": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EntryBookArchivesParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBookArchivesParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final EntryBookArchivesParser parser \u003d new EntryBookArchivesParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_unarchive() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        UnarchiveCommand command \u003d (UnarchiveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            UnarchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new UnarchiveCommand(INDEX_FIRST_ENTRY), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EntryBookListParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ArchivesCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.logic.commands.FeedCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.ViewModeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EditEntryDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBookListParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final EntryBookListParser parser \u003d new EntryBookListParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(EntryUtil.getAddCommand(entry));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new AddCommand(entry), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        AddCommand aliasCommand \u003d (AddCommand) parser.parseCommand(EntryUtil.getAddAliasCommand(entry));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new AddCommand(entry), aliasCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_archive() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ArchiveCommand command \u003d (ArchiveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            ArchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new ArchiveCommand(INDEX_FIRST_ENTRY), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseCommand_archives() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivesCommand.COMMAND_WORD) instanceof ArchivesCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivesCommand.COMMAND_WORD + \" 3\") instanceof ArchivesCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivesCommand.COMMAND_ALIAS) instanceof ArchivesCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivesCommand.COMMAND_ALIAS + \" 3\") instanceof ArchivesCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ENTRY), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(entry).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INDEX_FIRST_ENTRY.getOneBased() + \" \" + EntryUtil.getEditEntryDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ENTRY, descriptor), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        EditCommand aliasCommand \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INDEX_FIRST_ENTRY.getOneBased() + \" \" + EntryUtil.getEditEntryDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ENTRY, descriptor), aliasCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void parseCommand_feed() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(parser.parseCommand(FeedCommand.COMMAND_WORD + \" https://url.com/a.xml\") instanceof FeedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new FindCommand(new TitleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        FindCommand aliasCommand \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new FindCommand(new TitleContainsKeywordsPredicate(keywords)), aliasCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_ENTRY), command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        SelectCommand aliasCommand \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_ENTRY.getOneBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_ENTRY), aliasCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand command \u003d (ViewModeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                ViewModeCommand.COMMAND_WORD + \" \" + ViewMode.values()[0].toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(new ViewModeCommand(ViewMode.values()[0]), command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand aliasCommand \u003d (ViewModeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                ViewModeCommand.COMMAND_ALIAS + \" \" + ViewMode.values()[1].toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(new ViewModeCommand(ViewMode.values()[1]), aliasCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 12,
      "qjqqyy": 6,
      "thomastanck": 11,
      "-": 108,
      "epicfailname": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FeedCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import seedu.address.logic.commands.FeedCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "public class FeedCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private static final String TEST_URL \u003d \"https://open.kattis.com/rss/new-problems\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private FeedCommandParser parser \u003d new FeedCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void parse_validArgs_returnsFeedCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertParseSuccess(parser, TEST_URL, new FeedCommand(TEST_URL));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    // Invalid URLs will only get caught when we attempt to connect, which is during command execution, so not"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    // covered in here."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FeedCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new FindCommand(new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "epicfailname": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "// No longer valid with the optionality of the (invisible) address field"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "// import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String INVALID_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String INVALID_LINK \u003d \"example.com\"; // No protocol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Rachel Walker voted prettiest girl on earth!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String VALID_COMMENT \u003d \"But is she really a girl?\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String VALID_LINK \u003d \"https://rachel.example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(INDEX_FIRST_ENTRY, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(INDEX_FIRST_ENTRY, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(Optional.of(INVALID_TITLE)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseTitle_emptyValue_returnsDefaultTitle() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Title expectedTitle \u003d new Title(Title.DEFAULT_TITLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(Optional.empty()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(Optional.of(VALID_TITLE)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(Optional.of(titleWithWhitespace)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(Optional.of(INVALID_DESCRIPTION)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseDescription_emptyValue_returnsDefaultDescription() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Description expectedDescription \u003d new Description(Description.DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(Optional.empty()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_COMMENT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(Optional.of(VALID_COMMENT)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_COMMENT + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_COMMENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(Optional.of(descriptionWithWhitespace)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // No longer valid with the optionality of the (invisible) address field"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseAddress_emptyValue_returnsDefaultAddress() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Address expectedAddress \u003d new Address(Address.DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(Optional.empty()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseLink_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLink((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseLink_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseLink(Optional.of(INVALID_LINK)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseLink_emptyValue_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseLink(Optional.empty()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseLink_validValueWithoutWhitespace_returnsLink() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Link expectedLink \u003d new Link(VALID_LINK);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedLink, ParserUtil.parseLink(Optional.of(VALID_LINK)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void parseLink_validValueWithWhitespace_returnsTrimmedLink() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String linkWithWhitespace \u003d WHITESPACE + VALID_LINK + WHITESPACE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Link expectedLink \u003d new Link(VALID_LINK);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedLink, ParserUtil.parseLink(Optional.of(linkWithWhitespace)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 171,
      "epicfailname": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_ENTRY));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "epicfailname": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewModeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.ViewModeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.ui.ViewMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public class ViewModeCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private ViewModeCommandParser parser \u003d new ViewModeCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                \"     \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        ViewModeCommand expectedViewModeCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                new ViewModeCommand(ViewMode.BROWSER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertParseSuccess(parser, \"browser\", expectedViewModeCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertParseSuccess(parser, \" browser   \", expectedViewModeCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                \"nonsense\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/mocks/ModelManagerStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "package seedu.address.mocks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " * A mock to create an empty ModelManager for testing purposes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public class ModelManagerStub extends ModelManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public ModelManagerStub() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        super(new EntryBook(), new UserPrefs(), new StorageStub());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/mocks/StorageStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "package seedu.address.mocks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " * A mock for Storage for ease of creating objects in tests"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public class StorageStub implements Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Do nothing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003e readAddressBook() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003e readAddressBook(Path filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void saveAddressBook(ReadOnlyEntryBook addressBook) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Do nothing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void saveAddressBook(ReadOnlyEntryBook addressBook, Path filePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Do nothing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticleDataDirectoryPath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Optional\u003cPath\u003e addArticle(String url, byte[] content) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public Path getArticlePath(String url) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/mocks/TypicalModelManagerStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "package seedu.address.mocks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalEntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " * A mock to create a ModelManager initialised with typical entries."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public class TypicalModelManagerStub extends ModelManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public TypicalModelManagerStub() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        super(getTypicalEntryBook(), new UserPrefs(), new StorageStub());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 15,
      "epicfailname": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/EntryBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalEntryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final EntryBook addressBook \u003d new EntryBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getEntryList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook newData \u003d getTypicalEntryBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Two entries with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SCIENCE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e newEntries \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBookStub newData \u003d new EntryBookStub(newEntries);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(DuplicateEntryException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        addressBook.addEntry(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        addressBook.addEntry(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SCIENCE)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        addressBook.getEntryList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        addressBook.addEntry(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        addressBook.addEntry(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * A stub ReadOnlyEntryBook whose entries list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static class EntryBookStub implements ReadOnlyEntryBook {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        private final ObservableList\u003cEntry\u003e entries \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBookStub(Collection\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            this.entries.setAll(entries);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        public ObservableList\u003cEntry\u003e getEntryList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return entries;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 4,
      "-": 113,
      "epicfailname": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.WIKIPEDIA_LINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.StorageStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBookBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManagerStub();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertEquals(new EntryBook(), new EntryBook(modelManager.getListEntryBook()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(null, modelManager.getSelectedEntry());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        userPrefs.setArticleDataDirectoryPath(Paths.get(\"article/data/directory/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        userPrefs.setArticleDataDirectoryPath(Paths.get(\"new/article/data/directory/path\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void setEntryBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setEntryBookFilePath(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void setEntryBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setEntryBookFilePath(path);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(path, modelManager.getEntryBookFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void setArticleDataDirectoryPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        modelManager.setArticleDataDirectoryPath(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void setArticleDataDirectoryPath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Path path \u003d Paths.get(\"article/data/directory/path\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        modelManager.setArticleDataDirectoryPath(path);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertEquals(path, modelManager.getArticleDataDirectoryPath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void hasEntry_nullEntry_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.hasEntry(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void hasEntry_entryNotInEntryBook_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(modelManager.hasEntry(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void hasEntry_entryInEntryBook_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.addEntry(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(modelManager.hasEntry(ALICE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void deleteEntry_entryIsSelectedAndFirstEntryInFilteredEntryList_selectionCleared() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.addEntry(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setSelectedEntry(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.deleteEntry(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(null, modelManager.getSelectedEntry());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void deleteEntry_entryIsSelectedAndSecondEntryInFilteredEntryList_firstEntrySelected() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.addEntry(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.addEntry(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredEntryList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setSelectedEntry(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.deleteEntry(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedEntry());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void setEntry_entryIsSelected_selectedEntryUpdated() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.addEntry(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setSelectedEntry(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry updatedAlice \u003d new EntryBuilder(ALICE).withLink(VALID_LINK_BOB).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setEntry(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedEntry());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void getFilteredEntryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.getFilteredEntryList().remove(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void setSelectedEntry_entryNotInFilteredEntryList_throwsEntryNotFoundException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(EntryNotFoundException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setSelectedEntry(ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public void setSelectedEntry_entryInFilteredEntryList_setsSelectedEntry() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.addEntry(ALICE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredEntryList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.setSelectedEntry(ALICE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedEntry());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        EntryBook entryBook \u003d new EntryBookBuilder().withEntry(ALICE).withEntry(BENSON).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        EntryBook differentEntryBook \u003d new EntryBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        modelManager \u003d new ModelManager(entryBook, userPrefs, storage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(entryBook, userPrefs, storage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        // different entryBook -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentEntryBook, userPrefs, storage)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String[] keywords \u003d ALICE.getTitle().fullTitle.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        modelManager.updateFilteredEntryList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(entryBook, userPrefs, storage)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        modelManager.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(entryBook, differentUserPrefs, storage)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        UserPrefs differentUserPrefs2 \u003d new UserPrefs();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        differentUserPrefs2.setArticleDataDirectoryPath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(entryBook, differentUserPrefs2, storage)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        // different displayedEntryList -\u003e returns false"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        EntryBook differentDisplayedEntryBook \u003d new EntryBookBuilder().withEntry(WIKIPEDIA_LINK).build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        ModelManager differentDisplayedModelManager \u003d new ModelManager(entryBook, userPrefs, storage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        differentDisplayedModelManager.displayEntryBook(differentDisplayedEntryBook);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(modelManager.equals(differentDisplayedModelManager));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 30,
      "thomastanck": 23,
      "-": 132,
      "epicfailname": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void setArticleDataDirectoryPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setArticleDataDirectoryPath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entry/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidUserInputAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidUserInputAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Address.isValidUserInputAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Address.isValidUserInputAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Address.isValidUserInputAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Address.isValidUserInputAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Address.isValidUserInputAddress("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidConstructionAddress() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidConstructionAddress(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Address.isValidConstructionAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Address.isValidConstructionAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Address.isValidConstructionAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Address.isValidConstructionAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Address.isValidConstructionAddress("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "epicfailname": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entry/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String invalidDescription \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidUserInputDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidUserInputDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Description.isValidUserInputDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Description.isValidUserInputDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"comment\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"comment comment\")); // non-numeric with spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"comment?\")); // non-numeric with symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"comment@\")); // non-numeric with symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"comment!\")); // non-numeric with symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"comment-comment\")); // non-numeric with spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"93121534\")); // numeric"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"9312153asd4asd219\")); // alphanumeric"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription(\"9312153asd4 asd219\")); // alphanumeric"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidUserInputDescription("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"Five reasons why your best-friend is eating grass. 3# will shock you!\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidConstructionDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidConstructionDescription(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Description.isValidConstructionDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"comment\")); // non-numeric"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"comment comment\")); // non-numeric with spaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"comment?\")); // non-numeric with symbols"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"comment@\")); // non-numeric with symbols"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"comment!\")); // non-numeric with symbols"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"comment-comment\")); // non-numeric with spaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"93121534\")); // numeric"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"9312153asd4asd219\")); // alphanumeric"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription(\"9312153asd4 asd219\")); // alphanumeric"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Description.isValidConstructionDescription("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"Five reasons why your best-friend is eating grass. 3# will shock you!\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entry/EntryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entry.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isSameEntry() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(ALICE.isSameEntry(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(ALICE.isSameEntry(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different link -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedAlice \u003d new EntryBuilder(ALICE).withLink(VALID_LINK_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(ALICE.isSameEntry(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same link, different description -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(ALICE.isSameEntry(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same link, different title -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(ALICE.isSameEntry(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same link, different description and title -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withTitle(VALID_TITLE_BOB).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(ALICE.isSameEntry(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same link, different tags -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withTags(VALID_TAG_SCIENCE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(ALICE.isSameEntry(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry aliceCopy \u003d new EntryBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedAlice \u003d new EntryBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withLink(VALID_LINK_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedAlice \u003d new EntryBuilder(ALICE).withTags(VALID_TAG_SCIENCE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "epicfailname": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entry/LinkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class LinkTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Link(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void constructor_invalidLink_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String invalidLink \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Link(invalidLink));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidUserInputEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Link.isValidUserInputLink(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"peterjack.com\")); // no protocol"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"htps://peterjack.com\")); // invalid protocol"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peterjack.example.com.\")); // invalid ending character"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peter jack.example.com\")); // spaces in sub-domain"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peterjack.exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\" https://peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Legacy tests"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidUserInputLink(\"https://peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid link"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"http://peterJack_1190.example.com\")); // https protocol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://peterJack_1190.example.com\")); // https protocol"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://peterJack_1190.example.com:443\")); // with port"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://peterJack_1190.example.com/folder/to/file\")); // with path to file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://www.peterJack_1190.example.com\")); // with www"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"file:///c/Desktop/file.txt\")); // file protocol"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"http://localhost\")); // localhost"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"http://localhost/path/to/file.txt\")); // localhost"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"http://localhost:8080\")); // localhost with port"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://208.67.222.222\")); // IP Address"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://208.67.222.222/path/to/file.txt\")); // IP Address with path"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink(\"https://test.localhost\")); // alphabets only"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"https://a1+be!.example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"https://peter_jack-very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidUserInputLink("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"https://if.you.dream.it_you.can.do.it.example.com\")); // multiple sub-domains"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidConstructionEmail() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Link.isValidConstructionLink(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"\")); // empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\" \")); // spaces only"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"peterjack.com\")); // no protocol"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"htps://peterjack.com\")); // invalid protocol"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peterjack.example.com.\")); // invalid ending character"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peter jack.example.com\")); // spaces in sub-domain"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peterjack.exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\" https://peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Legacy tests"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Link.isValidConstructionLink(\"https://peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"https://!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid link"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"http://peterJack_1190.example.com\")); // https protocol"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"https://peterJack_1190.example.com\")); // https protocol"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"https://peterJack_1190.example.com:443\")); // with port"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"https://peterJack_1190.example.com/folder/to/file\")); // with path to file"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"https://www.peterJack_1190.example.com\")); // with www"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"file:///c/Desktop/file.txt\")); // file protocol"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"file:/c/Desktop/file.txt\")); // file protocol no 2 forward slash"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"http://localhost\")); // localhost"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"http://localhost/path/to/file.txt\")); // localhost"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"http://localhost:8080\")); // localhost with port"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"https://208.67.222.222\")); // IP Address"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"https://208.67.222.222/path/to/file.txt\")); // IP Address with path"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink(\"https://test.localhost\")); // alphabets only"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"https://a1+be!.example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"https://peter_jack-very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Link.isValidConstructionLink("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            \"https://if.you.dream.it_you.can.do.it.example.com\")); // multiple sub-domains"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entry/TitleContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different entry -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(predicate.test(new EntryBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"12345\", \"https://example.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(predicate.test(new EntryBuilder().withTitle(\"Alice\").withDescription(\"12345\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                .withLink(\"https://example.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entry/TitleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String invalidTitle \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidUserInputTitle() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidUserInputTitle(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Title.isValidUserInputTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Title.isValidUserInputTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidUserInputTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidUserInputTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidUserInputTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidUserInputTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidUserInputTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidUserInputTitle(\"David Roger Jackson Ray Jr 2nd\")); // long titles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void isValidConstructionTitle() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidConstructionTitle(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(Title.isValidConstructionTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidConstructionTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidConstructionTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidConstructionTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidConstructionTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidConstructionTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidConstructionTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(Title.isValidConstructionTitle(\"David Roger Jackson Ray Jr 2nd\")); // long titles"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/entry/UniqueEntryListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.model.entry;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class UniqueEntryListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final UniqueEntryList uniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(uniqueEntryList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(uniqueEntryList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SCIENCE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(uniqueEntryList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(DuplicateEntryException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(EntryNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedUniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedAlice \u003d new EntryBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SCIENCE)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedUniqueEntryList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedUniqueEntryList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(DuplicateEntryException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(EntryNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.remove(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.remove(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPersons((UniqueEntryList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedUniqueEntryList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPersons(expectedUniqueEntryList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPersons((List\u003cEntry\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.add(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e entryList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPersons(entryList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedUniqueEntryList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedUniqueEntryList, uniqueEntryList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cEntry\u003e listWithDuplicateEntries \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expect(DuplicateEntryException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.setPersons(listWithDuplicateEntries);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uniqueEntryList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "epicfailname": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/network/NetworkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "package seedu.address.network;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static org.junit.Assert.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static seedu.address.network.Network.fetchAsStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static seedu.address.network.Network.fetchAsString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.FILE_TEST_CONTENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.VALID_FILE_LINK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.VALID_HTTPS_LINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.VALID_HTTP_LINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public class NetworkTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private static final String HTTPS_TEST_URL \u003d VALID_HTTPS_LINK.getLink().value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private static final String HTTP_TEST_URL \u003d VALID_HTTP_LINK.getLink().value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private static final String FILE_TEST_URL \u003d VALID_FILE_LINK.getLink().value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void fetchAsStream_success() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        InputStream httpsContent \u003d fetchAsStream(HTTPS_TEST_URL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        byte[] httpsContentBytes \u003d httpsContent.readAllBytes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(httpsContentBytes.length \u003e 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(new String(httpsContentBytes, StandardCharsets.UTF_8).contains(\"\u003cp\u003eIt works!\u003c/p\u003e\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        InputStream httpContent \u003d fetchAsStream(HTTP_TEST_URL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(httpContent.readAllBytes().length \u003e 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        InputStream localContent \u003d fetchAsStream(FILE_TEST_URL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        byte[] localContentBytes \u003d localContent.readAllBytes();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertTrue(localContentBytes.length \u003e 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertArrayEquals(localContentBytes, FILE_TEST_CONTENTS.getBytes());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void fetchAsStream_invalidUrl_throwsIoexception() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        fetchAsStream(\"https://abc.``ILLEGAL_CHARS.com\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void fetchAsStream_invalidWebsite_throwsIoexception() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        fetchAsStream(\"https://thiswebsite.does.not.exist.definitely\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void fetchAsString_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            String httpsContent \u003d fetchAsString(\"https://cs2103-ay1819s2-w10-1.github.io/main/networktests/\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            assertTrue(httpsContent.length() \u003e 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            assertTrue(httpsContent.contains(\"\u003cp\u003eIt works!\u003c/p\u003e\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            String httpContent \u003d fetchAsString(\"http://cs2103-ay1819s2-w10-1.github.io/main/networktests/\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            assertTrue(httpContent.length() \u003e 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            String localContent \u003d fetchAsString("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                    MainApp.class.getResource(\"/NetworkTest/default.html\").toExternalForm());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            assertTrue(localContent.length() \u003e 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            assertEquals(localContent, FILE_TEST_CONTENTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            fail(\"Fetching valid URL failed.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void fetchAsString_invalidUrl_throwsIoexception() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        fetchAsString(\"https://abc.``ILLEGAL_CHARS.com\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void fetchAsString_invalidWebsite_throwsIoexception() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        fetchAsString(\"https://thiswebsite.does.not.exist.definitely\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 1,
      "thomastanck": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/DataDirectoryArticleStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static org.junit.Assert.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "public class DataDirectoryArticleStorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void addArticle_nullDirectoryPath_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        DataDirectoryArticleStorage ddas \u003d new DataDirectoryArticleStorage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.com\", \"test\".getBytes());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void addArticle_contentSavedAtPathCorrectly() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        DataDirectoryArticleStorage ddas \u003d new DataDirectoryArticleStorage(testFolder.getRoot().toPath());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Save a bunch of articles then fetch them. They shouldn\u0027t overwrite each other."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.com\", \"test1\".getBytes());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.com/article\", \"test2\".getBytes());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.com/article.html\", \"test3\".getBytes());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.io\", \"test4\".getBytes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.io/article\", \"test5\".getBytes());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.io/article.html\", \"test6\".getBytes());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"http://test.io\", \"test7\".getBytes());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"http://test.io/article\", \"test8\".getBytes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"http://test.io/article.html\", \"test9\".getBytes());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.com\", \"test1\".getBytes());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.com/article\", \"test2\".getBytes());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.com/article.html\", \"test3\".getBytes());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.io\", \"test4\".getBytes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.io/article\", \"test5\".getBytes());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.io/article.html\", \"test6\".getBytes());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"http://test.io\", \"test7\".getBytes());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"http://test.io/article\", \"test8\".getBytes());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"http://test.io/article.html\", \"test9\".getBytes());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void addArticle_addingTwiceOverwritesContent() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        DataDirectoryArticleStorage ddas \u003d new DataDirectoryArticleStorage(testFolder.getRoot().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        // Save a bunch of articles then fetch them. They shouldn\u0027t overwrite each other."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.com\", \"test1\".getBytes());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.com\", \"test1\".getBytes());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ddas.addArticle(\"https://test.com\", \"test2\".getBytes());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertFetchSuccess(ddas, \"https://test.com\", \"test2\".getBytes());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     * Checks that the content saved for the URL matches."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private void assertFetchSuccess(DataDirectoryArticleStorage ddas, String url, byte[] content) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Path savedLocation \u003d ddas.getArticlePath(url);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertArrayEquals(Files.readAllBytes(savedLocation), content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEntryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.storage.JsonAdaptedEntry.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class JsonAdaptedEntryTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String INVALID_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String INVALID_LINK \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private static final String INVALID_OFFLINE_LINK \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String VALID_TITLE \u003d BENSON.getTitle().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final String VALID_LINK \u003d BENSON.getLink().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    private static final String VALID_OFFLINE_LINK \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void toModelType_validEntryDetails_returnsEntry() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(BENSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(BENSON, entry.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                new JsonAdaptedEntry("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        INVALID_TITLE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_LINK,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_ADDRESS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d Title.formExceptionMessage(INVALID_TITLE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_LINK,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_LINK,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_ADDRESS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d Description.formExceptionMessage(INVALID_DESCRIPTION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_LINK,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void toModelType_invalidLink_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        INVALID_LINK,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_ADDRESS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d Link.formExceptionMessage(INVALID_LINK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void toModelType_nullLink_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Link.class.getSimpleName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void toModelType_invalidOfflineLink_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_LINK,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        INVALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_ADDRESS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        String expectedMessage \u003d Link.formExceptionMessage(INVALID_OFFLINE_LINK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void toModelType_nullOfflineLink_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_LINK,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_ADDRESS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Link.class.getSimpleName());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_LINK,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        INVALID_ADDRESS,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedMessage \u003d Address.formExceptionMessage(INVALID_ADDRESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_LINK,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonAdaptedEntry entry \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                new JsonAdaptedEntry(VALID_TITLE,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_LINK,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_OFFLINE_LINK,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        VALID_ADDRESS,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "                        invalidTags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, entry::toModelType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 83,
      "-": 58,
      "epicfailname": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonEntryBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalEntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class JsonEntryBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEntryBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEntryBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new JsonEntryBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        readAddressBook(\"notJsonFormatEntryBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        readAddressBook(\"invalidEntryEntryBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        readAddressBook(\"invalidAndValidEntryEntryBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook original \u003d getTypicalEntryBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonEntryBookStorage jsonAddressBookStorage \u003d new JsonEntryBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ReadOnlyEntryBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(original, new EntryBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        original.addEntry(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(original, new EntryBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        original.addEntry(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(original, new EntryBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void saveAddressBook(ReadOnlyEntryBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            new JsonEntryBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        saveAddressBook(new EntryBook(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 2,
      "-": 100,
      "epicfailname": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableEntryBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class JsonSerializableEntryBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableEntryBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEntryEntryBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEntryEntryBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEntryEntryBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonSerializableEntryBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                JsonSerializableEntryBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook typicalPersonsAddressBook \u003d TypicalEntries.getTypicalEntryBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonSerializableEntryBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                JsonSerializableEntryBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonSerializableEntryBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                JsonSerializableEntryBook.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        thrown.expectMessage(JsonSerializableEntryBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "epicfailname": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        userPrefs.setArticleDataDirectoryPath(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalEntryBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        JsonEntryBookStorage addressBookStorage \u003d new JsonEntryBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        ArticleStorage articleStorage \u003d new DataDirectoryArticleStorage(getTempFilePath(\"articles\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, articleStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "         * {@link JsonEntryBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonEntryBookStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook original \u003d getTypicalEntryBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ReadOnlyEntryBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(original, new EntryBook(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void articleStorageReadSave() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "         * {@link DataDirectoryArticleStorage} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "         * More extensive testing of article saving/reading is done in {@link DataDirectoryArticleStorageTest} class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        String testUrl \u003d \"https://test.url\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        byte[] testContent \u003d \"test content\".getBytes();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        storageManager.addArticle(testUrl, testContent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        Path savedArticlePath \u003d storageManager.getArticlePath(testUrl);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertArrayEquals(Files.readAllBytes(savedArticlePath), testContent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public void getArticleDataDirectoryPath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertNotNull(storageManager.getArticleDataDirectoryPath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 21,
      "-": 62,
      "epicfailname": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditEntryDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A utility class to help with building EditEntryDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EditEntryDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private EditCommand.EditEntryDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor \u003d new EditCommand.EditEntryDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder(EditCommand.EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.descriptor \u003d new EditEntryDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns an {@code EditEntryDescriptor} with fields containing {@code entry}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder(Entry entry) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor \u003d new EditCommand.EditEntryDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setTitle(entry.getTitle());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setDescription(entry.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setLink(entry.getLink());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setAddress(entry.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setTags(entry.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Title} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Description} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Link} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder withLink(String link) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.setLink(new Link(link));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Address} of the {@code EditEntryDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditEntryDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditEntryDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EditCommand.EditEntryDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "epicfailname": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EntryBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": " *     {@code EntryBook ab \u003d new EntryBookBuilder().withEntry(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private EntryBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        addressBook \u003d new EntryBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBookBuilder(EntryBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Adds a new {@code Entry} to the {@code EntryBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    public EntryBookBuilder withEntry(Entry entry) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        addressBook.addEntry(entry);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 3,
      "epicfailname": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EntryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A utility class to help with building Entry objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_LINK \u003d \"https://alice.gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Link link;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        link \u003d new Link(DEFAULT_LINK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Initializes the EntryBuilder with the data of {@code entryToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBuilder(Entry entryToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        title \u003d entryToCopy.getTitle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        description \u003d entryToCopy.getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        link \u003d entryToCopy.getLink();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        address \u003d entryToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(entryToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Title} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Entry} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Address} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Description} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Sets the {@code Link} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryBuilder withLink(String link) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        this.link \u003d new Link(link);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public Entry build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new Entry(title, description, link, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EntryUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditEntryDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A utility class for Entry."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns an add command string for adding the {@code entry}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String getAddCommand(Entry entry) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getEntryDetails(entry);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns an add command string using alias for adding the {@code entry}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String getAddAliasCommand(Entry entry) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return AddCommand.COMMAND_ALIAS + \" \" + getEntryDetails(entry);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the part of command string for the given {@code entry}\u0027s details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String getEntryDetails(Entry entry) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        sb.append(PREFIX_TITLE + entry.getTitle().fullTitle + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + entry.getDescription().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        sb.append(PREFIX_LINK + entry.getLink().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        sb.append(PREFIX_ADDRESS + entry.getAddress().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entry.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the part of command string for the given {@code EditEntryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static String getEditEntryDescriptorDetails(EditEntryDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.getTitle().ifPresent(name -\u003e sb.append(PREFIX_TITLE).append(name.fullTitle).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.getDescription().ifPresent(phone -\u003e sb.append(PREFIX_DESCRIPTION).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        descriptor.getLink().ifPresent(email -\u003e sb.append(PREFIX_LINK).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 4,
      "-": 40,
      "epicfailname": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the middle index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEntryList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the last index of the entry in the {@code model}\u0027s entry list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns the entry in the {@code model}\u0027s entry list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static Entry getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return model.getFilteredEntryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "epicfailname": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEntries.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A utility class containing a list of {@code Entry} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry ALICE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://alice.example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry BENSON \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://johnd.example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry CARL \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Carl Kurz\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://heinz.example.com\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry DANIEL \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Daniel Meier\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://cornelia.example.com\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry ELLE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Elle Meyer\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://werner.example.com\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry FIONA \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://lydia.example.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry GEORGE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"George Best\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://anna.example.com\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry HOON \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Hoon Meier\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://stefan.example.com\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"little india\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry IDA \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(\"Ida Mueller\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Description place-holder\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://hans.example.com\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    // Manually added - Entry\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry AMY \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(VALID_LINK_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTags(VALID_TAG_TECH)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Entry BOB \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(VALID_LINK_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withTags(VALID_TAG_SCIENCE, VALID_TAG_TECH)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    // For AddCommandTest"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String DUMMY_TITLE \u003d \"Dummy Title\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String DUMMY_DESCRIPTION \u003d \"Dummy description\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String STUB_LINK_URL \u003d \"http://www.description.test/title/title_test.html\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String STUB_LINK_TITLE \u003d \"Title Test\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String STUB_LINK_DESCRIPTION \u003d \"www.description.test\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String REAL_LINK_URL \u003d MainApp.class"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .getResource(\"/ModelManagerTest/NUS_School_of_Computing.html\").toExternalForm();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String REAL_LINK_TITLE \u003d \"NUS School of Computing - Wikipedia\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String REAL_LINK_DESCRIPTION \u003d \"NUS School of Computing is a faculty within the National \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            + \"University of Singapore (NUS). The School was established in 1998, although its history reaches…\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String CRUX_LINK_URL \u003d MainApp.class"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .getResource(\"/ModelManagerTest/ProPublica.html\").toExternalForm();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String CRUX_LINK_TITLE \u003d \"Our Reporting on Michael Cohen: A Reading Guide — ProPublica\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String CRUX_LINK_DESCRIPTION \u003d \"This week’s testimony by President Donald Trump’s former \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            + \"personal attorney and fixer held millions rapt with allegations of fraud, coded orders to lie and \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            + \"hundreds of threats. Many of those assertions had been explored before, as these articles show.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry STUB_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(\"\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(STUB_LINK_URL)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry STUB_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(STUB_LINK_TITLE)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(STUB_LINK_DESCRIPTION)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(STUB_LINK_URL)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry STUB_LINK_NO_TITLE_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(\"\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(DUMMY_DESCRIPTION)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(STUB_LINK_URL)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry STUB_LINK_NO_TITLE_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(STUB_LINK_TITLE)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(DUMMY_DESCRIPTION)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(STUB_LINK_URL)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry STUB_LINK_NO_DESCRIPTION_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(DUMMY_TITLE)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(STUB_LINK_URL)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry STUB_LINK_NO_DESCRIPTION_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(DUMMY_TITLE)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(STUB_LINK_DESCRIPTION)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(STUB_LINK_URL)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry REAL_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(\"\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(REAL_LINK_URL)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry REAL_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(REAL_LINK_TITLE)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(REAL_LINK_DESCRIPTION)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(REAL_LINK_URL)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry REAL_LINK_NO_TITLE_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(\"\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(DUMMY_DESCRIPTION)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(REAL_LINK_URL)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry REAL_LINK_NO_TITLE_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(REAL_LINK_TITLE)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(DUMMY_DESCRIPTION)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(REAL_LINK_URL)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry REAL_LINK_NO_DESCRIPTION_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(DUMMY_TITLE)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(REAL_LINK_URL)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry REAL_LINK_NO_DESCRIPTION_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(DUMMY_TITLE)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(REAL_LINK_DESCRIPTION)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(REAL_LINK_URL)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry CRUX_LINK_NO_TITLE_NO_DESCRIPTION_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(\"\")"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(CRUX_LINK_URL)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry CRUX_LINK_NO_TITLE_NO_DESCRIPTION_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(CRUX_LINK_TITLE)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(CRUX_LINK_DESCRIPTION)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(CRUX_LINK_URL)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry CRUX_LINK_NO_TITLE_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(\"\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(DUMMY_DESCRIPTION)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(CRUX_LINK_URL)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry CRUX_LINK_NO_TITLE_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(CRUX_LINK_TITLE)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(DUMMY_DESCRIPTION)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(CRUX_LINK_URL)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry CRUX_LINK_NO_DESCRIPTION_INCOMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(DUMMY_TITLE)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(\"\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(CRUX_LINK_URL)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry CRUX_LINK_NO_DESCRIPTION_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(DUMMY_TITLE)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(CRUX_LINK_DESCRIPTION)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(CRUX_LINK_URL)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry CRUX_LINK_COMPLETE \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withTitle(DUMMY_TITLE)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withDescription(DUMMY_DESCRIPTION)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withLink(CRUX_LINK_URL)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    // For testing of networking"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final Entry VALID_HTTPS_LINK \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withTitle(\"Valid HTTPS Link\")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Valid https link\")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"https://cs2103-ay1819s2-w10-1.github.io/main/networktests/\")"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withAddress(\"Valid https link\")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final Entry VALID_HTTP_LINK \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withTitle(\"Valid HTTP Link\")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withDescription(\"Valid http link\")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"http://cs2103-ay1819s2-w10-1.github.io/main/networktests/\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withAddress(\"Valid http link\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "    public static final Entry VALID_FILE_LINK \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withTitle(\"Valid File Link\")"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withDescription(\"Valid file link\")"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            .withLink(\"file://\" + MainApp.class.getResource("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                    \"/NetworkTest/default.html\").toExternalForm().substring(5))"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withAddress(\"Valid file link\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry INVALID_FILE_LINK \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withTitle(\"Invalid File Link\")"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withDescription(\"Invalid file link\")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withLink(\"file:///folder/file.type\")"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withAddress(\"Invalid file link\")"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String FILE_TEST_CONTENTS \u003d \"\u003c!DOCTYPE html\u003e\\n\u003chtml\u003e\\n\u003c/html\u003e\\n\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    // For BrowserPanelTest"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final Entry WIKIPEDIA_LINK \u003d new EntryBuilder()"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withTitle(\"Wikipedia Test Web Page\")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withDescription(\"Wikipedia test web page\")"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            .withLink(\"file://\" + MainApp.class.getResource("
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                    \"/view/BrowserPanelTest/wikipedia.html\").toExternalForm().substring(5))"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .withAddress(\"Wikipedia test web page\")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public static final String WIKIPEDIA_LINK_BASE_URL \u003d \"http://en.wikipedia.org/wiki/Therapsids\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thomastanck"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private TypicalEntries() {} // prevents instantiation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns an {@code EntryBook} with all the typical persons."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static EntryBook getTypicalEntryBook() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryBook ab \u003d new EntryBook();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "            ab.addEntry(entry);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static List\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 143,
      "qjqqyy": 1,
      "thomastanck": 20,
      "epicfailname": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Index INDEX_FIRST_ENTRY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Index INDEX_SECOND_ENTRY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static final Index INDEX_THIRD_ENTRY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "epicfailname": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.INVALID_FILE_LINK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.VALID_FILE_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.WIKIPEDIA_LINK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.WIKIPEDIA_LINK_BASE_URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.jsoup.Jsoup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.jsoup.nodes.Document;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private SimpleObjectProperty\u003cEntry\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private SimpleObjectProperty\u003cViewMode\u003e viewMode \u003d new SimpleObjectProperty\u003c\u003e(ViewMode.BROWSER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            browserPanel \u003d new BrowserPanel(selectedPerson, viewMode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void displayDefaultPage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void displayCorrectPage() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // associated web page of a entry with valid link"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(VALID_FILE_LINK));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(VALID_FILE_LINK.getLink().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void displayErrorPage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // associated web page of a entry with invalid link"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(INVALID_FILE_LINK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(BrowserPanel.ERROR_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void displayReader() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // load associated web page of a Wikipedia entry"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(WIKIPEDIA_LINK));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // process loaded content through Crux"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String originalHtml \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            originalHtml \u003d XmlUtil.convertDocumentToString(browserPanel.getWebEngine().getDocument());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } catch (TransformerException te) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Document doc \u003d browserPanel.getReaderDocumentFrom(WIKIPEDIA_LINK_BASE_URL, originalHtml);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String expectedText \u003d doc.text();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // set reader mode and reload"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        guiRobot.interact(() -\u003e viewMode.set(ViewMode.READER));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // extract loaded content"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String readerHtml \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            readerHtml \u003d XmlUtil.convertDocumentToString(browserPanel.getWebEngine().getDocument());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        } catch (TransformerException te) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String actualText \u003d Jsoup.parse(readerHtml).text();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // check actual loaded content is the same as expected processed content"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 65,
      "-": 32,
      "epicfailname": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/EntryCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import guitests.guihandles.EntryCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryWithNoTags \u003d new EntryBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryCard entryCard \u003d new EntryCard(entryWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uiPartRule.setUiPart(entryCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCardDisplay(entryCard, entryWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryWithTags \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryCard \u003d new EntryCard(entryWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uiPartRule.setUiPart(entryCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCardDisplay(entryCard, entryWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entry \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryCard entryCard \u003d new EntryCard(entry, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same entry, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryCard copy \u003d new EntryCard(entry, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(entryCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(entryCard.equals(entryCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(entryCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(entryCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // different entry, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry differentEntry \u003d new EntryBuilder().withTitle(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(entryCard.equals(new EntryCard(differentEntry, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // same entry, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(entryCard.equals(new EntryCard(entry, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that {@code entryCard} displays the details of {@code expectedEntry} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertCardDisplay(EntryCard entryCard, Entry expectedEntry, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryCardHandle entryCardHandle \u003d new EntryCardHandle(entryCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", entryCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // verify entry details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCardDisplaysPerson(expectedEntry, entryCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/EntryListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.getTypicalEntries;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import guitests.guihandles.EntryCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import guitests.guihandles.EntryListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class EntryListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final ObservableList\u003cEntry\u003e TYPICAL_ENTRIES \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            FXCollections.observableList(getTypicalEntries());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final SimpleObjectProperty\u003cEntry\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private EntryListPanelHandle entryListPanelHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        initUi(TYPICAL_ENTRIES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ENTRIES.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            entryListPanelHandle.navigateToCard(TYPICAL_ENTRIES.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Entry expectedEntry \u003d TYPICAL_ENTRIES.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            EntryCardHandle actualCard \u003d entryListPanelHandle.getEntryCardHandle(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            assertCardDisplaysPerson(expectedEntry, actualCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        initUi(TYPICAL_ENTRIES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry secondEntry \u003d TYPICAL_ENTRIES.get(INDEX_SECOND_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondEntry));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryCardHandle expectedPerson \u003d entryListPanelHandle.getEntryCardHandle(INDEX_SECOND_ENTRY.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryCardHandle selectedPerson \u003d entryListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code EntryListPanel} requires lesser than"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ObservableList\u003cEntry\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }, \"Creation and deletion of entry cards exceeded time limit\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code EntryListPanel}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private ObservableList\u003cEntry\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        ObservableList\u003cEntry\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Title title \u003d new Title(i + \"a\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Description description \u003d new Description(\"000\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Link link \u003d new Link(\"https://a.aa\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Entry entry \u003d new Entry(title, description, link, address, Collections.emptySet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            backingList.add(entry);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Initializes {@code entryListPanelHandle} with a {@code EntryListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code EntryListPanel}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void initUi(ObservableList\u003cEntry\u003e backingList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        EntryListPanel entryListPanel \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                new EntryListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        uiPartRule.setUiPart(entryListPanel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryListPanelHandle \u003d new EntryListPanelHandle(getChildNode(entryListPanel.getRoot(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                EntryListPanelHandle.ENTRY_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A GUI unit test class for EntryBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "epicfailname": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManagerStub()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 2,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfResultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfResultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        errorStyleOfResultDisplay.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void defaultDisplay_emptyDisplay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void emptyFeedback_emptyDisplay() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackSuccessToUser(\"\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void successfulFeedback() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackSuccessToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStyleForSuccessfulFeedback(resultDisplayHandle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void errorFeedback() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackErrorToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStyleForErrorFeedback(resultDisplayHandle);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void consecutiveFeedBack() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // new error result received"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackErrorToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStyleForErrorFeedback(resultDisplayHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // new error result received"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackErrorToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStyleForErrorFeedback(resultDisplayHandle);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // new success result received"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackSuccessToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStyleForSuccessfulFeedback(resultDisplayHandle);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // new success result received"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackSuccessToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStyleForSuccessfulFeedback(resultDisplayHandle);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // new error result received"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackErrorToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStyleForErrorFeedback(resultDisplayHandle);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertStyleForSuccessfulFeedback(ResultDisplayHandle resultDisplayHandle) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertStyleForErrorFeedback(ResultDisplayHandle resultDisplayHandle) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(errorStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "epicfailname": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TARGET_COUNT_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private final EntryBook addressBook \u003d new EntryBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                addressBook.getEntryList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        int initialTargetCount \u003d addressBook.getEntryList().size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                String.format(TARGET_COUNT_STATUS, initialTargetCount));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addEntry(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                String.format(TARGET_COUNT_STATUS, initialTargetCount + 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                                        String expectedTargetCountStatus) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertEquals(expectedTargetCountStatus, statusBarFooterHandle.getTargetCount());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 10,
      "-": 67,
      "epicfailname": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import guitests.guihandles.EntryCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import guitests.guihandles.EntryListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private static final String LABEL_BASE_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static void assertCardEquals(EntryCardHandle expectedCard, EntryCardHandle actualCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedCard.getLink(), actualCard.getLink());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedCard.getTitle(), actualCard.getTitle());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedEntry}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static void assertCardDisplaysPerson(Entry expectedEntry, EntryCardHandle actualCard) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedEntry.getTitle().fullTitle, actualCard.getTitle());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedEntry.getDescription().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedEntry.getLink().value, actualCard.getLink());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedEntry.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTagsAndTagColorStylesEqual(expectedEntry, actualCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the list in {@code entryListPanelHandle} displays the details of {@code entries} correctly and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static void assertListMatching(EntryListPanelHandle entryListPanelHandle, Entry... entries) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            entryListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            assertCardDisplaysPerson(entries[i], entryListPanelHandle.getEntryCardHandle(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the list in {@code entryListPanelHandle} displays the details of {@code entries} correctly and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static void assertListMatching(EntryListPanelHandle entryListPanelHandle, List\u003cEntry\u003e entries) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertListMatching(entryListPanelHandle, entries.toArray(new Entry[0]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts the size of the list in {@code entryListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static void assertListSize(EntryListPanelHandle entryListPanelHandle, int size) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        int numberOfPeople \u003d entryListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * in {@code EntryCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"pink\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"lightBlue\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"deepOrange\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"gray\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"red\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"amber\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"lightBlue\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            return \"gray\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case \"tech\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return \"cyan\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case \"science\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return \"pink\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case \"nus\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case \"soc\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return \"gray\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case \"engineering\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return \"amber\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case \"award\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return \"gray\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        case \"amazon\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            return \"gray\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedEntry} with the correct"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static void assertTagsAndTagColorStylesEqual(Entry expectedEntry, EntryCardHandle actualCard) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // assert tags equal"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedEntry"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .getTags()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        List\u003cString\u003e actualTags \u003d actualCard.getTags();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertEquals(expectedTags, actualTags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // assert tag color styles correct"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedTags.forEach(tag -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            List\u003cString\u003e expectedTagStyleClasses \u003d Arrays.asList(LABEL_BASE_STYLE, getTagColorStyleFor(tag));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            List\u003cString\u003e actualTagStyleClasses \u003d actualCard.getTagStyleClasses(tag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            assertEquals(expectedTagStyleClasses, actualTagStyleClasses);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 64,
      "-": 48,
      "epicfailname": 50
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.ALICE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CARL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.HOON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.IDA;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a entry without tags to a non-empty entry book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry toAdd \u003d AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + TITLE_DESC_AMY + \"  \" + DESCRIPTION_DESC_AMY + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + LINK_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_TECH + \" \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a entry with all fields same as another entry in the entry book except link -\u003e added */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        toAdd \u003d new EntryBuilder(AMY).withLink(VALID_LINK_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + LINK_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_TECH;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // Deprecated"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a entry with all fields same as another entry in the entry book except description and link"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        toAdd \u003d new EntryBuilder(AMY).withDescription(VALID_DESCRIPTION_BOB).withLink(VALID_LINK_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EntryUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add to empty entry book -\u003e added */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a entry with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_TECH + DESCRIPTION_DESC_BOB + ADDRESS_DESC_BOB + TITLE_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TAG_DESC_SCIENCE + LINK_DESC_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a entry, missing tags -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: filters the entry list before adding -\u003e added */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* ------------------------ Perform add operation while a entry card is selected --------------------------- */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: selects first card in the entry list, add a entry -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a duplicate entry -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EntryUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a duplicate entry except with different description -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        toAdd \u003d new EntryBuilder(HOON).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EntryUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a duplicate entry except with different title -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        toAdd \u003d new EntryBuilder(HOON).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EntryUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: add a duplicate entry except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EntryUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: missing link -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // To be deprecated"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: missing name -\u003e rejected"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + DESCRIPTION_DESC_AMY + LINK_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: missing phone -\u003e rejected"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + LINK_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: missing address -\u003e rejected"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + LINK_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d \"adds \" + EntryUtil.getEntryDetails(toAdd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid title -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_TITLE_DESC"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + DESCRIPTION_DESC_AMY + LINK_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(command, Title.formExceptionMessage(INVALID_TITLE.trim()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + TITLE_DESC_AMY + LINK_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(command, Description.formExceptionMessage(INVALID_DESCRIPTION.trim()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid link -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_LINK_DESC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "             + TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(command, Link.formExceptionMessage(INVALID_LINK.trim()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid address -\u003e rejected"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "             + TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + LINK_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_AMY + DESCRIPTION_DESC_AMY + LINK_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(command, Tag.formExceptionMessage(INVALID_TAG.trim()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: using alias to add a entry without tags to a non-empty entry book -\u003e added */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_ALIAS + \"  \" + TITLE_DESC_AMY + \"  \" + DESCRIPTION_DESC_AMY + \" \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + LINK_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_TECH + \" \";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, AMY);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: command with leading spaces and trailing spaces -\u003e added */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + TITLE_DESC_BOB + \"  \" + DESCRIPTION_DESC_BOB + \" \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + LINK_DESC_BOB + \"   \" + ADDRESS_DESC_BOB + \"   \" + TAG_DESC_TECH + \"   \" + TAG_DESC_SCIENCE + \" \";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, BOB);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 4. {@code Storage} and {@code EntryListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertCommandSuccess(Entry toAdd) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(EntryUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Entry)}. Executes {@code command}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Entry)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertCommandSuccess(String command, Entry toAdd) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.addEntry(toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Entry)} except asserts that"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 2. {@code Storage} and {@code EntryListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Entry)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatusExcludingCount();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 4. {@code Storage} and {@code EntryListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 5. Browser url, selected card and status bar excluding count remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 1,
      "-": 135,
      "epicfailname": 123
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import guitests.guihandles.EntryListPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": " * A system test class for EntryBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final List\u003cString\u003e RESULT_DISPLAY_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                                                                   \"text-area\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                                                                                   \"result-display\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final List\u003cString\u003e RESULT_DISPLAY_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-area\", \"result-display\", ResultDisplay.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected EntryBook getInitialData() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return TypicalEntries.getTypicalEntryBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public EntryListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return mainWindowHandle.getEntryListPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertEquals(getModel().getListEntryBook().getEntryList().size(), getModel().getFilteredEntryList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(getModel().getFilteredEntryList().size() \u003c getModel().getListEntryBook().getEntryList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Selects the entry at {@code index} of the displayed list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertEquals(0, getModel().getListEntryBook().getEntryList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same entry objects as {@code expectedModel}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and the entry list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertEquals(new EntryBook(expectedModel.getListEntryBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(expectedModel.getContext(), testApp.getModel().getContext());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredEntryList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code EntryListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        getPersonListPanel().rememberSelectedEntryCard();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the entry in the entry list panel at"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see EntryListPanelHandle#isSelectedEntryCardChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String selectedCardLink \u003d getPersonListPanel().getHandleToSelectedCard().getLink();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rlrh"
        },
        "content": "            expectedUrl \u003d new URL(selectedCardLink);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        // TODO: make tests work consistently independent of Internet access and installation directory"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the entry list panel remain unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see EntryListPanelHandle#isSelectedEntryCardChanged()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedEntryCardChanged());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the command box shows the default style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the command box shows the error style."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the result display shows the default style."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected void assertResultDisplayShowsDefaultStyle() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(RESULT_DISPLAY_DEFAULT_STYLE, getResultDisplay().getStyleClass());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that the result display shows the error style."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected void assertResultDisplayShowsErrorStyle() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertEquals(RESULT_DISPLAY_ERROR_STYLE, getResultDisplay().getStyleClass());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected void assertStatusBarExcludingCountUnchanged() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatusExcludingCount() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredEntryList());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the command result in the app."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param commandResult command result to set"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    protected void setCommandResultInApp(CommandResult commandResult) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        testApp.setCommandResult(commandResult);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Sets the exception in the app."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param e exception to set"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    protected void setExceptionInApp(Exception e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        testApp.setException(e);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 21,
      "qjqqyy": 4,
      "-": 256,
      "epicfailname": 46
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "import seedu.address.mocks.ModelManagerStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManagerStub());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatusExcludingCount();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar excluding count remain unchanged,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and the command box has the error style."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 2,
      "-": 67,
      "epicfailname": 6
    }
  },
  {
    "path": "src/test/java/systemtests/ContextSwitchSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ArchivesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ModelContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "public class ContextSwitchSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public void contextSwitch() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: archive the first entry in the list */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String command \u003d ArchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry archivedEntry \u003d archiveEntry(expectedModel, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedResultMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_ENTRY_SUCCESS, archivedEntry);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: non-list-context command unarchive fails */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d UnarchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: view archives, model should not change */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d ArchivesCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertArchivesCommandSuccess(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: unarchive the first entry in the list */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d UnarchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry unarchivedEntry \u003d unarchiveEntry(expectedModel, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedResultMessage \u003d String.format(UnarchiveCommand.MESSAGE_UNARCHIVE_ENTRY_SUCCESS, unarchivedEntry);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: non-archives-context command archive fails */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d ArchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: view entry book, model should not change */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertListCommandSuccess(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Archives the {@code Entry} at the specified {@code index} in {@code model}\u0027s entry book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @return the archived entry"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Entry archiveEntry(Model model, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry targetEntry \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.archiveEntry(targetEntry);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return targetEntry;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Un-archives the {@code Entry} at the specified {@code index} in {@code model}\u0027s entry book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @return the un-archived entry"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Entry unarchiveEntry(Model model, Index index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry targetEntry \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.unarchiveEntry(targetEntry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return targetEntry;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Executes the given command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code Command}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 4. {@code Storage} and {@code EntryListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * the current model."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 5. Browser url and selected card deselected.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 6. Status bar\u0027s sync status excluding count changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that a list command successfully switches context of the Model."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see ContextSwitchSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertListCommandSuccess(String command) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.setContext(ModelContext.CONTEXT_LIST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedResultMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Asserts that a archives command successfully switches context of the Model."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see ContextSwitchSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertArchivesCommandSuccess(String command) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.setContext(ModelContext.CONTEXT_ARCHIVE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedResultMessage \u003d String.format(ArchivesCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 4. {@code Storage} and {@code EntryListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "epicfailname"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "epicfailname": 144
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: delete the first entry in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_ENTRY.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry deletedEntry \u003d removePerson(expectedModel, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedEntry);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: delete the last entry in the list -\u003e deleted */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: delete the middle entry in the list -\u003e deleted */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: filtered entry list, delete index within bounds of address book and entry list -\u003e deleted */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index index \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEntryList().size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: filtered entry list, delete index within bounds of address book but out of bounds of entry list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        int invalidIndex \u003d getModel().getListEntryBook().getEntryList().size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* --------------------- Performing delete operation while a entry card is selected ------------------------ */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: delete the selected entry -\u003e entry list panel selects the entry before the deleted entry */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        deletedEntry \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedEntry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "                getModel().getListEntryBook().getEntryList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Removes the {@code Entry} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @return the removed entry"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private Entry removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry targetEntry \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.deleteEntry(targetEntry);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        return targetEntry;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Deletes the entry at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry deletedEntry \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedEntry);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatusExcludingCount();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar excluding count remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 2,
      "-": 149,
      "epicfailname": 31
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LINK_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TECH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SCIENCE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Link;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.testutil.EntryUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index index \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + TITLE_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + DESCRIPTION_DESC_BOB + \" \" + LINK_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_SCIENCE + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry editedEntry \u003d new EntryBuilder(BOB).withTags(VALID_TAG_SCIENCE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, index, editedEntry);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: edit a entry with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: edit a entry with new values same as another entry\u0027s values but with different link -\u003e edited */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(getModel().getListEntryBook().getEntryList().contains(BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        index \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertNotEquals(getModel().getFilteredEntryList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedEntry \u003d new EntryBuilder(BOB).withLink(VALID_LINK_AMY).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, index, editedEntry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        index \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry entryToEdit \u003d getModel().getFilteredEntryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedEntry \u003d new EntryBuilder(entryToEdit).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, index, editedEntry);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: filtered entry list, edit index within bounds of entry book and entry list -\u003e edited */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        index \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredEntryList().size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        entryToEdit \u003d getModel().getFilteredEntryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        editedEntry \u003d new EntryBuilder(entryToEdit).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, index, editedEntry);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: filtered entry list, edit index within bounds of entry book but out of bounds of entry list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        int invalidIndex \u003d getModel().getListEntryBook().getEntryList().size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + TITLE_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* --------------------- Performing edit operation while a entry card is selected -------------------------- */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: selects second card in the entry list, edit a entry -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Index indexSelected \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        selectPerson(indexSelected);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        index \u003d INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // browser\u0027s url is updated to reflect the new entry\u0027s name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, index, BOB, indexSelected);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + TITLE_DESC_BOB,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + TITLE_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredEntryList().size() + 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + TITLE_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + TITLE_DESC_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid title -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INDEX_FIRST_ENTRY.getOneBased() + INVALID_TITLE_DESC,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                Title.formExceptionMessage(INVALID_TITLE.trim()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INDEX_FIRST_ENTRY.getOneBased() + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                Description.formExceptionMessage(INVALID_DESCRIPTION.trim()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid link -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INDEX_FIRST_ENTRY.getOneBased() + INVALID_LINK_DESC,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                Link.formExceptionMessage(INVALID_LINK.trim()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // To be deprecated"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: invalid address -\u003e rejected"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INDEX_FIRST_ENTRY.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + INDEX_FIRST_ENTRY.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                Tag.formExceptionMessage(INVALID_TAG.trim()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: edit a entry with new values same as another entry\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        executeCommand(EntryUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertTrue(getModel().getListEntryBook().getEntryList().contains(BOB));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        index \u003d INDEX_SECOND_ENTRY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(getModel().getFilteredEntryList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: edit a entry with new values same as another entry\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: edit a entry with new values same as another entry\u0027s values but with different title -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + TITLE_DESC_AMY + DESCRIPTION_DESC_BOB + LINK_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_TECH + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: edit entry with new values same as another entry\u0027s values but with different description -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + TITLE_DESC_BOB + DESCRIPTION_DESC_AMY + LINK_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "            + ADDRESS_DESC_BOB + TAG_DESC_TECH + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        // To be deprecated"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: edit a entry with new values same as another entry\u0027s values but with different link -\u003e rejected"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + TITLE_DESC_BOB + DESCRIPTION_DESC_BOB + LINK_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_TECH + TAG_DESC_SCIENCE;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Entry, Index)} except that"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Entry, Index)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Entry editedEntry) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedEntry, null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the entry at index {@code toEdit} being"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * updated to values specified {@code editedEntry}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Entry editedEntry,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        expectedModel.setEntry(expectedModel.getFilteredEntryList().get(toEdit.getZeroBased()), editedEntry);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        expectedModel.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedEntry), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        expectedModel.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatusExcludingCount();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar excluding count remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 6,
      "-": 155,
      "epicfailname": 133
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: repeat previous find command where entry list is displaying the persons we are finding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find entry where entry list is not displaying the entry we are finding -\u003e 1 entry found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 entry found */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        assertFalse(getModel().getListEntryBook().getEntryList().contains(BENSON));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find entry in address book, keyword is same as name but of different case -\u003e 1 entry found */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find entry in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find entry in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find entry not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find phone number of entry in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getDescription().value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find address of entry in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find email of entry in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getLink().value;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find tags of entry in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find while a entry is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getTitle().equals(DANIEL.getTitle().fullTitle));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: find entry in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Also verifies that the status bar excluding count remains unchanged,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and the command box has the default style class,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and the selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredEntryList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar excluding count remain unchanged,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * and the command box has the error style."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 1,
      "-": 155,
      "epicfailname": 30
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredEntryList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 103,
      "epicfailname": 5
    }
  },
  {
    "path": "src/test/java/systemtests/ManualSetCommandResultExceptionSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "public class ManualSetCommandResultExceptionSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void commandResultDisplayed() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String expectedMessage \u003d \"Manually set command result successfully displayed\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        CommandResult result \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandResultHandled(result, expectedMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    public void exceptionPropagated() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        String expectedMessage \u003d \"Manually set exception successfully propagated\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Exception exception \u003d new Exception(expectedMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertExceptionHandled(exception, expectedMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Asserts that a manually set {@code CommandResult} displays as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * 2. Result display box has default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * 3. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param commandResult command result to set"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param expectedResultMessage result message expected to be displayed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void assertCommandResultHandled(CommandResult commandResult, String expectedResultMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedModel.setCommandResult(commandResult);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        setCommandResultInApp(commandResult);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * Asserts that a manually set {@code Exception} displays as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * 2. Result display box has error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * 3. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param e exception to set"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     * @param expectedResultMessage result message expected to be displayed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rlrh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    private void assertExceptionHandled(Exception e, String expectedResultMessage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        expectedModel.setException(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        setExceptionInApp(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rlrh": 65
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static final Predicate\u003cEntry\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cEntry\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Optional\u003cPredicate\u003cEntry\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        model.updateFilteredEntryList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public static void setFilteredList(Model model, Entry... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Entry} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    private static Predicate\u003cEntry\u003e getPredicateMatching(Entry other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "epicfailname": 8
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.EntryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.entry.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    protected EntryBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        Entry[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "epicfailname": 4
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalEntries.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: select the first card in the entry list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_ENTRY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: select the last card in the entry list -\u003e selected */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: select the middle card in the entry list -\u003e selected */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: filtered entry list, select index within bounds of address book but out of bounds of entry list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "        int invalidIndex \u003d getModel().getListEntryBook().getEntryList().size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        /* Case: filtered entry list, select index within bounds of address book and entry list -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredEntryList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredEntryList().size() + 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected entry.\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 4. {@code Storage} and {@code EntryListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 6. Status bar excluding count remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 4. {@code Storage} and {@code EntryListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "     * 5. Browser url, selected card and status bar excluding count remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "        assertStatusBarExcludingCountUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 1,
      "-": 122,
      "epicfailname": 21
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "import seedu.address.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyEntryBook\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "epicfailname": 2
    }
  },
  {
    "path": "src/test/resources/ModelManagerTest/NUS_School_of_Computing.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chtml class\u003d\"client-nojs\" lang\u003d\"en\" dir\u003d\"ltr\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"/\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eNUS School of Computing - Wikipedia\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003edocument.documentElement.className \u003d document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );\u003c/script\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e(window.RLQ\u003dwindow.RLQ||[]).push(function(){mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":false,\"wgNamespaceNumber\":0,\"wgPageName\":\"NUS_School_of_Computing\",\"wgTitle\":\"NUS School of Computing\",\"wgCurRevisionId\":830183157,\"wgRevisionId\":830183157,\"wgArticleId\":3183072,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\":\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\":[\"Webarchive template webcite links\",\"National University of Singapore\"],\"wgBreakFrames\":false,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"NUS_School_of_Computing\",\"wgRelevantArticleId\":3183072,\"wgRequestId\":\"XIfXFwpAICEAAIIkkYYAAACD\",\"wgCSPNonce\":false,\"wgIsProbablyEditable\":true,\"wgRelevantPageIsProbablyEditable\":true,\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"wgFlaggedRevsParams\":{\"tags\":{}},\"wgStableRevisionId\":null,\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\",\"wgWikiEditorEnabledModules\":[],\"wgBetaFeaturesFeatures\":[],\"wgMediaViewerOnClick\":true,\"wgMediaViewerEnabledByDefault\":true,\"wgPopupsReferencePreviews\":false,\"wgPopupsShouldSendModuleToUser\":true,\"wgPopupsConflictsWithNavPopupGadget\":false,\"wgVisualEditor\":{\"pageLanguageCode\":\"en\",\"pageLanguageDir\":\"ltr\",\"pageVariantFallbacks\":\"en\",\"usePageImages\":true,\"usePageDescriptions\":true},\"wgMFIsPageContentModelEditable\":true,\"wgMFEnableFontChanger\":true,\"wgMFDisplayWikibaseDescriptions\":{\"search\":true,\"nearby\":true,\"watchlist\":true,\"tagline\":false},\"wgRelatedArticles\":null,\"wgRelatedArticlesUseCirrusSearch\":true,\"wgRelatedArticlesOnlyUseCirrusSearch\":false,\"wgWMESchemaEditAttemptStepOversample\":false,\"wgPoweredByHHVM\":true,\"wgULSCurrentAutonym\":\"English\",\"wgNoticeProject\":\"wikipedia\",\"wgCentralNoticeCookiesToDelete\":[],\"wgCentralNoticeCategoriesUsingLegacy\":[\"Fundraising\",\"fundraising\"],\"wgWikibaseItemId\":\"Q6955649\",\"wgScoreNoteLanguages\":{\"arabic\":\"العربية\",\"catalan\":\"català\",\"deutsch\":\"Deutsch\",\"english\":\"English\",\"espanol\":\"español\",\"italiano\":\"italiano\",\"nederlands\":\"Nederlands\",\"norsk\":\"norsk\",\"portugues\":\"português\",\"suomi\":\"suomi\",\"svenska\":\"svenska\",\"vlaams\":\"West-Vlams\"},\"wgScoreDefaultNoteLanguage\":\"nederlands\",\"wgCentralAuthMobileDomain\":false,\"wgCodeMirrorEnabled\":true,\"wgVisualEditorToolbarScrollOffset\":0,\"wgVisualEditorUnsupportedEditParams\":[\"undo\",\"undoafter\",\"veswitched\"],\"wgEditSubmitButtonLabelPublish\":true,\"oresWikiId\":\"enwiki\",\"oresBaseUrl\":\"http://ores.discovery.wmnet:8081/\",\"oresApiVersion\":3});mw.loader.state({\"ext.gadget.charinsert-styles\":\"ready\",\"ext.globalCssJs.user.styles\":\"ready\",\"ext.globalCssJs.site.styles\":\"ready\",\"site.styles\":\"ready\",\"noscript\":\"ready\",\"user.styles\":\"ready\",\"ext.globalCssJs.user\":\"ready\",\"ext.globalCssJs.site\":\"ready\",\"user\":\"ready\",\"user.options\":\"ready\",\"user.tokens\":\"loading\",\"ext.cite.styles\":\"ready\",\"mediawiki.legacy.shared\":\"ready\",\"mediawiki.legacy.commonPrint\":\"ready\",\"mediawiki.toc.styles\":\"ready\",\"wikibase.client.init\":\"ready\",\"ext.visualEditor.desktopArticleTarget.noscript\":\"ready\",\"ext.uls.interlanguage\":\"ready\",\"ext.wikimediaBadges\":\"ready\",\"ext.3d.styles\":\"ready\",\"mediawiki.skinning.interface\":\"ready\",\"skins.vector.styles\":\"ready\"});mw.loader.implement(\"user.tokens@0tffind\",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({\"editToken\":\"+\\\\\",\"patrolToken\":\"+\\\\\",\"watchToken\":\"+\\\\\",\"csrfToken\":\"+\\\\\"});"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "});RLPAGEMODULES\u003d[\"ext.cite.ux-enhancements\",\"site\",\"mediawiki.page.startup\",\"mediawiki.page.ready\",\"mediawiki.toc\",\"mediawiki.searchSuggest\",\"ext.gadget.teahouse\",\"ext.gadget.ReferenceTooltips\",\"ext.gadget.watchlist-notice\",\"ext.gadget.DRN-wizard\",\"ext.gadget.charinsert\",\"ext.gadget.refToolbar\",\"ext.gadget.extra-toolbar-buttons\",\"ext.gadget.switcher\",\"ext.centralauth.centralautologin\",\"mmv.head\",\"mmv.bootstrap.autostart\",\"ext.popups\",\"ext.visualEditor.desktopArticleTarget.init\",\"ext.visualEditor.targetLoader\",\"ext.eventLogging\",\"ext.wikimediaEvents\",\"ext.navigationTiming\",\"ext.uls.eventlogger\",\"ext.uls.init\",\"ext.uls.compactlinks\",\"ext.uls.interface\",\"ext.quicksurveys.init\",\"ext.centralNotice.geoIP\",\"ext.centralNotice.startUp\",\"skins.vector.js\"];mw.loader.load(RLPAGEMODULES);});\u003c/script\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"/w/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dext.3d.styles%7Cext.cite.styles%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cext.wikimediaBadges%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cmediawiki.toc.styles%7Cskins.vector.styles%7Cwikibase.client.init\u0026amp;only\u003dstyles\u0026amp;skin\u003dvector\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript async\u003d\"\" src\u003d\"/w/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dstartup\u0026amp;only\u003dscripts\u0026amp;skin\u003dvector\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"ResourceLoaderDynamicStyles\" content\u003d\"\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"/w/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dext.gadget.charinsert-styles\u0026amp;only\u003dstyles\u0026amp;skin\u003dvector\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"/w/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dsite.styles\u0026amp;only\u003dstyles\u0026amp;skin\u003dvector\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"MediaWiki 1.33.0-wmf.20\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"referrer\" content\u003d\"origin\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"referrer\" content\u003d\"origin-when-crossorigin\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"referrer\" content\u003d\"origin-when-cross-origin\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:image\" content\u003d\"https://upload.wikimedia.org/wikipedia/commons/a/a8/NUS_SoC_COM1.jpg\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"alternate\" href\u003d\"android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/NUS_School_of_Computing\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"alternate\" type\u003d\"application/x-wiki\" title\u003d\"Edit this page\" href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"edit\" title\u003d\"Edit this page\" href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"apple-touch-icon\" href\u003d\"/static/apple-touch/wikipedia.png\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"shortcut icon\" href\u003d\"/static/favicon/wikipedia.ico\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"search\" type\u003d\"application/opensearchdescription+xml\" href\u003d\"/w/opensearch_desc.php\" title\u003d\"Wikipedia (en)\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"EditURI\" type\u003d\"application/rsd+xml\" href\u003d\"//en.wikipedia.org/w/api.php?action\u003drsd\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"license\" href\u003d\"//creativecommons.org/licenses/by-sa/3.0/\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"canonical\" href\u003d\"https://en.wikipedia.org/wiki/NUS_School_of_Computing\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"dns-prefetch\" href\u003d\"//login.wikimedia.org\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"dns-prefetch\" href\u003d\"//meta.wikimedia.org\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!--[if lt IE 9]\u003e\u003cscript src\u003d\"/w/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dhtml5shiv\u0026amp;only\u003dscripts\u0026amp;skin\u003dvector\u0026amp;sync\u003d1\"\u003e\u003c/script\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cbody class\u003d\"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-NUS_School_of_Computing rootpage-NUS_School_of_Computing skin-vector action-view\"\u003e\t\t\u003cdiv id\u003d\"mw-page-base\" class\u003d\"noprint\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"mw-head-base\" class\u003d\"noprint\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"content\" class\u003d\"mw-body\" role\u003d\"main\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ca id\u003d\"top\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"siteNotice\" class\u003d\"mw-body-content\"\u003e\u003c!-- CentralNotice --\u003e\u003c/div\u003e\u003cdiv class\u003d\"mw-indicators mw-body-content\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch1 id\u003d\"firstHeading\" class\u003d\"firstHeading\" lang\u003d\"en\"\u003eNUS School of Computing\u003c/h1\u003e\t\t\t\u003cdiv id\u003d\"bodyContent\" class\u003d\"mw-body-content\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"siteSub\" class\u003d\"noprint\"\u003eFrom Wikipedia, the free encyclopedia\u003c/div\u003e\t\t\t\t\u003cdiv id\u003d\"contentSub\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"jump-to-nav\"\u003e\u003c/div\u003e\t\t\t\t\u003ca class\u003d\"mw-jump-link\" href\u003d\"#mw-head\"\u003eJump to navigation\u003c/a\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003ca class\u003d\"mw-jump-link\" href\u003d\"#p-search\"\u003eJump to search\u003c/a\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"mw-content-text\" lang\u003d\"en\" dir\u003d\"ltr\" class\u003d\"mw-content-ltr\"\u003e\u003cdiv class\u003d\"mw-parser-output\"\u003e\u003cdiv class\u003d\"thumb tright\"\u003e\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:NUS_SoC_COM1.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/NUS_SoC_COM1.jpg/200px-NUS_SoC_COM1.jpg\" decoding\u003d\"async\" width\u003d\"200\" height\u003d\"150\" class\u003d\"thumbimage\" srcset\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/a/a8/NUS_SoC_COM1.jpg/300px-NUS_SoC_COM1.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a8/NUS_SoC_COM1.jpg/400px-NUS_SoC_COM1.jpg 2x\" data-file-width\u003d\"600\" data-file-height\u003d\"450\" /\u003e\u003c/a\u003e  \u003cdiv class\u003d\"thumbcaption\"\u003e\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:NUS_SoC_COM1.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003c/a\u003e\u003c/div\u003eCOM1. The Computing Dean\u0027s Office and Department of Computer Science are located in this building.\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:COM_2_Building,_NUS_School_of_Computing,_National_University_of_Singapore_-_20100813.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/e/e0/COM_2_Building%2C_NUS_School_of_Computing%2C_National_University_of_Singapore_-_20100813.jpg/200px-COM_2_Building%2C_NUS_School_of_Computing%2C_National_University_of_Singapore_-_20100813.jpg\" decoding\u003d\"async\" width\u003d\"200\" height\u003d\"113\" class\u003d\"thumbimage\" srcset\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/e/e0/COM_2_Building%2C_NUS_School_of_Computing%2C_National_University_of_Singapore_-_20100813.jpg/300px-COM_2_Building%2C_NUS_School_of_Computing%2C_National_University_of_Singapore_-_20100813.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/e/e0/COM_2_Building%2C_NUS_School_of_Computing%2C_National_University_of_Singapore_-_20100813.jpg/400px-COM_2_Building%2C_NUS_School_of_Computing%2C_National_University_of_Singapore_-_20100813.jpg 2x\" data-file-width\u003d\"4224\" data-file-height\u003d\"2376\" /\u003e\u003c/a\u003e  \u003cdiv class\u003d\"thumbcaption\"\u003e\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:COM_2_Building,_NUS_School_of_Computing,_National_University_of_Singapore_-_20100813.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003c/a\u003e\u003c/div\u003eCOM2. The School\u0027s Department of Information Systems is located in this building.\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:NUS_SoC_AS6.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/en/thumb/8/83/NUS_SoC_AS6.jpg/200px-NUS_SoC_AS6.jpg\" decoding\u003d\"async\" width\u003d\"200\" height\u003d\"140\" class\u003d\"thumbimage\" srcset\u003d\"//upload.wikimedia.org/wikipedia/en/thumb/8/83/NUS_SoC_AS6.jpg/300px-NUS_SoC_AS6.jpg 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/8/83/NUS_SoC_AS6.jpg/400px-NUS_SoC_AS6.jpg 2x\" data-file-width\u003d\"600\" data-file-height\u003d\"419\" /\u003e\u003c/a\u003e  \u003cdiv class\u003d\"thumbcaption\"\u003e\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:NUS_SoC_AS6.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003c/a\u003e\u003c/div\u003eAS6. NUS SoC occupies a number of floors in this building that is adjacent to COM1\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:NUS_School_of_Computing_I-Cube.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/a/af/NUS_School_of_Computing_I-Cube.jpg/200px-NUS_School_of_Computing_I-Cube.jpg\" decoding\u003d\"async\" width\u003d\"200\" height\u003d\"267\" class\u003d\"thumbimage\" srcset\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/a/af/NUS_School_of_Computing_I-Cube.jpg/300px-NUS_School_of_Computing_I-Cube.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/af/NUS_School_of_Computing_I-Cube.jpg/400px-NUS_School_of_Computing_I-Cube.jpg 2x\" data-file-width\u003d\"600\" data-file-height\u003d\"800\" /\u003e\u003c/a\u003e  \u003cdiv class\u003d\"thumbcaption\"\u003e\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:NUS_School_of_Computing_I-Cube.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003c/a\u003e\u003c/div\u003eI³. NUS SoC maintains some facilities at Level 3 of this building, formerly occupied by I²R.\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003cb\u003eNUS School of Computing\u003c/b\u003e is a faculty within the \u003ca href\u003d\"/wiki/National_University_of_Singapore\" title\u003d\"National University of Singapore\"\u003eNational University of Singapore\u003c/a\u003e (NUS). The School was established in 1998, although its history reaches back for another two decades, first to when it was the Department of \u003ca href\u003d\"/wiki/Information_Systems\" class\u003d\"mw-redirect\" title\u003d\"Information Systems\"\u003eInformation Systems\u003c/a\u003e and \u003ca href\u003d\"/wiki/Computer_Science\" class\u003d\"mw-redirect\" title\u003d\"Computer Science\"\u003eComputer Science\u003c/a\u003e (DISCS) in the Faculty of Science, and before that, as the Department of \u003ca href\u003d\"/wiki/Computer_Science\" class\u003d\"mw-redirect\" title\u003d\"Computer Science\"\u003eComputer Science\u003c/a\u003e in the Singapore University-\u003ca href\u003d\"/wiki/Nanyang_University\" title\u003d\"Nanyang University\"\u003eNanyang University\u003c/a\u003e Joint Campus days. The School is governed by an Executive Committee, which takes advice from an Industry Advisory Committee.\u003csup id\u003d\"cite_ref-1\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-1\"\u003e\u0026#91;1\u0026#93;\u003c/a\u003e\u003c/sup\u003e Its current \u003ca href\u003d\"/wiki/Dean_(education)\" title\u003d\"Dean (education)\"\u003edean\u003c/a\u003e is Professor David S. Rosenblum.\u003csup id\u003d\"cite_ref-deanery_2-0\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-deanery-2\"\u003e\u0026#91;2\u0026#93;\u003c/a\u003e\u003c/sup\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e\u003cp\u003eNUS School of Computing alumni retain their association with the School through the Computing Alumni Association (CAA).\u003csup id\u003d\"cite_ref-caa_3-0\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-caa-3\"\u003e\u0026#91;3\u0026#93;\u003c/a\u003e\u003c/sup\u003e The student body of the School is represented by NUS Students\u0027 Computing Club.\u003csup id\u003d\"cite_ref-4\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-4\"\u003e\u0026#91;4\u0026#93;\u003c/a\u003e\u003c/sup\u003e whose precursor was the Computer Science Society."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"toc\" class\u003d\"toc\"\u003e\u003cinput type\u003d\"checkbox\" role\u003d\"button\" id\u003d\"toctogglecheckbox\" class\u003d\"toctogglecheckbox\" style\u003d\"display:none\" /\u003e\u003cdiv class\u003d\"toctitle\" lang\u003d\"en\" dir\u003d\"ltr\"\u003e\u003ch2\u003eContents\u003c/h2\u003e\u003cspan class\u003d\"toctogglespan\"\u003e\u003clabel class\u003d\"toctogglelabel\" for\u003d\"toctogglecheckbox\"\u003e\u003c/label\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-1\"\u003e\u003ca href\u003d\"#History\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e1\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eHistory\u003c/span\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-2 tocsection-2\"\u003e\u003ca href\u003d\"#Present\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e1.1\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003ePresent\u003c/span\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-3 tocsection-3\"\u003e\u003ca href\u003d\"#Department_of_Computer_Science\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e1.1.1\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eDepartment of Computer Science\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-3 tocsection-4\"\u003e\u003ca href\u003d\"#Department_of_Information_Systems\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e1.1.2\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eDepartment of Information Systems\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-5\"\u003e\u003ca href\u003d\"#Related_associations\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e2\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eRelated associations\u003c/span\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-2 tocsection-6\"\u003e\u003ca href\u003d\"#NUS_Students’_Computing_Club\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e2.1\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eNUS Students’ Computing Club\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-2 tocsection-7\"\u003e\u003ca href\u003d\"#NUS_Hackers\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e2.2\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eNUS Hackers\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-2 tocsection-8\"\u003e\u003ca href\u003d\"#NUS_Greyhats\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e2.3\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eNUS Greyhats\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-2 tocsection-9\"\u003e\u003ca href\u003d\"#CAA\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e2.4\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eCAA\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-10\"\u003e\u003ca href\u003d\"#Events\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e3\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eEvents\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-11\"\u003e\u003ca href\u003d\"#References\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e4\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eReferences\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-12\"\u003e\u003ca href\u003d\"#External_links\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e5\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eExternal links\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"History\"\u003eHistory\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d1\" title\u003d\"Edit section: History\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eThe School originated from the time of the \u003ca href\u003d\"/wiki/University_of_Singapore\" class\u003d\"mw-redirect\" title\u003d\"University of Singapore\"\u003eUniversity of Singapore\u003c/a\u003e-\u003ca href\u003d\"/wiki/Nanyang_University\" title\u003d\"Nanyang University\"\u003eNanyang University\u003c/a\u003e Joint Campus arrangement. After the merger of the universities, it became the Department of \u003ca href\u003d\"/wiki/Information_Systems\" class\u003d\"mw-redirect\" title\u003d\"Information Systems\"\u003eInformation Systems\u003c/a\u003e and \u003ca href\u003d\"/wiki/Computer_Science\" class\u003d\"mw-redirect\" title\u003d\"Computer Science\"\u003eComputer Science\u003c/a\u003e (DISCS) within the newly formed National University of Singapore. It became a fully fledged faculty — the School of Computing — on 1 July 1998, comprising the Department of Computer Science and the Department of Information Systems."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e\u003cp\u003eThe School has expanded over the years. A permanent home for DISCS was built at building \u003ca href\u003d\"//upload.wikimedia.org/wikipedia/en/9/99/NUS_SoC_S15.jpg\" class\u003d\"internal\" title\u003d\"NUS SoC S15.jpg\"\u003eS15\u003c/a\u003e on the Kent Ridge Campus \u003csup id\u003d\"cite_ref-5\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-5\"\u003e\u0026#91;5\u0026#93;\u003c/a\u003e\u003c/sup\u003e in 1984, with two new buildings added in later years: S16 in 1992 and \u003ca href\u003d\"//upload.wikimedia.org/wikipedia/en/4/41/NUS_SoC_SOC1.jpg\" class\u003d\"internal\" title\u003d\"NUS SoC SOC1.jpg\"\u003eS17\u003c/a\u003e in 1998. \u003ca href\u003d\"//upload.wikimedia.org/wikipedia/en/4/41/NUS_SoC_SOC1.jpg\" class\u003d\"internal\" title\u003d\"NUS SoC SOC1.jpg\"\u003eS17\u003c/a\u003e was renamed SoC1 as DISCS became a full-fledged faculty named School of Computing (SoC) on 1 July 1998. The expansion of the School continued, culminating in its move\u003csup id\u003d\"cite_ref-6\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-6\"\u003e\u0026#91;6\u0026#93;\u003c/a\u003e\u003c/sup\u003e to Computing Drive in two phases: into \u003ca href\u003d\"//upload.wikimedia.org/wikipedia/commons/a/a8/NUS_SoC_COM1.jpg\" class\u003d\"internal\" title\u003d\"NUS SoC COM1.jpg\"\u003eCOM1\u003c/a\u003e and \u003ca href\u003d\"//upload.wikimedia.org/wikipedia/commons/a/a8/NUS_SoC_COM1.jpg\" class\u003d\"internal\" title\u003d\"NUS SoC COM1.jpg\"\u003eAS6\u003c/a\u003e in July 2007, and into \u003ca href\u003d\"//upload.wikimedia.org/wikipedia/en/8/8c/NUS_School_of_Computing_COM2.jpg\" class\u003d\"internal\" title\u003d\"NUS School of Computing COM2.jpg\"\u003eCOM2\u003c/a\u003e in June 2010. The school also occupies one level of I3 Building. The official address of the School is COM1 Level 3, 13 Computing Drive, Singapore 117417."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"Present\"\u003ePresent\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d2\" title\u003d\"Edit section: Present\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eNUS School of Computing has an academic staff strength of about 200.\u003csup id\u003d\"cite_ref-7\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-7\"\u003e\u0026#91;7\u0026#93;\u003c/a\u003e\u003c/sup\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e\u003cp\u003eGraduates include chief executives and technology architects of multinationals and government agencies.\u003csup id\u003d\"cite_ref-8\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-8\"\u003e\u0026#91;8\u0026#93;\u003c/a\u003e\u003c/sup\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e\u003cp\u003eThe School offers six undergraduate degree programmes\u003csup id\u003d\"cite_ref-9\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-9\"\u003e\u0026#91;9\u0026#93;\u003c/a\u003e\u003c/sup\u003e and a number of double and concurrent degree programmes,\u003csup id\u003d\"cite_ref-10\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-10\"\u003e\u0026#91;10\u0026#93;\u003c/a\u003e\u003c/sup\u003e offered in conjunction with other faculties within NUS as well as with overseas partners such as \u003ca href\u003d\"/wiki/Brown_University\" title\u003d\"Brown University\"\u003eBrown University\u003c/a\u003e, \u003ca href\u003d\"/wiki/Cambridge_University\" class\u003d\"mw-redirect\" title\u003d\"Cambridge University\"\u003eCambridge University\u003c/a\u003e and \u003ca href\u003d\"/wiki/Georgia_Institute_of_Technology\" title\u003d\"Georgia Institute of Technology\"\u003eGeorgia Institute of Technology\u003c/a\u003e.\u003csup id\u003d\"cite_ref-11\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-11\"\u003e\u0026#91;11\u0026#93;\u003c/a\u003e\u003c/sup\u003e At the post-graduate level, it offers master\u0027s degree programmes by coursework,\u003csup id\u003d\"cite_ref-12\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-12\"\u003e\u0026#91;12\u0026#93;\u003c/a\u003e\u003c/sup\u003e and PhD studies in various areas of Computer Science and Information Systems.\u003csup id\u003d\"cite_ref-13\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-13\"\u003e\u0026#91;13\u0026#93;\u003c/a\u003e\u003c/sup\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e\u003cp\u003eThe School engages in research in the following areas:\u003csup id\u003d\"cite_ref-14\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-14\"\u003e\u0026#91;14\u0026#93;\u003c/a\u003e\u003c/sup\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch4\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"Department_of_Computer_Science\"\u003eDepartment of Computer Science\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d3\" title\u003d\"Edit section: Department of Computer Science\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h4\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003eArtificial Intelligence\u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eComputational Biology\u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eDatabase Management Systems\u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eMedia\u003c/li\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSystems and Networking\u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eProgramming Languages and Software Engineering\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch4\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"Department_of_Information_Systems\"\u003eDepartment of Information Systems\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d4\" title\u003d\"Edit section: Department of Information Systems\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h4\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003eElectronic Commerce\u003c/li\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eEconomics of Information Systems\u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInformation Management\u003c/li\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInformation Systems and Management Healthcare\u003c/li\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eService System Innovation\u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSocial Computing\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"Related_associations\"\u003eRelated associations\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d5\" title\u003d\"Edit section: Related associations\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tleft\"\u003e\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:NUS_SoC_RnF_day.JPG\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/en/thumb/f/fd/NUS_SoC_RnF_day.JPG/200px-NUS_SoC_RnF_day.JPG\" decoding\u003d\"async\" width\u003d\"200\" height\u003d\"133\" class\u003d\"thumbimage\" srcset\u003d\"//upload.wikimedia.org/wikipedia/en/thumb/f/fd/NUS_SoC_RnF_day.JPG/300px-NUS_SoC_RnF_day.JPG 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/f/fd/NUS_SoC_RnF_day.JPG/400px-NUS_SoC_RnF_day.JPG 2x\" data-file-width\u003d\"2144\" data-file-height\u003d\"1424\" /\u003e\u003c/a\u003e  \u003cdiv class\u003d\"thumbcaption\"\u003e\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:NUS_SoC_RnF_day.JPG\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003c/a\u003e\u003c/div\u003eNUS SoC In NUS Rag \u0026amp; Flag August 2010\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003cspan id\u003d\"NUS_Students.E2.80.99_Computing_Club\"\u003e\u003c/span\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"NUS_Students’_Computing_Club\"\u003eNUS Students’ Computing Club\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d6\" title\u003d\"Edit section: NUS Students’ Computing Club\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eThe \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.nuscomputing.com\"\u003eNUS Students\u0027 Computing Club\u003c/a\u003e, also known as CompClub, is the faculty club for all undergraduates in NUS School of Computing. The club is headed by a management committee elected by the student body for a one-year term."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"NUS_Hackers\"\u003eNUS Hackers\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d7\" title\u003d\"Edit section: NUS Hackers\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://nushackers.org/\"\u003eNUS Hackers\u003c/a\u003e is a student-run organization committed to the spread of hacker culture \u0026amp; free/open-source software. They provide a support system for hackers in NUS who are currently building things (be it for charity, business or pleasure) and also hold workshops, run hackfests, and maintain open source code for the NUS community."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"NUS_Greyhats\"\u003eNUS Greyhats\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d8\" title\u003d\"Edit section: NUS Greyhats\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://nusgreyhats.org/\"\u003eNUS GreyHats\u003c/a\u003e is a special interest group in information security which aims to promote students’ interest in information security."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"CAA\"\u003eCAA\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d9\" title\u003d\"Edit section: CAA\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eThe Computing Alumni Association, formerly known as the Computer and Information Science Alumni Association, was formed in 1989, primarily to promote the interests of its members and provide interaction among members, the alma mater, and industry. It draws its members from the alumni of SoC or its predecessor the Department of Information Systems and Computer Science (DISCS). The CAA organizes talks and networking opportunities for its members .\u003csup id\u003d\"cite_ref-15\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-15\"\u003e\u0026#91;15\u0026#93;\u003c/a\u003e\u003c/sup\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"Events\"\u003eEvents\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d10\" title\u003d\"Edit section: Events\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tleft\"\u003e\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:Soc_10th_anniversary.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/2/24/Soc_10th_anniversary.jpg/200px-Soc_10th_anniversary.jpg\" decoding\u003d\"async\" width\u003d\"200\" height\u003d\"136\" class\u003d\"thumbimage\" srcset\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/2/24/Soc_10th_anniversary.jpg/300px-Soc_10th_anniversary.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/24/Soc_10th_anniversary.jpg/400px-Soc_10th_anniversary.jpg 2x\" data-file-width\u003d\"450\" data-file-height\u003d\"305\" /\u003e\u003c/a\u003e  \u003cdiv class\u003d\"thumbcaption\"\u003e\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Soc_10th_anniversary.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003c/a\u003e\u003c/div\u003eNUS Management, industry partners, alumni and students jointly celebrate a milestone in SoC history with a birthday cake\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eIn 2008, NUS School of Computing celebrated its 10th year as a faculty and 33 years since its founding as university department. It launched a series of commemorative celebratory events on 17 April 2008 with an in-house event that comprised the official opening of the NUS Students\u0027 Computing Club Lounge and the launch of the students game server,\u003csup id\u003d\"cite_ref-16\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-16\"\u003e\u0026#91;16\u0026#93;\u003c/a\u003e\u003c/sup\u003e culminating into the SoC 10th Anniversary Gala Dinner on 23 August 2008."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"clear:both;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"References\"\u003eReferences\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d11\" title\u003d\"Edit section: References\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"reflist columns references-column-width\" style\u003d\"-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003col class\u003d\"references\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-1\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-1\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/about/advisory.html\"\u003e\"Advisory committee\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1LZ0ZT?url\u003dhttp://www.comp.nus.edu.sg/about/advisory.html\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dAdvisory+committee\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fabout%2Fadvisory.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003cstyle data-mw-deduplicate\u003d\"TemplateStyles:r886058088\"\u003e.mw-parser-output cite.citation{font-style:inherit}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"\u0027\"\"\u0027\"}.mw-parser-output .citation .cs1-lock-free a{background:url(\"//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png\")no-repeat;background-position:right .1em center}.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url(\"//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png\")no-repeat;background-position:right .1em center}.mw-parser-output .citation .cs1-lock-subscription a{background:url(\"//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png\")no-repeat;background-position:right .1em center}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration{color:#555}.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration span{border-bottom:1px dotted;cursor:help}.mw-parser-output .cs1-ws-icon a{background:url(\"//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png\")no-repeat;background-position:right .1em center}.mw-parser-output code.cs1-code{color:inherit;background:inherit;border:inherit;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;font-size:100%}.mw-parser-output .cs1-visible-error{font-size:100%}.mw-parser-output .cs1-maint{display:none;color:#33aa33;margin-left:0.3em}.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-right{padding-right:0.2em}\u003c/style\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-deanery-2\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-deanery_2-0\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/about/deanery.html\"\u003e\"NUS School of Computing Deanery\"\u003c/a\u003e. \u003ci\u003eNUS School of Computing website\u003c/i\u003e\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2013-08-05\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+School+of+Computing+website\u0026amp;rft.atitle\u003dNUS+School+of+Computing+Deanery\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fabout%2Fdeanery.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-caa-3\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-caa_3-0\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://nuscaa.sg/\"\u003e\"CAA homepage\"\u003c/a\u003e. \u003ci\u003eNUSCAA website\u003c/i\u003e\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUSCAA+website\u0026amp;rft.atitle\u003dCAA+homepage\u0026amp;rft_id\u003dhttp%3A%2F%2Fnuscaa.sg%2F\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-4\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-4\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://compclub.nus.edu.sg/\"\u003e\"Computing Club homepage\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1P8lW4?url\u003dhttp://compclub.nus.edu.sg/\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dComputing+Club+homepage\u0026amp;rft_id\u003dhttp%3A%2F%2Fcompclub.nus.edu.sg%2F\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-5\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-5\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.nus.edu.sg/campusmap/\"\u003e\"Kent Ridge Campus Map\"\u003c/a\u003e. \u003ci\u003eNUS website of NUS\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1RHEWx?url\u003dhttp://www.nus.edu.sg/campusmap/\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2008-05-13\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website+of+NUS\u0026amp;rft.atitle\u003dKent+Ridge+Campus+Map\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.nus.edu.sg%2Fcampusmap%2F\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-6\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-6\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/maps/location.html\"\u003e\"New location of SoC\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1TDQNA?url\u003dhttp://www.comp.nus.edu.sg/maps/location.html\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dNew+location+of+SoC\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fmaps%2Flocation.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-7\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-7\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/about/staffstrength.html\"\u003e\"SoC Staff Strength\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1Tr2PW?url\u003dhttp://www.comp.nus.edu.sg/about/staffstrength.html\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dSoC+Staff+Strength\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fabout%2Fstaffstrength.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-8\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-8\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/~cisaa/aa/alumacts5.htm\"\u003e\"Alumni Action\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1Us1wx?url\u003dhttp://www.comp.nus.edu.sg/~cisaa/aa/alumacts5.htm\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dAlumni+Action\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2F~cisaa%2Faa%2Falumacts5.htm\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-9\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-9\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/undergraduates/\"\u003e\"Undergraduates\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1V92nO?url\u003dhttp://www.comp.nus.edu.sg/undergraduates/\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2011-02-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dUndergraduates\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fundergraduates%2F\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-10\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-10\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/undergraduates/dd_computing_business.html\"\u003e\"Double Degree in Computer Science/Information Systems \u0026amp; Business Administration/Business Administration (Accountancy)\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1VtDBM?url\u003dhttp://www.comp.nus.edu.sg/undergraduates/dd_computing_business.html\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2011-02-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dDouble+Degree+in+Computer+Science%2FInformation+Systems+%26+Business+Administration%2FBusiness+Administration+%28Accountancy%29\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fundergraduates%2Fdd_computing_business.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-11\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-11\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/undergraduates/cs_cs_prospective.html\"\u003e\"Prospective Students - Program List\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1VtDBM?url\u003dhttp://www.comp.nus.edu.sg/undergraduates/dd_computing_business.html\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2011-02-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dProspective+Students+-+Program+List\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fundergraduates%2Fcs_cs_prospective.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-12\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-12\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/graduates/m_structure.html\"\u003e\"Master of Computing Structure\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1WaD6R?url\u003dhttp://www.comp.nus.edu.sg/graduates/m_structure.html\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dMaster+of+Computing+Structure\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fgraduates%2Fm_structure.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-13\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-13\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/graduates/structure.html\"\u003e\"PhD (by Research): Programme Structure\"\u003c/a\u003e. \u003ci\u003eNUS website\u003c/i\u003e. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1XFzsT?url\u003dhttp://www.comp.nus.edu.sg/graduates/structure.html\"\u003eArchived\u003c/a\u003e from the original on 2011-02-13\u003cspan class\u003d\"reference-accessdate\"\u003e. Retrieved \u003cspan class\u003d\"nowrap\"\u003e2010-08-11\u003c/span\u003e\u003c/span\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+website\u0026amp;rft.atitle\u003dPhD+%28by+Research%29%3A+Programme+Structure\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.comp.nus.edu.sg%2Fgraduates%2Fstructure.html\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-14\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-14\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg/research/\"\u003eResearch Area\u003c/a\u003e, Official webpage of NUS, accessed 11 Aug 2010. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1XwdhH?url\u003dhttp://www.comp.nus.edu.sg/research/\"\u003eArchived\u003c/a\u003e February 13, 2011, at \u003ca href\u003d\"/wiki/WebCite\" title\u003d\"WebCite\"\u003eWebCite\u003c/a\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-15\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-15\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ccite class\u003d\"citation web\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.nuscomputingalumni.com/\"\u003e\"Computing Alumni Association\"\u003c/a\u003e. \u003ci\u003eNUS CAA website\u003c/i\u003e.\u003c/cite\u003e\u003cspan title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal\u0026amp;rft.genre\u003dunknown\u0026amp;rft.jtitle\u003dNUS+CAA+website\u0026amp;rft.atitle\u003dComputing+Alumni+Association\u0026amp;rft_id\u003dhttp%3A%2F%2Fwww.nuscomputingalumni.com%2F\u0026amp;rfr_id\u003dinfo%3Asid%2Fen.wikipedia.org%3ANUS+School+of+Computing\" class\u003d\"Z3988\"\u003e\u003c/span\u003e\u003clink rel\u003d\"mw-deduplicated-inline-style\" href\u003d\"mw-data:TemplateStyles:r886058088\"/\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-16\"\u003e\u003cspan class\u003d\"mw-cite-backlink\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-16\"\u003e^\u003c/a\u003e\u003c/b\u003e\u003c/span\u003e \u003cspan class\u003d\"reference-text\"\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.comp.nus.edu.sg/alumni_news/soc_10th_anniversary.html\"\u003eSoC 10th Anniversary Web Story\u003c/a\u003e, Official website of NUS. Retrieved 11 August 2010. \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"https://www.webcitation.org/5wT1YaxFs?url\u003dhttps://www.comp.nus.edu.sg/alumni_news/soc_10th_anniversary.html\"\u003eArchived\u003c/a\u003e February 13, 2011, at \u003ca href\u003d\"/wiki/WebCite\" title\u003d\"WebCite\"\u003eWebCite\u003c/a\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ol\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"mw-headline\" id\u003d\"External_links\"\u003eExternal links\u003c/span\u003e\u003cspan class\u003d\"mw-editsection\"\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e[\u003c/span\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\u0026amp;section\u003d12\" title\u003d\"Edit section: External links\"\u003eedit\u003c/a\u003e\u003cspan class\u003d\"mw-editsection-bracket\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.comp.nus.edu.sg\"\u003eNUS SoC Homepage\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv role\u003d\"navigation\" class\u003d\"navbox\" aria-labelledby\u003d\"National_University_of_Singapore\" style\u003d\"padding:3px\"\u003e\u003ctable class\u003d\"nowraplinks collapsible autocollapse navbox-inner\" style\u003d\"border-spacing:0;background:transparent;color:inherit\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003cth scope\u003d\"col\" class\u003d\"navbox-title\" colspan\u003d\"2\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;\"\u003e\u003cdiv class\u003d\"plainlinks hlist navbar mini\"\u003e\u003cul\u003e\u003cli class\u003d\"nv-view\"\u003e\u003ca href\u003d\"/wiki/Template:National_University_of_Singapore\" title\u003d\"Template:National University of Singapore\"\u003e\u003cabbr title\u003d\"View this template\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none; padding:0;\"\u003ev\u003c/abbr\u003e\u003c/a\u003e\u003c/li\u003e\u003cli class\u003d\"nv-talk\"\u003e\u003ca href\u003d\"/wiki/Template_talk:National_University_of_Singapore\" title\u003d\"Template talk:National University of Singapore\"\u003e\u003cabbr title\u003d\"Discuss this template\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none; padding:0;\"\u003et\u003c/abbr\u003e\u003c/a\u003e\u003c/li\u003e\u003cli class\u003d\"nv-edit\"\u003e\u003ca class\u003d\"external text\" href\u003d\"//en.wikipedia.org/w/index.php?title\u003dTemplate:National_University_of_Singapore\u0026amp;action\u003dedit\"\u003e\u003cabbr title\u003d\"Edit this template\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;;background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none; padding:0;\"\u003ee\u003c/abbr\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id\u003d\"National_University_of_Singapore\" style\u003d\"font-size:114%;margin:0 4em\"\u003e\u003ca href\u003d\"/wiki/National_University_of_Singapore\" title\u003d\"National University of Singapore\"\u003e\u003cspan style\u003d\"color:white\"\u003eNational University of Singapore\u003c/span\u003e\u003c/a\u003e\u003c/div\u003e\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth scope\u003d\"row\" class\u003d\"navbox-group\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;width:1%\"\u003ePresidents\u003c/th\u003e\u003ctd class\u003d\"navbox-list navbox-odd hlist\" style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px\"\u003e\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Shih_Choon_Fong\" title\u003d\"Shih Choon Fong\"\u003eShih Choon Fong\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Tan_Chorh_Chuan\" title\u003d\"Tan Chorh Chuan\"\u003eTan Chorh Chuan\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Tan_Eng_Chye\" title\u003d\"Tan Eng Chye\"\u003eTan Eng Chye\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth scope\u003d\"row\" class\u003d\"navbox-group\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;width:1%\"\u003eFaculties and Schools\u003c/th\u003e\u003ctd class\u003d\"navbox-list navbox-even hlist\" style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px\"\u003e\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Faculty_of_Arts_and_Social_Sciences,_National_University_of_Singapore\" title\u003d\"Faculty of Arts and Social Sciences, National University of Singapore\"\u003eArts and Social Sciences\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/NUS_Business_School\" title\u003d\"NUS Business School\"\u003eBusiness\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca class\u003d\"mw-selflink selflink\"\u003eComputing\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/National_University_of_Singapore_Faculty_of_Law\" title\u003d\"National University of Singapore Faculty of Law\"\u003eLaw\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Yong_Loo_Lin_School_of_Medicine\" title\u003d\"Yong Loo Lin School of Medicine\"\u003eMedicine\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Yong_Siew_Toh_Conservatory_of_Music\" title\u003d\"Yong Siew Toh Conservatory of Music\"\u003eMusic\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Lee_Kuan_Yew_School_of_Public_Policy\" title\u003d\"Lee Kuan Yew School of Public Policy\"\u003ePublic Policy\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Duke%E2%80%93NUS_Medical_School\" title\u003d\"Duke–NUS Medical School\"\u003eDuke–NUS Medical School\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Yale-NUS_College\" title\u003d\"Yale-NUS College\"\u003eYale-NUS College\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth scope\u003d\"row\" class\u003d\"navbox-group\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;width:1%\"\u003eFacilities\u003c/th\u003e\u003ctd class\u003d\"navbox-list navbox-odd hlist\" style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px\"\u003e\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Adam_Park_Guild_House\" title\u003d\"Adam Park Guild House\"\u003eAdam Park Guild House\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Centre_for_International_Law\" title\u003d\"Centre for International Law\"\u003eCentre for International Law\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Centre_for_Quantum_Technologies\" title\u003d\"Centre for Quantum Technologies\"\u003eCentre for Quantum Technologies\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Energy_Studies_Institute\" title\u003d\"Energy Studies Institute\"\u003eEnergy Studies Institute\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Graphene_Research_Centre\" title\u003d\"Graphene Research Centre\"\u003eGraphene Research Centre\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/National_University_Cancer_Institute,_Singapore\" title\u003d\"National University Cancer Institute, Singapore\"\u003eNational University Cancer Institute\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/National_University_Hospital\" title\u003d\"National University Hospital\"\u003eNational University Hospital\u003c/a\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/National_University_Health_System\" title\u003d\"National University Health System\"\u003eNational University Health System\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/NUS_High_School_of_Math_and_Science\" title\u003d\"NUS High School of Math and Science\"\u003eNUS High School of Math and Science\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/NUS_Museum\" title\u003d\"NUS Museum\"\u003eNUS Museum\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Temasek_Life_Sciences_Laboratory\" title\u003d\"Temasek Life Sciences Laboratory\"\u003eTemasek Life Sciences Laboratory\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth scope\u003d\"row\" class\u003d\"navbox-group\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;width:1%\"\u003eOrganizations\u003c/th\u003e\u003ctd class\u003d\"navbox-list navbox-even hlist\" style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px\"\u003e\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Faith_and_Globalisation_Initiative\" title\u003d\"Faith and Globalisation Initiative\"\u003eFaith and Globalisation Initiative\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/National_University_of_Singapore_Muslim_Society\" title\u003d\"National University of Singapore Muslim Society\"\u003eNational University of Singapore Muslim Society\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/NUS_Press\" title\u003d\"NUS Press\"\u003eNUS Press\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Singapore-Delft_Water_Alliance\" title\u003d\"Singapore-Delft Water Alliance\"\u003eSingapore-Delft Water Alliance\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth scope\u003d\"row\" class\u003d\"navbox-group\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;width:1%\"\u003eMedia\u003c/th\u003e\u003ctd class\u003d\"navbox-list navbox-odd hlist\" style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px\"\u003e\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ci\u003e\u003ca href\u003d\"/wiki/Asian_Journal_of_Public_Affairs\" title\u003d\"Asian Journal of Public Affairs\"\u003eAsian Journal of Public Affairs\u003c/a\u003e\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ci\u003e\u003ca href\u003d\"/wiki/Journal_of_Southeast_Asian_Studies\" title\u003d\"Journal of Southeast Asian Studies\"\u003eJournal of Southeast Asian Studies\u003c/a\u003e\u003c/i\u003e\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth scope\u003d\"row\" class\u003d\"navbox-group\" style\u003d\"background:#FF7F00; border:2px #0000FF solid; color:white;;width:1%\"\u003eRelated\u003c/th\u003e\u003ctd class\u003d\"navbox-list navbox-even hlist\" style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px\"\u003e\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/German_Institute_of_Science_and_Technology_(Singapore)\" title\u003d\"German Institute of Science and Technology (Singapore)\"\u003eGerman Institute of Science and Technology\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Institute_of_Policy_Studies_(Singapore)\" title\u003d\"Institute of Policy Studies (Singapore)\"\u003eInstitute of Policy Studies\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/List_of_National_University_of_Singapore_people\" title\u003d\"List of National University of Singapore people\"\u003eList of National University of Singapore people\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/National_University_of_Singapore_University_Professor\" title\u003d\"National University of Singapore University Professor\"\u003eNational University of Singapore University Professor\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Nanyang_University\" title\u003d\"Nanyang University\"\u003eNanyang University\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/NUSSU_Rag_and_Flag\" title\u003d\"NUSSU Rag and Flag\"\u003eNUSSU Rag and Flag\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "NewPP limit report"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Parsed by mw1245"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Cached time: 20190304071429"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Cache expiry: 2592000"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Dynamic content: false"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "CPU time usage: 0.244 seconds"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Real time usage: 0.302 seconds"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Preprocessor visited node count: 780/1000000"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Preprocessor generated node count: 0/1500000"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Post‐expand include size: 35688/2097152 bytes"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Template argument size: 141/2097152 bytes"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Highest expansion depth: 7/40"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Expensive parser function count: 0/500"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Unstrip recursion depth: 1/20"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Unstrip post‐expand size: 41780/5000000 bytes"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Number of Wikibase entities loaded: 0/400"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Lua time usage: 0.123/10.000 seconds"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Lua memory usage: 2.92 MB/50 MB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rlrh"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Transclusion expansion time report (%,ms,calls,template)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "100.00%  215.851      1 -total"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rlrh"
        },
        "content": " 89.35%  192.856      1 Template:Reflist"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rlrh"
        },
        "content": " 67.45%  145.597     14 Template:Cite_web"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  8.59%   18.545      1 Template:National_University_of_Singapore"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  8.12%   17.533      2 Template:Webarchive"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  7.30%   15.760      1 Template:Navbox"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  1.97%    4.245      1 Template:-"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  1.45%    3.133      1 Template:Main_other"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  1.15%    2.480      1 Template:Column-width"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rlrh"
        },
        "content": "  1.09%    2.348      1 Template:Color"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rlrh"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Saved in parser cache with key enwiki:pcache:idhash:3183072-0!canonical and timestamp 20190304071429 and revision id 830183157"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rlrh"
        },
        "content": " --\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003cnoscript\u003e\u003cimg src\u003d\"//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type\u003d1x1\" alt\u003d\"\" title\u003d\"\" width\u003d\"1\" height\u003d\"1\" style\u003d\"border: none; position: absolute;\" /\u003e\u003c/noscript\u003e\u003c/div\u003e\t\t\t\t\t\u003cdiv class\u003d\"printfooter\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\tRetrieved from \"\u003ca dir\u003d\"ltr\" href\u003d\"https://en.wikipedia.org/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;oldid\u003d830183157\"\u003ehttps://en.wikipedia.org/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;oldid\u003d830183157\u003c/a\u003e\"\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"catlinks\" class\u003d\"catlinks\" data-mw\u003d\"interface\"\u003e\u003cdiv id\u003d\"mw-normal-catlinks\" class\u003d\"mw-normal-catlinks\"\u003e\u003ca href\u003d\"/wiki/Help:Category\" title\u003d\"Help:Category\"\u003eCategories\u003c/a\u003e: \u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Category:National_University_of_Singapore\" title\u003d\"Category:National University of Singapore\"\u003eNational University of Singapore\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id\u003d\"mw-hidden-catlinks\" class\u003d\"mw-hidden-catlinks mw-hidden-cats-hidden\"\u003eHidden categories: \u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Category:Webarchive_template_webcite_links\" title\u003d\"Category:Webarchive template webcite links\"\u003eWebarchive template webcite links\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\t\t\t\t\u003cdiv class\u003d\"visualClear\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"mw-navigation\"\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ch2\u003eNavigation menu\u003c/h2\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"mw-head\"\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\u003cdiv id\u003d\"p-personal\" role\u003d\"navigation\" aria-labelledby\u003d\"p-personal-label\"\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ch3 id\u003d\"p-personal-label\"\u003ePersonal tools\u003c/h3\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003cli id\u003d\"pt-anonuserpage\"\u003eNot logged in\u003c/li\u003e\u003cli id\u003d\"pt-anontalk\"\u003e\u003ca href\u003d\"/wiki/Special:MyTalk\" title\u003d\"Discussion about edits from this IP address [n]\" accesskey\u003d\"n\"\u003eTalk\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"pt-anoncontribs\"\u003e\u003ca href\u003d\"/wiki/Special:MyContributions\" title\u003d\"A list of edits made from this IP address [y]\" accesskey\u003d\"y\"\u003eContributions\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"pt-createaccount\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:CreateAccount\u0026amp;returnto\u003dNUS+School+of+Computing\" title\u003d\"You are encouraged to create an account and log in; however, it is not mandatory\"\u003eCreate account\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"pt-login\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:UserLogin\u0026amp;returnto\u003dNUS+School+of+Computing\" title\u003d\"You\u0026#039;re encouraged to log in; however, it\u0026#039;s not mandatory. [o]\" accesskey\u003d\"o\"\u003eLog in\u003c/a\u003e\u003c/li\u003e\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\u003cdiv id\u003d\"left-navigation\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cdiv id\u003d\"p-namespaces\" role\u003d\"navigation\" class\u003d\"vectorTabs\" aria-labelledby\u003d\"p-namespaces-label\"\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ch3 id\u003d\"p-namespaces-label\"\u003eNamespaces\u003c/h3\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003cli id\u003d\"ca-nstab-main\" class\u003d\"selected\"\u003e\u003cspan\u003e\u003ca href\u003d\"/wiki/NUS_School_of_Computing\" title\u003d\"View the content page [c]\" accesskey\u003d\"c\"\u003eArticle\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli id\u003d\"ca-talk\"\u003e\u003cspan\u003e\u003ca href\u003d\"/wiki/Talk:NUS_School_of_Computing\" rel\u003d\"discussion\" title\u003d\"Discussion about the content page [t]\" accesskey\u003d\"t\"\u003eTalk\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cdiv id\u003d\"p-variants\" role\u003d\"navigation\" class\u003d\"vectorMenu emptyPortlet\" aria-labelledby\u003d\"p-variants-label\"\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\u003cinput type\u003d\"checkbox\" class\u003d\"vectorMenuCheckbox\" aria-labelledby\u003d\"p-variants-label\" /\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ch3 id\u003d\"p-variants-label\"\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003cspan\u003eVariants\u003c/span\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003c/h3\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cul class\u003d\"menu\"\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"right-navigation\"\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cdiv id\u003d\"p-views\" role\u003d\"navigation\" class\u003d\"vectorTabs\" aria-labelledby\u003d\"p-views-label\"\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ch3 id\u003d\"p-views-label\"\u003eViews\u003c/h3\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003cli id\u003d\"ca-view\" class\u003d\"collapsible selected\"\u003e\u003cspan\u003e\u003ca href\u003d\"/wiki/NUS_School_of_Computing\"\u003eRead\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli id\u003d\"ca-edit\" class\u003d\"collapsible\"\u003e\u003cspan\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dedit\" title\u003d\"Edit this page [e]\" accesskey\u003d\"e\"\u003eEdit\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\u003cli id\u003d\"ca-history\" class\u003d\"collapsible\"\u003e\u003cspan\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dhistory\" title\u003d\"Past revisions of this page [h]\" accesskey\u003d\"h\"\u003eView history\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cdiv id\u003d\"p-cactions\" role\u003d\"navigation\" class\u003d\"vectorMenu emptyPortlet\" aria-labelledby\u003d\"p-cactions-label\"\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cinput type\u003d\"checkbox\" class\u003d\"vectorMenuCheckbox\" aria-labelledby\u003d\"p-cactions-label\" /\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ch3 id\u003d\"p-cactions-label\"\u003e\u003cspan\u003eMore\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cul class\u003d\"menu\"\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cdiv id\u003d\"p-search\" role\u003d\"search\"\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ch3\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003clabel for\u003d\"searchInput\"\u003eSearch\u003c/label\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003c/h3\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cform action\u003d\"/w/index.php\" id\u003d\"searchform\"\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003cdiv id\u003d\"simpleSearch\"\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cinput type\u003d\"search\" name\u003d\"search\" placeholder\u003d\"Search Wikipedia\" title\u003d\"Search Wikipedia [f]\" accesskey\u003d\"f\" id\u003d\"searchInput\"/\u003e\u003cinput type\u003d\"hidden\" value\u003d\"Special:Search\" name\u003d\"title\"/\u003e\u003cinput type\u003d\"submit\" name\u003d\"fulltext\" value\u003d\"Search\" title\u003d\"Search Wikipedia for this text\" id\u003d\"mw-searchButton\" class\u003d\"searchButton mw-fallbackSearchButton\"/\u003e\u003cinput type\u003d\"submit\" name\u003d\"go\" value\u003d\"Go\" title\u003d\"Go to a page with this exact name if it exists\" id\u003d\"searchButton\" class\u003d\"searchButton\"/\u003e\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003c/form\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"mw-panel\"\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"p-logo\" role\u003d\"banner\"\u003e\u003ca class\u003d\"mw-wiki-logo\" href\u003d\"/wiki/Main_Page\" title\u003d\"Visit the main page\"\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cdiv class\u003d\"portal\" role\u003d\"navigation\" id\u003d\"p-navigation\" aria-labelledby\u003d\"p-navigation-label\"\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ch3 id\u003d\"p-navigation-label\"\u003eNavigation\u003c/h3\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"n-mainpage-description\"\u003e\u003ca href\u003d\"/wiki/Main_Page\" title\u003d\"Visit the main page [z]\" accesskey\u003d\"z\"\u003eMain page\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-contents\"\u003e\u003ca href\u003d\"/wiki/Portal:Contents\" title\u003d\"Guides to browsing Wikipedia\"\u003eContents\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-featuredcontent\"\u003e\u003ca href\u003d\"/wiki/Portal:Featured_content\" title\u003d\"Featured content – the best of Wikipedia\"\u003eFeatured content\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-currentevents\"\u003e\u003ca href\u003d\"/wiki/Portal:Current_events\" title\u003d\"Find background information on current events\"\u003eCurrent events\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-randompage\"\u003e\u003ca href\u003d\"/wiki/Special:Random\" title\u003d\"Load a random article [x]\" accesskey\u003d\"x\"\u003eRandom article\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-sitesupport\"\u003e\u003ca href\u003d\"https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source\u003ddonate\u0026amp;utm_medium\u003dsidebar\u0026amp;utm_campaign\u003dC13_en.wikipedia.org\u0026amp;uselang\u003den\" title\u003d\"Support us\"\u003eDonate to Wikipedia\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-shoplink\"\u003e\u003ca href\u003d\"//shop.wikimedia.org\" title\u003d\"Visit the Wikipedia store\"\u003eWikipedia store\u003c/a\u003e\u003c/li\u003e\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"portal\" role\u003d\"navigation\" id\u003d\"p-interaction\" aria-labelledby\u003d\"p-interaction-label\"\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ch3 id\u003d\"p-interaction-label\"\u003eInteraction\u003c/h3\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"n-help\"\u003e\u003ca href\u003d\"/wiki/Help:Contents\" title\u003d\"Guidance on how to use and edit Wikipedia\"\u003eHelp\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-aboutsite\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:About\" title\u003d\"Find out about Wikipedia\"\u003eAbout Wikipedia\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-portal\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:Community_portal\" title\u003d\"About the project, what you can do, where to find things\"\u003eCommunity portal\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-recentchanges\"\u003e\u003ca href\u003d\"/wiki/Special:RecentChanges\" title\u003d\"A list of recent changes in the wiki [r]\" accesskey\u003d\"r\"\u003eRecent changes\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"n-contactpage\"\u003e\u003ca href\u003d\"//en.wikipedia.org/wiki/Wikipedia:Contact_us\" title\u003d\"How to contact Wikipedia\"\u003eContact page\u003c/a\u003e\u003c/li\u003e\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"portal\" role\u003d\"navigation\" id\u003d\"p-tb\" aria-labelledby\u003d\"p-tb-label\"\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ch3 id\u003d\"p-tb-label\"\u003eTools\u003c/h3\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"t-whatlinkshere\"\u003e\u003ca href\u003d\"/wiki/Special:WhatLinksHere/NUS_School_of_Computing\" title\u003d\"List of all English Wikipedia pages containing links to this page [j]\" accesskey\u003d\"j\"\u003eWhat links here\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-recentchangeslinked\"\u003e\u003ca href\u003d\"/wiki/Special:RecentChangesLinked/NUS_School_of_Computing\" rel\u003d\"nofollow\" title\u003d\"Recent changes in pages linked from this page [k]\" accesskey\u003d\"k\"\u003eRelated changes\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-upload\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:File_Upload_Wizard\" title\u003d\"Upload files [u]\" accesskey\u003d\"u\"\u003eUpload file\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-specialpages\"\u003e\u003ca href\u003d\"/wiki/Special:SpecialPages\" title\u003d\"A list of all special pages [q]\" accesskey\u003d\"q\"\u003eSpecial pages\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-permalink\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;oldid\u003d830183157\" title\u003d\"Permanent link to this revision of the page\"\u003ePermanent link\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-info\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;action\u003dinfo\" title\u003d\"More information about this page\"\u003ePage information\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-wikibase\"\u003e\u003ca href\u003d\"https://www.wikidata.org/wiki/Special:EntityPage/Q6955649\" title\u003d\"Link to connected data repository item [g]\" accesskey\u003d\"g\"\u003eWikidata item\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-cite\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:CiteThisPage\u0026amp;page\u003dNUS_School_of_Computing\u0026amp;id\u003d830183157\" title\u003d\"Information on how to cite this page\"\u003eCite this page\u003c/a\u003e\u003c/li\u003e\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"portal\" role\u003d\"navigation\" id\u003d\"p-coll-print_export\" aria-labelledby\u003d\"p-coll-print_export-label\"\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ch3 id\u003d\"p-coll-print_export-label\"\u003ePrint/export\u003c/h3\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"coll-create_a_book\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:Book\u0026amp;bookcmd\u003dbook_creator\u0026amp;referer\u003dNUS+School+of+Computing\"\u003eCreate a book\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"coll-download-as-rdf2latex\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:ElectronPdf\u0026amp;page\u003dNUS+School+of+Computing\u0026amp;action\u003dshow-download-screen\"\u003eDownload as PDF\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-print\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;printable\u003dyes\" title\u003d\"Printable version of this page [p]\" accesskey\u003d\"p\"\u003ePrintable version\u003c/a\u003e\u003c/li\u003e\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"portal\" role\u003d\"navigation\" id\u003d\"p-lang\" aria-labelledby\u003d\"p-lang-label\"\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ch3 id\u003d\"p-lang-label\"\u003eLanguages\u003c/h3\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli class\u003d\"interlanguage-link interwiki-ja\"\u003e\u003ca href\u003d\"https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%AC%E3%83%9D%E3%83%BC%E3%83%AB%E5%9B%BD%E7%AB%8B%E5%A4%A7%E5%AD%A6%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E5%AD%A6%E9%83%A8\" title\u003d\"シンガポール国立大学コンピューティング学部 – Japanese\" lang\u003d\"ja\" hreflang\u003d\"ja\" class\u003d\"interlanguage-link-target\"\u003e日本語\u003c/a\u003e\u003c/li\u003e\u003cli class\u003d\"interlanguage-link interwiki-zh\"\u003e\u003ca href\u003d\"https://zh.wikipedia.org/wiki/%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9C%8B%E7%AB%8B%E5%A4%A7%E5%AD%B8%E8%AE%A1%E7%AE%97%E5%AD%B8%E9%99%A2\" title\u003d\"新加坡國立大學计算學院 – Chinese\" lang\u003d\"zh\" hreflang\u003d\"zh\" class\u003d\"interlanguage-link-target\"\u003e中文\u003c/a\u003e\u003c/li\u003e\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv class\u003d\"after-portlet after-portlet-lang\"\u003e\u003cspan class\u003d\"wb-langlinks-edit wb-langlinks-link\"\u003e\u003ca href\u003d\"https://www.wikidata.org/wiki/Special:EntityPage/Q6955649#sitelinks-wikipedia\" title\u003d\"Edit interlanguage links\" class\u003d\"wbc-editpage\"\u003eEdit links\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"footer\" role\u003d\"contentinfo\"\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cul id\u003d\"footer-info\"\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-info-lastmod\"\u003e This page was last edited on 13 March 2018, at 07:58\u003cspan class\u003d\"anonymous-show\"\u003e\u0026#160;(UTC)\u003c/span\u003e.\u003c/li\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-info-copyright\"\u003eText is available under the \u003ca rel\u003d\"license\" href\u003d\"//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License\"\u003eCreative Commons Attribution-ShareAlike License\u003c/a\u003e\u003ca rel\u003d\"license\" href\u003d\"//creativecommons.org/licenses/by-sa/3.0/\" style\u003d\"display:none;\"\u003e\u003c/a\u003e;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rlrh"
        },
        "content": "additional terms may apply.  By using this site, you agree to the \u003ca href\u003d\"//foundation.wikimedia.org/wiki/Terms_of_Use\"\u003eTerms of Use\u003c/a\u003e and \u003ca href\u003d\"//foundation.wikimedia.org/wiki/Privacy_policy\"\u003ePrivacy Policy\u003c/a\u003e. Wikipedia® is a registered trademark of the \u003ca href\u003d\"//www.wikimediafoundation.org/\"\u003eWikimedia Foundation, Inc.\u003c/a\u003e, a non-profit organization.\u003c/li\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cul id\u003d\"footer-places\"\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-privacy\"\u003e\u003ca href\u003d\"https://foundation.wikimedia.org/wiki/Privacy_policy\" class\u003d\"extiw\" title\u003d\"wmf:Privacy policy\"\u003ePrivacy policy\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-about\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:About\" title\u003d\"Wikipedia:About\"\u003eAbout Wikipedia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-disclaimer\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:General_disclaimer\" title\u003d\"Wikipedia:General disclaimer\"\u003eDisclaimers\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-contact\"\u003e\u003ca href\u003d\"//en.wikipedia.org/wiki/Wikipedia:Contact_us\"\u003eContact Wikipedia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-developers\"\u003e\u003ca href\u003d\"https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute\"\u003eDevelopers\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-cookiestatement\"\u003e\u003ca href\u003d\"https://foundation.wikimedia.org/wiki/Cookie_statement\"\u003eCookie statement\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-mobileview\"\u003e\u003ca href\u003d\"//en.m.wikipedia.org/w/index.php?title\u003dNUS_School_of_Computing\u0026amp;mobileaction\u003dtoggle_view_mobile\" class\u003d\"noprint stopMobileRedirectToggle\"\u003eMobile view\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cul id\u003d\"footer-icons\" class\u003d\"noprint\"\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-copyrightico\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ca href\u003d\"https://wikimediafoundation.org/\"\u003e\u003cimg src\u003d\"/static/images/wikimedia-button.png\" srcset\u003d\"/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x\" width\u003d\"88\" height\u003d\"31\" alt\u003d\"Wikimedia Foundation\"/\u003e\u003c/a\u003e\t\t\t\t\t\u003c/li\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-poweredbyico\"\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ca href\u003d\"//www.mediawiki.org/\"\u003e\u003cimg src\u003d\"/static/images/poweredby_mediawiki_88x31.png\" alt\u003d\"Powered by MediaWiki\" srcset\u003d\"/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x\" width\u003d\"88\" height\u003d\"31\"/\u003e\u003c/a\u003e\t\t\t\t\t\u003c/li\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cdiv style\u003d\"clear: both;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e(window.RLQ\u003dwindow.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.244\",\"walltime\":\"0.302\",\"ppvisitednodes\":{\"value\":780,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":35688,\"limit\":2097152},\"templateargumentsize\":{\"value\":141,\"limit\":2097152},\"expansiondepth\":{\"value\":7,\"limit\":40},\"expensivefunctioncount\":{\"value\":0,\"limit\":500},\"unstrip-depth\":{\"value\":1,\"limit\":20},\"unstrip-size\":{\"value\":41780,\"limit\":5000000},\"entityaccesscount\":{\"value\":0,\"limit\":400},\"timingprofile\":[\"100.00%  215.851      1 -total\",\" 89.35%  192.856      1 Template:Reflist\",\" 67.45%  145.597     14 Template:Cite_web\",\"  8.59%   18.545      1 Template:National_University_of_Singapore\",\"  8.12%   17.533      2 Template:Webarchive\",\"  7.30%   15.760      1 Template:Navbox\",\"  1.97%    4.245      1 Template:-\",\"  1.45%    3.133      1 Template:Main_other\",\"  1.15%    2.480      1 Template:Column-width\",\"  1.09%    2.348      1 Template:Color\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.123\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":3063522,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1245\",\"timestamp\":\"20190304071429\",\"ttl\":2592000,\"transientcontent\":false}}});mw.config.set({\"wgBackendResponseTime\":120,\"wgHostname\":\"mw1331\"});});\u003c/script\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/body\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "rlrh": 351
    }
  },
  {
    "path": "src/test/resources/ModelManagerTest/ProPublica.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chtml lang\u003d\"en\" class\u003d\"no-js\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eOur Reporting on Michael Cohen: A Reading Guide — ProPublica\u003c/title\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Standard Meta --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta http-equiv\u003d\"Content-Type\" content\u003d\"text/html; charset\u003dutf-8\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"referrer\" content\u003d\"no-referrer-when-downgrade\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"robots\" content\u003d\"all\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"keywords\" content\u003d\"attorney, personal, fixer, millions, former, rapt, trump’s, show, many, assertions, articles, donald, allegations, fraud, president\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"description\" content\u003d\"This week’s testimony by President Donald Trump’s former personal attorney and fixer held millions rapt with allegations of fraud, coded orders to lie and hundreds of threats. Many of those assertions had been explored before, as these articles show.\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"canonical\" href\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"author\" content\u003d\"Nick Varchaver\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"datePublished\" content\u003d\"2019-03-01\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"headline\" content\u003d\"Our Reporting on Michael Cohen: A Reading Guide\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"inLanguage\" content\u003d\"en\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"alternate\" href\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" hreflang\u003d\"x-default\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"geo.region\" content\u003d\"New York\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"geo.position\" content\u003d\"40.725395,-74.0048036\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"ICBM\" content\u003d\"40.725395,-74.0048036\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"geo.placename\" content\u003d\"ProPublica\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Dublin Core basic info --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Identifier\" content\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Format\" content\u003d\"text/html\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Relation\" content\u003d\"ProPublica\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Language\" content\u003d\"en\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Publisher\" content\u003d\"ProPublica\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Type\" content\u003d\"text/html\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Coverage\" content\u003d\"https://www.propublica.org/\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Rights\" content\u003d\"Copyright \u0026copy;2019 ProPublica.\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Title\" content\u003d\"Our Reporting on Michael Cohen: A Reading Guide\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Subject\" content\u003d\"attorney, personal, fixer, millions, former, rapt, trump’s, show, many, assertions, articles, donald, allegations, fraud, president\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Contributor\" content\u003d\"Nick Varchaver\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Date\" content\u003d\"2019-03-01\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"dcterms.Description\" content\u003d\"This week’s testimony by President Donald Trump’s former personal attorney and fixer held millions rapt with allegations of fraud, coded orders to lie and hundreds of threats. Many of those assertions had been explored before, as these articles show.\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Facebook OpenGraph --\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"fb:profile_id\" content\u003d\"13320939444\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"fb:app_id\" content\u003d\"229862657130557\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:type\" content\u003d\"article\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:locale\" content\u003d\"en_us\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:url\" content\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:title\" content\u003d\"Our Reporting on Michael Cohen: A Reading Guide — ProPublica\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:description\" content\u003d\"This week’s testimony by President Donald Trump’s former personal attorney and fixer held millions rapt with allegations of fraud, coded orders to lie and hundreds of threats. Many of those assertions had been explored before, as these articles show.\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:image\" content\u003d\"https://assets.propublica.org/images/articles/20190301-michael-cohen-guide-1200x630.jpg\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:site_name\" content\u003d\"ProPublica\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:see_also\" content\u003d\"https://twitter.com/propublica\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:see_also\" content\u003d\"https://www.facebook.com/propublica\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"og:see_also\" content\u003d\"https://en.wikipedia.org/wiki/ProPublica\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:author\" content\u003d\"https://www.facebook.com/propublica\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:publisher\" content\u003d\"https://www.facebook.com/propublica\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"attorney\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"personal\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"fixer\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"millions\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"former\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"rapt\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"trump’s\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"show\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"many\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"assertions\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"articles\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"donald\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"allegations\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"fraud\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:tag\" content\u003d\"president\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:modified_time\" content\u003d\"2019-03-09T23:21:26+0000\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta property\u003d\"article:published_time\" content\u003d\"2019-03-01T18:16:12+0000\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Twitter Card --\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"twitter:card\" content\u003d\"summary_large_image\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"twitter:site\" content\u003d\"@propublica\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"twitter:creator\" content\u003d\"@propublica\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"twitter:title\" content\u003d\"Our Reporting on Michael Cohen: A Reading Guide — ProPublica\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"twitter:description\" content\u003d\"This week’s testimony by President Donald Trump’s former personal attorney and fixer held millions rapt with allegations of fraud, coded orders to lie and hundreds of threats. Many of those assertions had been explored before, as these articles show.\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"twitter:image\" content\u003d\"https://assets.propublica.org/images/articles/20190301-michael-cohen-guide-1200x630.jpg\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Domain verification --\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Identity --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"application/ld+json\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@context\": \"http://schema.org\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"NGO\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"email\": \"\u0026#105;\u0026#110;\u0026#102;\u0026#111;\u0026#64;\u0026#112;\u0026#114;\u0026#111;\u0026#112;\u0026#117;\u0026#98;\u0026#108;\u0026#105;\u0026#99;\u0026#97;\u0026#46;\u0026#111;\u0026#114;\u0026#103;\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"location\": {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Place\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"hasMap\": \"http://maps.google.com/maps?q\u003dProPublica%2C+155+Avenue+of+the+Americas%2C+13th+Floor%2C+New+York+N.Y.+10013%2C+US\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"geo\": {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"GeoCoordinates\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"latitude\": \"40.725395\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"longitude\": \"-74.0048036\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- WebSite --\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"application/ld+json\"\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@context\": \"http://schema.org\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"WebSite\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org/\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\"],"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"copyrightHolder\": {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"NGO\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"email\": \"\u0026#105;\u0026#110;\u0026#102;\u0026#111;\u0026#64;\u0026#112;\u0026#114;\u0026#111;\u0026#112;\u0026#117;\u0026#98;\u0026#108;\u0026#105;\u0026#99;\u0026#97;\u0026#46;\u0026#111;\u0026#114;\u0026#103;\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"location\": {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Place\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"hasMap\": \"http://maps.google.com/maps?q\u003dProPublica%2C+155+Avenue+of+the+Americas%2C+13th+Floor%2C+New+York+N.Y.+10013%2C+US\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"geo\": {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"GeoCoordinates\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"latitude\": \"40.725395\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"longitude\": \"-74.0048036\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"author\": {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"NGO\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"email\": \"\u0026#105;\u0026#110;\u0026#102;\u0026#111;\u0026#64;\u0026#112;\u0026#114;\u0026#111;\u0026#112;\u0026#117;\u0026#98;\u0026#108;\u0026#105;\u0026#99;\u0026#97;\u0026#46;\u0026#111;\u0026#114;\u0026#103;\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"location\": {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Place\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"hasMap\": \"http://maps.google.com/maps?q\u003dProPublica%2C+155+Avenue+of+the+Americas%2C+13th+Floor%2C+New+York+N.Y.+10013%2C+US\","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"geo\": {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"GeoCoordinates\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"latitude\": \"40.725395\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"longitude\": \"-74.0048036\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"creator\": {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Organization\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Place --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"application/ld+json\"\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@context\": \"http://schema.org\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Place\","
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"hasMap\": \"http://maps.google.com/maps?q\u003dProPublica%2C+155+Avenue+of+the+Americas%2C+13th+Floor%2C+New+York+N.Y.+10013%2C+US\","
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"geo\": {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"GeoCoordinates\","
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"latitude\": \"40.725395\","
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"longitude\": \"-74.0048036\""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Main Entity of Page --\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"application/ld+json\"\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@context\": \"http://schema.org\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"NewsArticle\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/images/articles/20190301-michael-cohen-guide-1200x630.jpg\","
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\","
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\","
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"mainEntityOfPage\": \"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\","
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"inLanguage\": \"en_us\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"headline\": \"Our Reporting on Michael Cohen: A Reading Guide\","
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"keywords\": [\"attorney\",\"personal\",\"fixer\",\"millions\",\"former\",\"rapt\",\"trump’s\",\"show\",\"many\",\"assertions\",\"articles\",\"donald\",\"allegations\",\"fraud\",\"president\"],"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"dateCreated\": \"2019-03-01T17:58:00+0000\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"dateModified\": \"2019-03-09T23:21:26+0000\","
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"datePublished\": \"2019-03-01T18:16:12+0000\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"copyrightYear\": \"2019\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"author\": {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"NGO\","
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"email\": \"\u0026#105;\u0026#110;\u0026#102;\u0026#111;\u0026#64;\u0026#112;\u0026#114;\u0026#111;\u0026#112;\u0026#117;\u0026#98;\u0026#108;\u0026#105;\u0026#99;\u0026#97;\u0026#46;\u0026#111;\u0026#114;\u0026#103;\","
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"location\": {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Place\","
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"hasMap\": \"http://maps.google.com/maps?q\u003dProPublica%2C+155+Avenue+of+the+Americas%2C+13th+Floor%2C+New+York+N.Y.+10013%2C+US\","
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"geo\": {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"GeoCoordinates\","
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"latitude\": \"40.725395\","
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"longitude\": \"-74.0048036\""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"copyrightHolder\": {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"NGO\","
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"email\": \"\u0026#105;\u0026#110;\u0026#102;\u0026#111;\u0026#64;\u0026#112;\u0026#114;\u0026#111;\u0026#112;\u0026#117;\u0026#98;\u0026#108;\u0026#105;\u0026#99;\u0026#97;\u0026#46;\u0026#111;\u0026#114;\u0026#103;\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"location\": {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Place\","
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"hasMap\": \"http://maps.google.com/maps?q\u003dProPublica%2C+155+Avenue+of+the+Americas%2C+13th+Floor%2C+New+York+N.Y.+10013%2C+US\","
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"geo\": {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"GeoCoordinates\","
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"latitude\": \"40.725395\","
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"longitude\": \"-74.0048036\""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"publisher\": {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Organization\","
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"email\": \"\u0026#105;\u0026#110;\u0026#102;\u0026#111;\u0026#64;\u0026#112;\u0026#114;\u0026#111;\u0026#112;\u0026#117;\u0026#98;\u0026#108;\u0026#105;\u0026#99;\u0026#97;\u0026#46;\u0026#111;\u0026#114;\u0026#103;\","
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"location\": {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"Place\","
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"ProPublica\","
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"description\": \"ProPublica is an independent, non-profit newsroom that produces investigative journalism in the public interest.\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"hasMap\": \"http://maps.google.com/maps?q\u003dProPublica%2C+155+Avenue+of+the+Americas%2C+13th+Floor%2C+New+York+N.Y.+10013%2C+US\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"telephone\": \"1-212-514-5250\","
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"image\": {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"logo\": {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ImageObject\","
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://assets.propublica.org/2017-pp-open-graph-1200x630.jpg\","
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"height\": \"630\","
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"width\": \"1200\""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"url\": \"https://www.propublica.org\","
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"sameAs\": [\"https://twitter.com/propublica\",\"https://www.facebook.com/propublica\",\"https://en.wikipedia.org/wiki/ProPublica\"],"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"geo\": {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"GeoCoordinates\","
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"latitude\": \"40.725395\","
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"longitude\": \"-74.0048036\""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"address\": {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"PostalAddress\","
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"streetAddress\": \"155 Avenue of the Americas\","
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressLocality\": \"13th Floor\","
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressRegion\": \"New York\","
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"postalCode\": \"N.Y. 10013\","
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"addressCountry\": \"US\""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"articleSection\": \"Trump, Inc.\","
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"creator\": [\"Nick Varchaver\"],"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"thumbnail\": \"https://assets.propublica.org/images/articles/20190301-michael-cohen-guide-1200x630.jpg?1552792018\""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Breadcrumbs --\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"application/ld+json\"\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@context\": \"http://schema.org\","
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"BreadcrumbList\","
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"itemListElement\": ["
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ListItem\","
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"position\": \"1\","
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"item\": {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@id\": \"https://www.propublica.org/\","
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"Homepage Placeholder (do not remove)\""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "rlrh"
        },
        "content": "},"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "rlrh"
        },
        "content": "{"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@type\": \"ListItem\","
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"position\": \"2\","
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"item\": {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"@id\": \"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\","
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\"name\": \"Our Reporting on Michael Cohen: A Reading Guide\""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "rlrh"
        },
        "content": "]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Google Tag Manager  --\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "rlrh"
        },
        "content": "dataLayer \u003d [{\"contentType\":\"Item\",\"contentSubtype\":\"Article\",\"publicationDate\":\"March 01, 2019 13:16:12\",\"articleCategory\":\"The Trump Administration\",\"articleTitle\":\"Our Reporting on Michael Cohen: A Reading Guide\",\"authorName\":\"Nick Varchaver\",\"seriesName\":\"Trump, Inc.\",\"contentRegion\":\"National\",\"contentFormat\":\"site\",\"contentLanguage\":\"en\",\"craftId\":\"158610\"}];"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- NR JS --\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003ewindow.NREUM||(NREUM\u003d{}),__nr_require\u003dfunction(t,n,e){function r(e){if(!n[e]){var o\u003dn[e]\u003d{exports:{}};t[e][0].call(o.exports,function(n){var o\u003dt[e][1][n];return r(o||n)},o,o.exports)}return n[e].exports}if(\"function\"\u003d\u003dtypeof __nr_require)return __nr_require;for(var o\u003d0;o\u003ce.length;o++)r(e[o]);return r}({1:[function(t,n,e){function r(t){try{s.console\u0026\u0026console.log(t)}catch(n){}}var o,i\u003dt(\"ee\"),a\u003dt(15),s\u003d{};try{o\u003dlocalStorage.getItem(\"__nr_flags\").split(\",\"),console\u0026\u0026\"function\"\u003d\u003dtypeof console.log\u0026\u0026(s.console\u003d!0,o.indexOf(\"dev\")!\u003d\u003d-1\u0026\u0026(s.dev\u003d!0),o.indexOf(\"nr_dev\")!\u003d\u003d-1\u0026\u0026(s.nrDev\u003d!0))}catch(c){}s.nrDev\u0026\u0026i.on(\"internal-error\",function(t){r(t.stack)}),s.dev\u0026\u0026i.on(\"fn-err\",function(t,n,e){r(e.stack)}),s.dev\u0026\u0026(r(\"NR AGENT IN DEVELOPMENT MODE\"),r(\"flags: \"+a(s,function(t,n){return t}).join(\", \")))},{}],2:[function(t,n,e){function r(t,n,e,r,s){try{p?p-\u003d1:o(s||new UncaughtException(t,n,e),!0)}catch(f){try{i(\"ierr\",[f,c.now(),!0])}catch(d){}}return\"function\"\u003d\u003dtypeof u\u0026\u0026u.apply(this,a(arguments))}function UncaughtException(t,n,e){this.message\u003dt||\"Uncaught error with no additional information\",this.sourceURL\u003dn,this.line\u003de}function o(t,n){var e\u003dn?null:c.now();i(\"err\",[t,e])}var i\u003dt(\"handle\"),a\u003dt(16),s\u003dt(\"ee\"),c\u003dt(\"loader\"),f\u003dt(\"gos\"),u\u003dwindow.onerror,d\u003d!1,l\u003d\"nr@seenError\",p\u003d0;c.features.err\u003d!0,t(1),window.onerror\u003dr;try{throw new Error}catch(h){\"stack\"in h\u0026\u0026(t(8),t(7),\"addEventListener\"in window\u0026\u0026t(5),c.xhrWrappable\u0026\u0026t(9),d\u003d!0)}s.on(\"fn-start\",function(t,n,e){d\u0026\u0026(p+\u003d1)}),s.on(\"fn-err\",function(t,n,e){d\u0026\u0026!e[l]\u0026\u0026(f(e,l,function(){return!0}),this.thrown\u003d!0,o(e))}),s.on(\"fn-end\",function(){d\u0026\u0026!this.thrown\u0026\u0026p\u003e0\u0026\u0026(p-\u003d1)}),s.on(\"internal-error\",function(t){i(\"ierr\",[t,c.now(),!0])})},{}],3:[function(t,n,e){t(\"loader\").features.ins\u003d!0},{}],4:[function(t,n,e){function r(t){}if(window.performance\u0026\u0026window.performance.timing\u0026\u0026window.performance.getEntriesByType){var o\u003dt(\"ee\"),i\u003dt(\"handle\"),a\u003dt(8),s\u003dt(7),c\u003d\"learResourceTimings\",f\u003d\"addEventListener\",u\u003d\"resourcetimingbufferfull\",d\u003d\"bstResource\",l\u003d\"resource\",p\u003d\"-start\",h\u003d\"-end\",m\u003d\"fn\"+p,w\u003d\"fn\"+h,v\u003d\"bstTimer\",y\u003d\"pushState\",g\u003dt(\"loader\");g.features.stn\u003d!0,t(6);var b\u003dNREUM.o.EV;o.on(m,function(t,n){var e\u003dt[0];e instanceof b\u0026\u0026(this.bstStart\u003dg.now())}),o.on(w,function(t,n){var e\u003dt[0];e instanceof b\u0026\u0026i(\"bst\",[e,n,this.bstStart,g.now()])}),a.on(m,function(t,n,e){this.bstStart\u003dg.now(),this.bstType\u003de}),a.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),this.bstType])}),s.on(m,function(){this.bstStart\u003dg.now()}),s.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),\"requestAnimationFrame\"])}),o.on(y+p,function(t){this.time\u003dg.now(),this.startPath\u003dlocation.pathname+location.hash}),o.on(y+h,function(t){i(\"bstHist\",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance\u0026\u0026(window.performance[\"c\"+c]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance[\"c\"+c]()},!1):window.performance[f](\"webkit\"+u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance[\"webkitC\"+c]()},!1)),document[f](\"scroll\",r,{passive:!0}),document[f](\"keypress\",r,!1),document[f](\"click\",r,!1)}},{}],5:[function(t,n,e){function r(t){for(var n\u003dt;n\u0026\u0026!n.hasOwnProperty(u);)n\u003dObject.getPrototypeOf(n);n\u0026\u0026o(n)}function o(t){s.inPlace(t,[u,d],\"-\",i)}function i(t,n){return t[1]}var a\u003dt(\"ee\").get(\"events\"),s\u003dt(18)(a,!0),c\u003dt(\"gos\"),f\u003dXMLHttpRequest,u\u003d\"addEventListener\",d\u003d\"removeEventListener\";n.exports\u003da,\"getPrototypeOf\"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)\u0026\u0026(o(window),o(f.prototype)),a.on(u+\"-start\",function(t,n){var e\u003dt[1],r\u003dc(e,\"nr@wrapped\",function(){function t(){if(\"function\"\u003d\u003dtypeof e.handleEvent)return e.handleEvent.apply(e,arguments)}var n\u003d{object:t,\"function\":e}[typeof e];return n?s(n,\"fn-\",null,n.name||\"anonymous\"):e});this.wrapped\u003dt[1]\u003dr}),a.on(d+\"-start\",function(t){t[1]\u003dthis.wrapped||t[1]})},{}],6:[function(t,n,e){var r\u003dt(\"ee\").get(\"history\"),o\u003dt(18)(r);n.exports\u003dr,o.inPlace(window.history,[\"pushState\",\"replaceState\"],\"-\")},{}],7:[function(t,n,e){var r\u003dt(\"ee\").get(\"raf\"),o\u003dt(18)(r),i\u003d\"equestAnimationFrame\";n.exports\u003dr,o.inPlace(window,[\"r\"+i,\"mozR\"+i,\"webkitR\"+i,\"msR\"+i],\"raf-\"),r.on(\"raf-start\",function(t){t[0]\u003do(t[0],\"fn-\")})},{}],8:[function(t,n,e){function r(t,n,e){t[0]\u003da(t[0],\"fn-\",null,e)}function o(t,n,e){this.method\u003de,this.timerDuration\u003disNaN(t[1])?0:+t[1],t[0]\u003da(t[0],\"fn-\",this,e)}var i\u003dt(\"ee\").get(\"timer\"),a\u003dt(18)(i),s\u003d\"setTimeout\",c\u003d\"setInterval\",f\u003d\"clearTimeout\",u\u003d\"-start\",d\u003d\"-\";n.exports\u003di,a.inPlace(window,[s,\"setImmediate\"],s+d),a.inPlace(window,[c],c+d),a.inPlace(window,[f,\"clearImmediate\"],f+d),i.on(c+u,r),i.on(s+u,o)},{}],9:[function(t,n,e){function r(t,n){d.inPlace(n,[\"onreadystatechange\"],\"fn-\",s)}function o(){var t\u003dthis,n\u003du.context(t);t.readyState\u003e3\u0026\u0026!n.resolved\u0026\u0026(n.resolved\u003d!0,u.emit(\"xhr-resolved\",[],t)),d.inPlace(t,y,\"fn-\",s)}function i(t){g.push(t),h\u0026\u0026(x?x.then(a):w?w(a):(E\u003d-E,O.data\u003dE))}function a(){for(var t\u003d0;t\u003cg.length;t++)r([],g[t]);g.length\u0026\u0026(g\u003d[])}function s(t,n){return n}function c(t,n){for(var e in t)n[e]\u003dt[e];return n}t(5);var f\u003dt(\"ee\"),u\u003df.get(\"xhr\"),d\u003dt(18)(u),l\u003dNREUM.o,p\u003dl.XHR,h\u003dl.MO,m\u003dl.PR,w\u003dl.SI,v\u003d\"readystatechange\",y\u003d[\"onload\",\"onerror\",\"onabort\",\"onloadstart\",\"onloadend\",\"onprogress\",\"ontimeout\"],g\u003d[];n.exports\u003du;var b\u003dwindow.XMLHttpRequest\u003dfunction(t){var n\u003dnew p(t);try{u.emit(\"new-xhr\",[n],n),n.addEventListener(v,o,!1)}catch(e){try{u.emit(\"internal-error\",[e])}catch(r){}}return n};if(c(p,b),b.prototype\u003dp.prototype,d.inPlace(b.prototype,[\"open\",\"send\"],\"-xhr-\",s),u.on(\"send-xhr-start\",function(t,n){r(t,n),i(n)}),u.on(\"open-xhr-start\",r),h){var x\u003dm\u0026\u0026m.resolve();if(!w\u0026\u0026!m){var E\u003d1,O\u003ddocument.createTextNode(E);new h(a).observe(O,{characterData:!0})}}else f.on(\"fn-end\",function(t){t[0]\u0026\u0026t[0].type\u003d\u003d\u003dv||a()})},{}],10:[function(t,n,e){function r(t){var n\u003dthis.params,e\u003dthis.metrics;if(!this.ended){this.ended\u003d!0;for(var r\u003d0;r\u003cd;r++)t.removeEventListener(u[r],this.listener,!1);if(!n.aborted){if(e.duration\u003da.now()-this.startTime,4\u003d\u003d\u003dt.readyState){n.status\u003dt.status;var i\u003do(t,this.lastSize);if(i\u0026\u0026(e.rxSize\u003di),this.sameOrigin){var c\u003dt.getResponseHeader(\"X-NewRelic-App-Data\");c\u0026\u0026(n.cat\u003dc.split(\", \").pop())}}else n.status\u003d0;e.cbTime\u003dthis.cbTime,f.emit(\"xhr-done\",[t],t),s(\"xhr\",[n,e,this.startTime])}}}function o(t,n){var e\u003dt.responseType;if(\"json\"\u003d\u003d\u003de\u0026\u0026null!\u003d\u003dn)return n;var r\u003d\"arraybuffer\"\u003d\u003d\u003de||\"blob\"\u003d\u003d\u003de||\"json\"\u003d\u003d\u003de?t.response:t.responseText;return h(r)}function i(t,n){var e\u003dc(n),r\u003dt.params;r.host\u003de.hostname+\":\"+e.port,r.pathname\u003de.pathname,t.sameOrigin\u003de.sameOrigin}var a\u003dt(\"loader\");if(a.xhrWrappable){var s\u003dt(\"handle\"),c\u003dt(11),f\u003dt(\"ee\"),u\u003d[\"load\",\"error\",\"abort\",\"timeout\"],d\u003du.length,l\u003dt(\"id\"),p\u003dt(14),h\u003dt(13),m\u003dwindow.XMLHttpRequest;a.features.xhr\u003d!0,t(9),f.on(\"new-xhr\",function(t){var n\u003dthis;n.totalCbs\u003d0,n.called\u003d0,n.cbTime\u003d0,n.end\u003dr,n.ended\u003d!1,n.xhrGuids\u003d{},n.lastSize\u003dnull,p\u0026\u0026(p\u003e34||p\u003c10)||window.opera||t.addEventListener(\"progress\",function(t){n.lastSize\u003dt.loaded},!1)}),f.on(\"open-xhr-start\",function(t){this.params\u003d{method:t[0]},i(this,t[1]),this.metrics\u003d{}}),f.on(\"open-xhr-end\",function(t,n){\"loader_config\"in NREUM\u0026\u0026\"xpid\"in NREUM.loader_config\u0026\u0026this.sameOrigin\u0026\u0026n.setRequestHeader(\"X-NewRelic-ID\",NREUM.loader_config.xpid)}),f.on(\"send-xhr-start\",function(t,n){var e\u003dthis.metrics,r\u003dt[0],o\u003dthis;if(e\u0026\u0026r){var i\u003dh(r);i\u0026\u0026(e.txSize\u003di)}this.startTime\u003da.now(),this.listener\u003dfunction(t){try{\"abort\"\u003d\u003d\u003dt.type\u0026\u0026(o.params.aborted\u003d!0),(\"load\"!\u003d\u003dt.type||o.called\u003d\u003d\u003do.totalCbs\u0026\u0026(o.onloadCalled||\"function\"!\u003dtypeof n.onload))\u0026\u0026o.end(n)}catch(e){try{f.emit(\"internal-error\",[e])}catch(r){}}};for(var s\u003d0;s\u003cd;s++)n.addEventListener(u[s],this.listener,!1)}),f.on(\"xhr-cb-time\",function(t,n,e){this.cbTime+\u003dt,n?this.onloadCalled\u003d!0:this.called+\u003d1,this.called!\u003d\u003dthis.totalCbs||!this.onloadCalled\u0026\u0026\"function\"\u003d\u003dtypeof e.onload||this.end(e)}),f.on(\"xhr-load-added\",function(t,n){var e\u003d\"\"+l(t)+!!n;this.xhrGuids\u0026\u0026!this.xhrGuids[e]\u0026\u0026(this.xhrGuids[e]\u003d!0,this.totalCbs+\u003d1)}),f.on(\"xhr-load-removed\",function(t,n){var e\u003d\"\"+l(t)+!!n;this.xhrGuids\u0026\u0026this.xhrGuids[e]\u0026\u0026(delete this.xhrGuids[e],this.totalCbs-\u003d1)}),f.on(\"addEventListener-end\",function(t,n){n instanceof m\u0026\u0026\"load\"\u003d\u003d\u003dt[0]\u0026\u0026f.emit(\"xhr-load-added\",[t[1],t[2]],n)}),f.on(\"removeEventListener-end\",function(t,n){n instanceof m\u0026\u0026\"load\"\u003d\u003d\u003dt[0]\u0026\u0026f.emit(\"xhr-load-removed\",[t[1],t[2]],n)}),f.on(\"fn-start\",function(t,n,e){n instanceof m\u0026\u0026(\"onload\"\u003d\u003d\u003de\u0026\u0026(this.onload\u003d!0),(\"load\"\u003d\u003d\u003d(t[0]\u0026\u0026t[0].type)||this.onload)\u0026\u0026(this.xhrCbStart\u003da.now()))}),f.on(\"fn-end\",function(t,n){this.xhrCbStart\u0026\u0026f.emit(\"xhr-cb-time\",[a.now()-this.xhrCbStart,this.onload,n],n)})}},{}],11:[function(t,n,e){n.exports\u003dfunction(t){var n\u003ddocument.createElement(\"a\"),e\u003dwindow.location,r\u003d{};n.href\u003dt,r.port\u003dn.port;var o\u003dn.href.split(\"://\");!r.port\u0026\u0026o[1]\u0026\u0026(r.port\u003do[1].split(\"/\")[0].split(\"@\").pop().split(\":\")[1]),r.port\u0026\u0026\"0\"!\u003d\u003dr.port||(r.port\u003d\"https\"\u003d\u003d\u003do[0]?\"443\":\"80\"),r.hostname\u003dn.hostname||e.hostname,r.pathname\u003dn.pathname,r.protocol\u003do[0],\"/\"!\u003d\u003dr.pathname.charAt(0)\u0026\u0026(r.pathname\u003d\"/\"+r.pathname);var i\u003d!n.protocol||\":\"\u003d\u003d\u003dn.protocol||n.protocol\u003d\u003d\u003de.protocol,a\u003dn.hostname\u003d\u003d\u003ddocument.domain\u0026\u0026n.port\u003d\u003d\u003de.port;return r.sameOrigin\u003di\u0026\u0026(!n.hostname||a),r}},{}],12:[function(t,n,e){function r(){}function o(t,n,e){return function(){return i(t,[f.now()].concat(s(arguments)),n?null:this,e),n?void 0:this}}var i\u003dt(\"handle\"),a\u003dt(15),s\u003dt(16),c\u003dt(\"ee\").get(\"tracer\"),f\u003dt(\"loader\"),u\u003dNREUM;\"undefined\"\u003d\u003dtypeof window.newrelic\u0026\u0026(newrelic\u003du);var d\u003d[\"setPageViewName\",\"setCustomAttribute\",\"setErrorHandler\",\"finished\",\"addToTrace\",\"inlineHit\",\"addRelease\"],l\u003d\"api-\",p\u003dl+\"ixn-\";a(d,function(t,n){u[n]\u003do(l+n,!0,\"api\")}),u.addPageAction\u003do(l+\"addPageAction\",!0),u.setCurrentRouteName\u003do(l+\"routeName\",!0),n.exports\u003dnewrelic,u.interaction\u003dfunction(){return(new r).get()};var h\u003dr.prototype\u003d{createTracer:function(t,n){var e\u003d{},r\u003dthis,o\u003d\"function\"\u003d\u003dtypeof n;return i(p+\"tracer\",[f.now(),t,e],r),function(){if(c.emit((o?\"\":\"no-\")+\"fn-start\",[f.now(),r,o],e),o)try{return n.apply(this,arguments)}catch(t){throw c.emit(\"fn-err\",[arguments,this,t],e),t}finally{c.emit(\"fn-end\",[f.now()],e)}}}};a(\"setName,setAttribute,save,ignore,onEnd,getContext,end,get\".split(\",\"),function(t,n){h[n]\u003do(p+n)}),newrelic.noticeError\u003dfunction(t){\"string\"\u003d\u003dtypeof t\u0026\u0026(t\u003dnew Error(t)),i(\"err\",[t,f.now()])}},{}],13:[function(t,n,e){n.exports\u003dfunction(t){if(\"string\"\u003d\u003dtypeof t\u0026\u0026t.length)return t.length;if(\"object\"\u003d\u003dtypeof t){if(\"undefined\"!\u003dtypeof ArrayBuffer\u0026\u0026t instanceof ArrayBuffer\u0026\u0026t.byteLength)return t.byteLength;if(\"undefined\"!\u003dtypeof Blob\u0026\u0026t instanceof Blob\u0026\u0026t.size)return t.size;if(!(\"undefined\"!\u003dtypeof FormData\u0026\u0026t instanceof FormData))try{return JSON.stringify(t).length}catch(n){return}}}},{}],14:[function(t,n,e){var r\u003d0,o\u003dnavigator.userAgent.match(/Firefox[\\/\\s](\\d+\\.\\d+)/);o\u0026\u0026(r\u003d+o[1]),n.exports\u003dr},{}],15:[function(t,n,e){function r(t,n){var e\u003d[],r\u003d\"\",i\u003d0;for(r in t)o.call(t,r)\u0026\u0026(e[i]\u003dn(r,t[r]),i+\u003d1);return e}var o\u003dObject.prototype.hasOwnProperty;n.exports\u003dr},{}],16:[function(t,n,e){function r(t,n,e){n||(n\u003d0),\"undefined\"\u003d\u003dtypeof e\u0026\u0026(e\u003dt?t.length:0);for(var r\u003d-1,o\u003de-n||0,i\u003dArray(o\u003c0?0:o);++r\u003co;)i[r]\u003dt[n+r];return i}n.exports\u003dr},{}],17:[function(t,n,e){n.exports\u003d{exists:\"undefined\"!\u003dtypeof window.performance\u0026\u0026window.performance.timing\u0026\u0026\"undefined\"!\u003dtypeof window.performance.timing.navigationStart}},{}],18:[function(t,n,e){function r(t){return!(t\u0026\u0026t instanceof Function\u0026\u0026t.apply\u0026\u0026!t[a])}var o\u003dt(\"ee\"),i\u003dt(16),a\u003d\"nr@original\",s\u003dObject.prototype.hasOwnProperty,c\u003d!1;n.exports\u003dfunction(t,n){function e(t,n,e,o){function nrWrapper(){var r,a,s,c;try{a\u003dthis,r\u003di(arguments),s\u003d\"function\"\u003d\u003dtypeof e?e(r,a):e||{}}catch(f){l([f,\"\",[r,a,o],s])}u(n+\"start\",[r,a,o],s);try{return c\u003dt.apply(a,r)}catch(d){throw u(n+\"err\",[r,a,d],s),d}finally{u(n+\"end\",[r,a,c],s)}}return r(t)?t:(n||(n\u003d\"\"),nrWrapper[a]\u003dt,d(t,nrWrapper),nrWrapper)}function f(t,n,o,i){o||(o\u003d\"\");var a,s,c,f\u003d\"-\"\u003d\u003d\u003do.charAt(0);for(c\u003d0;c\u003cn.length;c++)s\u003dn[c],a\u003dt[s],r(a)||(t[s]\u003de(a,f?s+o:o,i,s))}function u(e,r,o){if(!c||n){var i\u003dc;c\u003d!0;try{t.emit(e,r,o,n)}catch(a){l([a,e,r,o])}c\u003di}}function d(t,n){if(Object.defineProperty\u0026\u0026Object.keys)try{var e\u003dObject.keys(t);return e.forEach(function(e){Object.defineProperty(n,e,{get:function(){return t[e]},set:function(n){return t[e]\u003dn,n}})}),n}catch(r){l([r])}for(var o in t)s.call(t,o)\u0026\u0026(n[o]\u003dt[o]);return n}function l(n){try{t.emit(\"internal-error\",n)}catch(e){}}return t||(t\u003do),e.inPlace\u003df,e.flag\u003da,e}},{}],ee:[function(t,n,e){function r(){}function o(t){function n(t){return t\u0026\u0026t instanceof r?t:t?c(t,s,i):i()}function e(e,r,o,i){if(!l.aborted||i){t\u0026\u0026t(e,r,o);for(var a\u003dn(o),s\u003dh(e),c\u003ds.length,f\u003d0;f\u003cc;f++)s[f].apply(a,r);var d\u003du[y[e]];return d\u0026\u0026d.push([g,e,r,a]),a}}function p(t,n){v[t]\u003dh(t).concat(n)}function h(t){return v[t]||[]}function m(t){return d[t]\u003dd[t]||o(e)}function w(t,n){f(t,function(t,e){n\u003dn||\"feature\",y[e]\u003dn,n in u||(u[n]\u003d[])})}var v\u003d{},y\u003d{},g\u003d{on:p,emit:e,get:m,listeners:h,context:n,buffer:w,abort:a,aborted:!1};return g}function i(){return new r}function a(){(u.api||u.feature)\u0026\u0026(l.aborted\u003d!0,u\u003dl.backlog\u003d{})}var s\u003d\"nr@context\",c\u003dt(\"gos\"),f\u003dt(15),u\u003d{},d\u003d{},l\u003dn.exports\u003do();l.backlog\u003du},{}],gos:[function(t,n,e){function r(t,n,e){if(o.call(t,n))return t[n];var r\u003de();if(Object.defineProperty\u0026\u0026Object.keys)try{return Object.defineProperty(t,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[n]\u003dr,r}var o\u003dObject.prototype.hasOwnProperty;n.exports\u003dr},{}],handle:[function(t,n,e){function r(t,n,e,r){o.buffer([t],r),o.emit(t,n,e)}var o\u003dt(\"ee\").get(\"handle\");n.exports\u003dr,r.ee\u003do},{}],id:[function(t,n,e){function r(t){var n\u003dtypeof t;return!t||\"object\"!\u003d\u003dn\u0026\u0026\"function\"!\u003d\u003dn?-1:t\u003d\u003d\u003dwindow?0:a(t,i,function(){return o++})}var o\u003d1,i\u003d\"nr@id\",a\u003dt(\"gos\");n.exports\u003dr},{}],loader:[function(t,n,e){function r(){if(!x++){var t\u003db.info\u003dNREUM.info,n\u003dl.getElementsByTagName(\"script\")[0];if(setTimeout(u.abort,3e4),!(t\u0026\u0026t.licenseKey\u0026\u0026t.applicationID\u0026\u0026n))return u.abort();f(y,function(n,e){t[n]||(t[n]\u003de)}),c(\"mark\",[\"onload\",a()+b.offset],null,\"api\");var e\u003dl.createElement(\"script\");e.src\u003d\"https://\"+t.agent,n.parentNode.insertBefore(e,n)}}function o(){\"complete\"\u003d\u003d\u003dl.readyState\u0026\u0026i()}function i(){c(\"mark\",[\"domContent\",a()+b.offset],null,\"api\")}function a(){return E.exists\u0026\u0026performance.now?Math.round(performance.now()):(s\u003dMath.max((new Date).getTime(),s))-b.offset}var s\u003d(new Date).getTime(),c\u003dt(\"handle\"),f\u003dt(15),u\u003dt(\"ee\"),d\u003dwindow,l\u003dd.document,p\u003d\"addEventListener\",h\u003d\"attachEvent\",m\u003dd.XMLHttpRequest,w\u003dm\u0026\u0026m.prototype;NREUM.o\u003d{ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var v\u003d\"\"+location,y\u003d{beacon:\"bam.nr-data.net\",errorBeacon:\"bam.nr-data.net\",agent:\"js-agent.newrelic.com/nr-1071.min.js\"},g\u003dm\u0026\u0026w\u0026\u0026w[p]\u0026\u0026!/CriOS/.test(navigator.userAgent),b\u003dn.exports\u003d{offset:s,now:a,origin:v,features:{},xhrWrappable:g};t(12),l[p]?(l[p](\"DOMContentLoaded\",i,!1),d[p](\"load\",r,!1)):(l[h](\"onreadystatechange\",o),d[h](\"onload\",r)),c(\"mark\",[\"firstbyte\",s],null,\"api\");var x\u003d0,E\u003dt(17)},{}]},{},[\"loader\",2,10,4,3]);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "rlrh"
        },
        "content": ";NREUM.info\u003d{beacon:\"bam.nr-data.net\",errorBeacon:\"bam.nr-data.net\",licenseKey:\"9b0cb93cab\",applicationID:\"32644292\",sa:1}"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Critical JS --\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003ewindow.PP\u003d{},window.PP.utils\u003d{},window.PP.config\u003d{};var googletag\u003dgoogletag||{};googletag.cmd\u003dgoogletag.cmd||[],PP.config.donateBanner\u003d{secondsUntilShown:.25,daysForDonateBarDismissal:3},function(e,t){var n\u003de.PP;n.utils.loadJS\u003dfunction(e,t){\"use strict\";var n\u003dwindow.document.getElementsByTagName(\"script\")[0],o\u003dwindow.document.createElement(\"script\");return o.src\u003de,o.async\u003d!0,n.parentNode.insertBefore(o,n),t\u0026\u0026\"function\"\u003d\u003dtypeof t\u0026\u0026(o.onload\u003dt),o},n.utils.cookie\u003dfunction(e,n,o){if(n\u003d\u003d\u003dt){var i\u003d(\"; \"+window.document.cookie).split(\"; \"+e+\"\u003d\");return 2\u003d\u003d\u003di.length?i.pop().split(\";\").shift():null}var a;if(!1\u003d\u003d\u003dn\u0026\u0026(o\u003d-1),o){var s\u003dnew Date;s.setTime(s.getTime()+24*o*60*60*1e3),a\u003d\"; expires\u003d\"+s.toGMTString()}else a\u003d\"\";window.document.cookie\u003de+\"\u003d\"+n+a+\"; path\u003d/\"}}(this),function(){\"use strict\";function e(e){c.push(e),1\u003d\u003dc.length\u0026\u0026r()}function t(){for(;c.length;)c[0](),c.shift()}function n(e){this.a\u003dd,this.b\u003dvoid 0,this.f\u003d[];var t\u003dthis;try{e(function(e){i(t,e)},function(e){a(t,e)})}catch(e){a(t,e)}}function o(e){return new n(function(t){t(e)})}function i(e,t){if(e.a\u003d\u003dd){if(t\u003d\u003de)throw new TypeError;var n\u003d!1;try{var o\u003dt\u0026\u0026t.then;if(null!\u003dt\u0026\u0026\"object\"\u003d\u003dtypeof t\u0026\u0026\"function\"\u003d\u003dtypeof o)return void o.call(t,function(t){n||i(e,t),n\u003d!0},function(t){n||a(e,t),n\u003d!0})}catch(t){return void(n||a(e,t))}e.a\u003d0,e.b\u003dt,s(e)}}function a(e,t){if(e.a\u003d\u003dd){if(t\u003d\u003de)throw new TypeError;e.a\u003d1,e.b\u003dt,s(e)}}function s(t){e(function(){if(t.a!\u003dd)for(;t.f.length;){var e\u003d(i\u003dt.f.shift())[0],n\u003di[1],o\u003di[2],i\u003di[3];try{0\u003d\u003dt.a?o(\"function\"\u003d\u003dtypeof e?e.call(void 0,t.b):t.b):1\u003d\u003dt.a\u0026\u0026(\"function\"\u003d\u003dtypeof n?o(n.call(void 0,t.b)):i(t.b))}catch(e){i(e)}}})}var r,c\u003d[];r\u003dfunction(){setTimeout(t)};var d\u003d2;n.prototype.g\u003dfunction(e){return this.c(void 0,e)},n.prototype.c\u003dfunction(e,t){var o\u003dthis;return new n(function(n,i){o.f.push([e,t,n,i]),s(o)})},window.Promise||(window.Promise\u003dn,window.Promise.resolve\u003do,window.Promise.reject\u003dfunction(e){return new n(function(t,n){n(e)})},window.Promise.race\u003dfunction(e){return new n(function(t,n){for(var i\u003d0;i\u003ce.length;i+\u003d1)o(e[i]).c(t,n)})},window.Promise.all\u003dfunction(e){return new n(function(t,n){var i\u003d0,a\u003d[];0\u003d\u003de.length\u0026\u0026t(a);for(var s\u003d0;s\u003ce.length;s+\u003d1)o(e[s]).c(function(n){return function(o){a[n]\u003do,(i+\u003d1)\u003d\u003de.length\u0026\u0026t(a)}}(s),n)})},window.Promise.prototype.then\u003dn.prototype.c,window.Promise.prototype.catch\u003dn.prototype.g)}(),function(){function e(e,t){document.addEventListener?e.addEventListener(\"scroll\",t,!1):e.attachEvent(\"scroll\",t)}function t(e){document.body?e():document.addEventListener?document.addEventListener(\"DOMContentLoaded\",function t(){document.removeEventListener(\"DOMContentLoaded\",t),e()}):document.attachEvent(\"onreadystatechange\",function t(){\"interactive\"!\u003ddocument.readyState\u0026\u0026\"complete\"!\u003ddocument.readyState||(document.detachEvent(\"onreadystatechange\",t),e())})}function n(e){this.a\u003ddocument.createElement(\"div\"),this.a.setAttribute(\"aria-hidden\",\"true\"),this.a.appendChild(document.createTextNode(e)),this.b\u003ddocument.createElement(\"span\"),this.c\u003ddocument.createElement(\"span\"),this.h\u003ddocument.createElement(\"span\"),this.f\u003ddocument.createElement(\"span\"),this.g\u003d-1,this.b.style.cssText\u003d\"max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;\",this.c.style.cssText\u003d\"max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;\",this.f.style.cssText\u003d\"max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;\",this.h.style.cssText\u003d\"display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;\",this.b.appendChild(this.h),this.c.appendChild(this.f),this.a.appendChild(this.b),this.a.appendChild(this.c)}function o(e,t){e.a.style.cssText\u003d\"max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:\"+t+\";\"}function i(e){var t\u003de.a.offsetWidth,n\u003dt+100;return e.f.style.width\u003dn+\"px\",e.c.scrollLeft\u003dn,e.b.scrollLeft\u003de.b.scrollWidth+100,e.g!\u003d\u003dt\u0026\u0026(e.g\u003dt,!0)}function a(t,n){function o(){var e\u003da;i(e)\u0026\u0026e.a.parentNode\u0026\u0026n(e.g)}var a\u003dt;e(t.b,o),e(t.c,o),i(t)}function s(e,t){var n\u003dt||{};this.family\u003de,this.style\u003dn.style||\"normal\",this.weight\u003dn.weight||\"normal\",this.stretch\u003dn.stretch||\"normal\"}function r(){if(null\u003d\u003d\u003du)if(c()\u0026\u0026/Apple/.test(window.navigator.vendor)){var e\u003d/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))(?:\\.([0-9]+))/.exec(window.navigator.userAgent);u\u003d!!e\u0026\u0026603\u003eparseInt(e[1],10)}else u\u003d!1;return u}function c(){return null\u003d\u003d\u003dp\u0026\u0026(p\u003d!!document.fonts),p}function d(){if(null\u003d\u003d\u003dh){var e\u003ddocument.createElement(\"div\");try{e.style.font\u003d\"condensed 100px sans-serif\"}catch(e){}h\u003d\"\"!\u003d\u003de.style.font}return h}function l(e,t){return[e.style,e.weight,d()?e.stretch:\"\",\"100px\",t].join(\" \")}var f\u003dnull,u\u003dnull,h\u003dnull,p\u003dnull;s.prototype.load\u003dfunction(e,i){var s\u003dthis,d\u003de||\"BESbswy\",u\u003d0,h\u003di||3e3,p\u003d(new Date).getTime();return new Promise(function(e,i){if(c()\u0026\u0026!r()){var m\u003dnew Promise(function(e,t){function n(){(new Date).getTime()-p\u003e\u003dh?t():document.fonts.load(l(s,\u0027\"\u0027+s.family+\u0027\"\u0027),d).then(function(t){1\u003c\u003dt.length?e():setTimeout(n,25)},function(){t()})}n()}),w\u003dnew Promise(function(e,t){u\u003dsetTimeout(t,h)});Promise.race([w,m]).then(function(){clearTimeout(u),e(s)},function(){i(s)})}else t(function(){function t(){var t;(t\u003d-1!\u003dv\u0026\u0026-1!\u003dg||-1!\u003dv\u0026\u0026-1!\u003dy||-1!\u003dg\u0026\u0026-1!\u003dy)\u0026\u0026((t\u003dv!\u003dg\u0026\u0026v!\u003dy\u0026\u0026g!\u003dy)||(null\u003d\u003d\u003df\u0026\u0026(t\u003d/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent),f\u003d!!t\u0026\u0026(536\u003eparseInt(t[1],10)||536\u003d\u003d\u003dparseInt(t[1],10)\u0026\u002611\u003e\u003dparseInt(t[2],10))),t\u003df\u0026\u0026(v\u003d\u003db\u0026\u0026g\u003d\u003db\u0026\u0026y\u003d\u003db||v\u003d\u003dx\u0026\u0026g\u003d\u003dx\u0026\u0026y\u003d\u003dx||v\u003d\u003dT\u0026\u0026g\u003d\u003dT\u0026\u0026y\u003d\u003dT)),t\u003d!t),t\u0026\u0026(P.parentNode\u0026\u0026P.parentNode.removeChild(P),clearTimeout(u),e(s))}function r(){if((new Date).getTime()-p\u003e\u003dh)P.parentNode\u0026\u0026P.parentNode.removeChild(P),i(s);else{var e\u003ddocument.hidden;!0!\u003d\u003de\u0026\u0026void 0!\u003d\u003de||(v\u003dc.a.offsetWidth,g\u003dm.a.offsetWidth,y\u003dw.a.offsetWidth,t()),u\u003dsetTimeout(r,50)}}var c\u003dnew n(d),m\u003dnew n(d),w\u003dnew n(d),v\u003d-1,g\u003d-1,y\u003d-1,b\u003d-1,x\u003d-1,T\u003d-1,P\u003ddocument.createElement(\"div\");P.dir\u003d\"ltr\",o(c,l(s,\"sans-serif\")),o(m,l(s,\"serif\")),o(w,l(s,\"monospace\")),P.appendChild(c.a),P.appendChild(m.a),P.appendChild(w.a),document.body.appendChild(P),b\u003dc.a.offsetWidth,x\u003dm.a.offsetWidth,T\u003dw.a.offsetWidth,r(),a(c,function(e){v\u003de,t()}),o(c,l(s,\u0027\"\u0027+s.family+\u0027\",sans-serif\u0027)),a(m,function(e){g\u003de,t()}),o(m,l(s,\u0027\"\u0027+s.family+\u0027\",serif\u0027)),a(w,function(e){y\u003de,t()}),o(w,l(s,\u0027\"\u0027+s.family+\u0027\",monospace\u0027))})})},\"object\"\u003d\u003dtypeof module?module.exports\u003ds:(window.FontFaceObserver\u003ds,window.FontFaceObserver.prototype.load\u003ds.prototype.load)}(),function(e,t){\"use strict\";e.PP.utils;var n\u003d[];if(\"sessionStorage\"in window){if(\"loaded\"\u003d\u003d\u003dsessionStorage.getItem(\"fontsLoaded\"))n.push(\"fonts-loaded\");else{var o\u003dnew FontFaceObserver(\"Tiempos Text\",{weight:400}),i\u003dnew FontFaceObserver(\"Tiempos Text\",{style:\"italic\",weight:400}),a\u003dnew FontFaceObserver(\"Tiempos Text\",{weight:700}),s\u003dnew FontFaceObserver(\"Tiempos Text\",{style:\"italic\",weight:700}),r\u003dnew FontFaceObserver(\"Graphik\",{weight:400}),c\u003dnew FontFaceObserver(\"Graphik\",{style:\"italic\",weight:400}),d\u003dnew FontFaceObserver(\"Graphik\",{weight:700}),l\u003dnew FontFaceObserver(\"Graphik\",{style:\"italic\",weight:700});e.Promise.all([o.load(),i.load(),a.load(),s.load(),r.load(),c.load(),d.load(),l.load()]).then(function(){e.document.documentElement.className+\u003d\" fonts-loaded\",sessionStorage.setItem(\"fontsLoaded\",\"loaded\")})}}e.document.documentElement.className+\u003d\" \"+n.join(\" \")}(this);\u003c/script\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- DFP JS --\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003ewindow.googletag \u003d window.googletag || {};"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.cmd \u003d googletag.cmd || [];"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var htlbid \u003d htlbid || {};"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "rlrh"
        },
        "content": "htlbid.que \u003d htlbid.que || [];"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "rlrh"
        },
        "content": "htlbid.opts \u003d htlbid.opts || {};"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "rlrh"
        },
        "content": "(function() {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var htlbidEl \u003d document.createElement(\"script\");"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "rlrh"
        },
        "content": "htlbidEl.type \u003d \"text/javascript\";"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "rlrh"
        },
        "content": "htlbidEl.async \u003d true;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "rlrh"
        },
        "content": "htlbidEl.src \u003d \"//htl.bid/build/bidder-propublica.js\";"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var htlbidTargetEl \u003d document.getElementsByTagName(\"head\")[0];"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "rlrh"
        },
        "content": "htlbidTargetEl.insertBefore(htlbidEl, htlbidTargetEl.firstChild);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "rlrh"
        },
        "content": "})();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.cmd.push(function() {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "rlrh"
        },
        "content": "htlbid.init();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Desktop_Leaderboard_1\u0027, [], \u0027Desktop_Leaderboard_1\u0027)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [[1, 1], [728, 90]])"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [])"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Desktop_MedRec_1\u0027, [], \u0027Desktop_MedRec_1\u0027)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [[1, 1], [300, 250]])"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [])"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Desktop_MedRec_2\u0027, [], \u0027Desktop_MedRec_2\u0027)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [[1, 1], [300, 250]])"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [])"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Mobile_Leaderboard_1\u0027, [], \u0027Mobile_Leaderboard_1\u0027)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [])"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [320, 50], [320, 100]])"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Mobile_Leaderboard_2\u0027, [], \u0027Mobile_Leaderboard_2\u0027)"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [])"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [320, 50]])"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Mobile_Leaderboard_3\u0027, [], \u0027Mobile_Leaderboard_3\u0027)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [])"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [320, 50], [300, 250]])"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Mobile_MedRec_1\u0027, [], \u0027Mobile_MedRec_1\u0027)"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [])"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [300, 250]])"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Sidebar_Donate\u0027, [], \u0027Sidebar_Donate\u0027)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [300, 600]])"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Top_Pushdown\u0027, [], \u0027Top_Pushdown\u0027)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [1030, 40]])"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.defineSlot(\u0027/2219821/Rt_Sdbr_Non-Mobile-Only300x250\u0027, [], \u0027ad-square-1\u0027)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [300, 250]])"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().setCentering(true);"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().collapseEmptyDivs();"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().setTargeting(\u0027is_home\u0027, \u0027no\u0027);"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().setTargeting(\u0027post_id\u0027, \u0027158610\u0027) // string, article ID for an individual page"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().setTargeting(\u0027post_tags\u0027, [\u0027The Trump Administration\u0027]) // array of strings"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().setTargeting(\u0027post_cats\u0027, [\u0027Trump, Inc.\u0027]) // array of strings"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().setTargeting(\u0027is_testing\u0027, \u0027no\u0027);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.enableServices();"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "rlrh"
        },
        "content": "});"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- STYLES --\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://assets.propublica.org/prod/v3/css/main.760ecb59.css\"\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- JS --\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e(function(H){H.className\u003dH.className.replace(/\\bno-js\\b/,\u0027enhanced\u0027)})(document.documentElement)\u003c/script\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript src\u003d\"https://www.propublica.org/js/public/assets/all.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Chartbeat --\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var _sf_async_config \u003d window._sf_async_config \u003d (window._sf_async_config || {});"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "rlrh"
        },
        "content": "_sf_async_config.uid \u003d 1577;"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "rlrh"
        },
        "content": "_sf_async_config.domain \u003d \u0027propublica.org\u0027;"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "rlrh"
        },
        "content": "_sf_async_config.useCanonical \u003d true;"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "rlrh"
        },
        "content": "_sf_async_config.useCanonicalDomain \u003d true;"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "rlrh"
        },
        "content": "_sf_async_config.sections \u003d \u0027Trump, Inc.\u0027;"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "rlrh"
        },
        "content": "_sf_async_config.authors \u003d \u0027Nick Varchaver\u0027;"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- OTHER --\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"amphtml\" href\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide/amp\"\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"shortcut icon\" type\u003d\"image/x-icon\" href\u003d\"https://assets.propublica.org/prod/v3/images/favicon.ico\"\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"icon\" type\u003d\"image/png\" href\u003d\"https://assets.propublica.org/prod/v3/images/favicon-16x16.png\" sizes\u003d\"16x16\"\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"icon\" type\u003d\"image/png\" href\u003d\"https://assets.propublica.org/prod/v3/images/favicon-32x32.png\" sizes\u003d\"32x32\"\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"icon\" type\u003d\"image/png\" href\u003d\"https://assets.propublica.org/prod/v3/images/favicon-96x96.png\" sizes\u003d\"96x96\"\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"icon\" type\u003d\"image/png\" href\u003d\"https://assets.propublica.org/prod/v3/images/favicon-128x128.png\" sizes\u003d\"128x128\"\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"icon\" type\u003d\"image/png\" href\u003d\"https://assets.propublica.org/prod/v3/images/favicon-196x196.png\" sizes\u003d\"196x196\"\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"apple-touch-icon\" href\u003d\"https://assets.propublica.org/prod/v3/images/apple-touch-icon-180x180.png\" sizes\u003d\"180x180\"\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"application-name\" content\u003d\"ProPublica\"\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"msapplication-TileColor\" content\u003d\"#FFFFFF\"\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"msapplication-TileImage\" content\u003d\"https://assets.propublica.org/prod/v3/images/mstile-144x144.png\"\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"msapplication-square70x70logo\" content\u003d\"https://assets.propublica.org/prod/v3/images/mstile-70x70.png\"\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"msapplication-square150x150logo\" content\u003d\"https://assets.propublica.org/prod/v3/images/mstile-150x150.png\"\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"msapplication-wide310x150logo\" content\u003d\"https://assets.propublica.org/prod/v3/images/mstile-310x150.png\"\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"msapplication-square310x310logo\" content\u003d\"https://assets.propublica.org/prod/v3/images/mstile-310x310.png\"\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cbody id\u003d\"www-propublica-org\" class\u003d\"article article-medium mast-compact\"\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- SVG Sprite Sheet (sprites in alphabetical order) --\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg style\u003d\"display: none;\"\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-close-light\" viewBox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eClose\u003c/title\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cg id\u003d\"Main-Nav\" stroke\u003d\"none\" stroke-width\u003d\"1\" fill\u003d\"none\" fill-rule\u003d\"evenodd\" stroke-linecap\u003d\"square\"\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cg transform\u003d\"translate(-1149.000000, -24.000000)\" stroke\u003d\"#FFFFFF\" stroke-width\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cg id\u003d\"Group-6\" transform\u003d\"translate(1150.000000, 25.000000)\"\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M0.393398282,21.6066017 L21.6066017,0.393398282\" id\u003d\"Line\"\u003e\u003c/path\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M0.393398282,21.6066017 L21.6066017,0.393398282\" id\u003d\"Line-Copy\" transform\u003d\"translate(11.000000, 11.000000) scale(-1, 1) translate(-11.000000, -11.000000) \"\u003e\u003c/path\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/g\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/g\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/g\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Comment --\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-comment\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eComment\u003c/title\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M23.05,6.71a8,8,0,0,1,0,7.58A9.86,9.86,0,0,1,20.5,17.4a12.6,12.6,0,0,1-3.83,2.07,14.1,14.1,0,0,1-4.67.77,15.91,15.91,0,0,1-2-.14Q6.83,23.25,3.5,23.25a.48.48,0,0,1-.48-.3.54.54,0,0,1,.12-.55l0,0a7.21,7.21,0,0,0,1.59-3,9,9,0,0,0,.19-.94A10.65,10.65,0,0,1,1.32,15,8.11,8.11,0,0,1,.95,6.71,9.87,9.87,0,0,1,3.5,3.6,12.6,12.6,0,0,1,7.33,1.52,14.1,14.1,0,0,1,12,.75a14.1,14.1,0,0,1,4.67.77A12.6,12.6,0,0,1,20.5,3.6,9.86,9.86,0,0,1,23.05,6.71Z\"/\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Creative Commons --\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-cc\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eCreative Commons\u003c/title\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M12,0A11.56,11.56,0,0,0,3.56,3.49,12.07,12.07,0,0,0,0,12a11.78,11.78,0,0,0,3.52,8.45A11.9,11.9,0,0,0,12,24a12.21,12.21,0,0,0,8.59-3.58A11.55,11.55,0,0,0,24,12a11.76,11.76,0,0,0-3.46-8.48A11.87,11.87,0,0,0,12,0Zm0,2.17A9.77,9.77,0,0,1,21.83,12,9.37,9.37,0,0,1,19,18.87a10,10,0,0,1-7,2.93A9.7,9.7,0,0,1,5.1,18.9,9.76,9.76,0,0,1,2.17,12,9.91,9.91,0,0,1,5.1,5,9.45,9.45,0,0,1,12,2.17Z\"/\u003e\u003cpath d\u003d\"M11.86,10A3.37,3.37,0,0,0,8.68,8.28,3.45,3.45,0,0,0,5.17,12a3.39,3.39,0,0,0,3.58,3.72,3.6,3.6,0,0,0,3.15-1.87l-1.49-.76a1.46,1.46,0,0,1-1.48,1c-1.1,0-1.61-.92-1.61-2.13s.43-2.13,1.61-2.13a1.52,1.52,0,0,1,1.33,1Z\"/\u003e\u003cpath d\u003d\"M18.79,10a3.38,3.38,0,0,0-3.18-1.73A3.45,3.45,0,0,0,12.1,12a3.39,3.39,0,0,0,3.58,3.72,3.6,3.6,0,0,0,3.15-1.87l-1.49-.76a1.46,1.46,0,0,1-1.48,1c-1.1,0-1.61-.92-1.61-2.13s.43-2.13,1.61-2.13a1.52,1.52,0,0,1,1.33,1Z\"/\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Donate --\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-donate\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eDonate\u003c/title\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M1,24H11V22H10a3,3,0,0,1-3-3H9a1,1,0,0,0,1,1h1V18H10a3,3,0,0,1,0-6h1V10H1Z\"/\u003e\u003cpath d\u003d\"M9,15a1,1,0,0,0,1,1h1V14H10A1,1,0,0,0,9,15Z\"/\u003e\u003cpath d\u003d\"M13,12h1a3,3,0,0,1,3,3H15a1,1,0,0,0-1-1H13v2h1a3,3,0,0,1,0,6H13v2H23V10H13Z\"/\u003e\u003cpath d\u003d\"M15,19a1,1,0,0,0-1-1H13v2h1A1,1,0,0,0,15,19Z\"/\u003e\u003cpath d\u003d\"M20.65,5A3.46,3.46,0,0,0,21,3.5,3.5,3.5,0,0,0,17.5,0,6.5,6.5,0,0,0,12,3.05,6.5,6.5,0,0,0,6.5,0,3.5,3.5,0,0,0,3,3.5,3.46,3.46,0,0,0,3.35,5H0V9H24V5ZM6.5,5a1.5,1.5,0,0,1,0-3,4.49,4.49,0,0,1,4.22,3Zm11,0H13.28A4.49,4.49,0,0,1,17.5,2a1.5,1.5,0,0,1,0,3Z\"/\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Email --\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-email\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eEmail\u003c/title\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M12,13.5,0,4.5A1.45,1.45,0,0,1,.44,3.44,1.44,1.44,0,0,1,1.5,3h21A1.5,1.5,0,0,1,24,4.5Zm0,2.7,12-9V19.5A1.5,1.5,0,0,1,22.5,21H1.5a1.44,1.44,0,0,1-1.06-.44A1.45,1.45,0,0,1,0,19.5V7.2Z\"/\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Email (add/subscribe) --\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-add-email\" viewBox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eAdd Email\u003c/title\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M18.81,2a5.13,5.13,0,0,0-5.2,5.06A5.2,5.2,0,0,0,24,7.08,5.13,5.13,0,0,0,18.81,2Zm3.24,5.7h-2.6v2.53H18.16V7.72h-2.6V6.45h2.6V3.91h1.29V6.45h2.6Zm-2.6,5.65V20.8A1.2,1.2,0,0,1,18.24,22h-17A1.2,1.2,0,0,1,0,20.8V11l9.73,7.14,7-5.12a6.89,6.89,0,0,0,2.1.34C19,13.4,19.24,13.39,19.45,13.37ZM9.73,16,0,8.9A1.2,1.2,0,0,1,1.22,7.72H12.35A6.28,6.28,0,0,0,15,12.18Z\"/\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Facebook --\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-facebook\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eFacebook\u003c/title\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M24,1.5v21A1.52,1.52,0,0,1,22.5,24h-6V14.67h3l.5-3.46H16.5V8.5a1.6,1.6,0,0,1,.38-1.15A1.48,1.48,0,0,1,18,6.95h2.25V3.83a15.64,15.64,0,0,0-2.46-.16A5.11,5.11,0,0,0,14.1,4.89a4.41,4.41,0,0,0-1.27,3.33v3h-3v3.46h3V24H1.5a1.44,1.44,0,0,1-1.05-.45A1.44,1.44,0,0,1,0,22.5V1.5A1.44,1.44,0,0,1,.45.45,1.44,1.44,0,0,1,1.5,0h21a1.44,1.44,0,0,1,1.05.45A1.44,1.44,0,0,1,24,1.5Z\"/\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Instagram --\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-instagram\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eInstagram\u003c/title\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M12,2.32c3.15,0,3.53,0,4.77.07a6.51,6.51,0,0,1,2.19.4,3.58,3.58,0,0,1,1.36.89A3.58,3.58,0,0,1,21.21,5a6.51,6.51,0,0,1,.4,2.19c.06,1.24.07,1.62.07,4.77s0,3.53-.07,4.77a6.51,6.51,0,0,1-.4,2.19A4,4,0,0,1,19,21.21a6.51,6.51,0,0,1-2.19.4c-1.24.06-1.62.07-4.77.07s-3.53,0-4.77-.07A6.51,6.51,0,0,1,5,21.21a3.58,3.58,0,0,1-1.36-.89A3.58,3.58,0,0,1,2.79,19a6.51,6.51,0,0,1-.4-2.19c-.06-1.24-.07-1.62-.07-4.77s0-3.53.07-4.77A6.51,6.51,0,0,1,2.79,5a3.58,3.58,0,0,1,.89-1.36A3.58,3.58,0,0,1,5,2.79a6.51,6.51,0,0,1,2.19-.4c1.24-.06,1.62-.07,4.77-.07M12,.19C8.79.19,8.39.2,7.13.26A8.84,8.84,0,0,0,4.26.81,6,6,0,0,0,.81,4.26,8.84,8.84,0,0,0,.26,7.13C.2,8.39.19,8.79.19,12s0,3.61.07,4.87a8.84,8.84,0,0,0,.55,2.87,6,6,0,0,0,3.45,3.45,8.84,8.84,0,0,0,2.87.55c1.26.06,1.66.07,4.87.07s3.61,0,4.87-.07a8.84,8.84,0,0,0,2.87-.55,6,6,0,0,0,3.45-3.45,8.84,8.84,0,0,0,.55-2.87c.06-1.26.07-1.66.07-4.87s0-3.61-.07-4.87a8.84,8.84,0,0,0-.55-2.87A6,6,0,0,0,19.74.81,8.84,8.84,0,0,0,16.87.26C15.61.2,15.21.19,12,.19Z\"/\u003e\u003cpath d\u003d\"M12,5.94A6.06,6.06,0,1,0,18.06,12,6.06,6.06,0,0,0,12,5.94Zm0,10A3.94,3.94,0,1,1,15.94,12,3.95,3.95,0,0,1,12,15.94Z\"/\u003e\u003ccircle cx\u003d\"18.3\" cy\u003d\"5.7\" r\u003d\"1.42\"/\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Messenger --\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-messenger\" viewBox\u003d\"0 0 22 22\"\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eFacebook Messenger\u003c/title\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath id\u003d\"Facebook-Messenger\" fill\u003d\"#FFFFFF\" fill-rule\u003d\"nonzero\" d\u003d\"M11,0 C4.92620865,0 0,4.55793451 0,10.1826196 C0,13.3828715 1.59262087,16.2367758 4.08651399,18.1042821 L4.08651399,22 L7.83994911,19.938539 C8.84198473,20.2156171 9.9,20.3652393 11,20.3652393 C17.0737913,20.3652393 22,15.8073048 22,10.1826196 C22,4.55793451 17.0737913,0 11,0 Z M12.1587786,13.6544081 L9.31221374,10.7284635 L3.8346056,13.7292191 L9.84122137,7.42015113 L12.6849873,10.3460957 L18.1625954,7.34534005 L12.1587786,13.6544081 Z\"\u003e\u003c/path\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Mobile --\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-mobile\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eMobile\u003c/title\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M18,0a1.45,1.45,0,0,1,1.06.44A1.45,1.45,0,0,1,19.5,1.5v21A1.5,1.5,0,0,1,18,24H6a1.5,1.5,0,0,1-1.5-1.5V1.5A1.45,1.45,0,0,1,4.94.44,1.44,1.44,0,0,1,6,0ZM17,18V4H7V18Zm-6.06,4.06A1.5,1.5,0,1,0,10.5,21,1.45,1.45,0,0,0,10.94,22.06Z\"/\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Podcast --\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-podcast\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003ePodcast\u003c/title\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M10,22a.48.48,0,0,1-.35-.14L4.29,16.5H.51a.49.49,0,0,1-.36-.15A.49.49,0,0,1,0,16V8a.49.49,0,0,1,.15-.36A.49.49,0,0,1,.51,7.5H4.29L9.65,2.14a.5.5,0,0,1,.86.35v19a.45.45,0,0,1-.3.46A.63.63,0,0,1,10,22Zm5.2-2a.45.45,0,0,1-.35.15A.49.49,0,0,1,14.5,20l-1.42-1.42a.51.51,0,0,1-.14-.36.47.47,0,0,1,.14-.35,8.09,8.09,0,0,0,2.14-3.71,8.18,8.18,0,0,0,0-4.25,8.09,8.09,0,0,0-2.14-3.71.47.47,0,0,1-.14-.35.51.51,0,0,1,.14-.36L14.5,4a.49.49,0,0,1,.36-.15.45.45,0,0,1,.35.15,11,11,0,0,1,2.46,3.72,11.06,11.06,0,0,1,0,8.47A11,11,0,0,1,15.21,20Zm3.19,3.89L17,22.43a.51.51,0,0,1-.14-.36.47.47,0,0,1,.14-.35,13.78,13.78,0,0,0,2.58-3.56,13,13,0,0,0,1.29-4.07,15.09,15.09,0,0,0,0-4.2,13,13,0,0,0-1.29-4.07A13.78,13.78,0,0,0,17,2.27a.47.47,0,0,1-.14-.35A.51.51,0,0,1,17,1.57L18.39.15A.51.51,0,0,1,18.75,0a.47.47,0,0,1,.35.14,17,17,0,0,1,2.72,3.57,16.43,16.43,0,0,1,1.65,4,17.24,17.24,0,0,1,0,8.51,16.43,16.43,0,0,1-1.65,4,17,17,0,0,1-2.72,3.57.47.47,0,0,1-.35.14A.51.51,0,0,1,18.39,23.85Z\"/\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Print --\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-print\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003ePrint\u003c/title\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M22.5,0a1.45,1.45,0,0,1,1.06.44A1.45,1.45,0,0,1,24,1.5v12A1.5,1.5,0,0,1,22.5,15H20V10H4v5H1.5a1.45,1.45,0,0,1-1.06-.44A1.45,1.45,0,0,1,0,13.5V1.5A1.45,1.45,0,0,1,.44.44,1.45,1.45,0,0,1,1.5,0ZM6,12V23.5a.5.5,0,0,0,.5.5h11a.5.5,0,0,0,.5-.5V12ZM18.44,5.56A1.5,1.5,0,0,0,21,4.5a1.5,1.5,0,0,0-3,0A1.45,1.45,0,0,0,18.44,5.56Z\"/\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- ProPublica Logo --\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"propublica-logo\" viewBox\u003d\"0 0 574.24 75\"\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eProPublica logo\u003c/title\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath class\u003d\"cls-1\" d\u003d\"M66.4,13.48,66,14.91l6.23,11.45,1.15.47L75,26.29V75H50.95A41.2,41.2,0,0,0,62.13,46.88a40.61,40.61,0,0,0-3.39-16.26,45.17,45.17,0,0,1,7.79-4.95l1.69-.2.14-.41L65,18.83H64.5l-.88,1.29c-2.91,1.9-4.67,2.3-8.54,3.79A41.35,41.35,0,0,0,20.46,5.42,39.87,39.87,0,0,0,0,10.91V0H75V8.81ZM57.32,47A37.54,37.54,0,0,1,44.65,75H0V16A37,37,0,0,1,57.32,47ZM43.7,37.06c0-8.13-6-12-17.75-12H7.18v3.66l4.2.95V62.2l-4.2.95v3.73H27.85V63.14l-7.18-.95V50.14h5.15C37.26,50.14,43.7,45.53,43.7,37.06Zm-9.76.27c0,5.15-2.78,8.33-7.25,8.33h-6V29.47H27C31.37,29.47,33.94,32.32,33.94,37.33Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M116.53,60.07l9.15,1.08v4.2H99.39v-4.2l5.28-1.36v-44l-5.28-1.36V10.41H123c15.31,0,22.9,5.28,22.9,16.13,0,11.18-8.33,17.41-23.1,17.41h-6.3Zm0-21.14h6.84c6.44,0,10.5-4.61,10.5-12.06,0-7.18-3.73-11.45-10.09-11.45h-7.25Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M200.74,61.15v4.2H185.9l-16-20.6h-2.51v15l5.28,1.36v4.2H150.27v-4.2l5.28-1.36V23.35l-5-1.36V17.93H175.2c10.5,0,17.55,5.08,17.55,12.67,0,8.4-5.76,12.2-11,13.55l13.48,15.79ZM167.41,39.74h4.47c5.76,0,8.81-3.18,8.81-8.88,0-5.35-2.85-7.93-8.81-7.93h-4.47Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M199.59,41.64c0-14.77,9.82-24.73,25.68-24.73s25.68,10,25.68,24.73-9.82,24.73-25.68,24.73S199.59,56.48,199.59,41.64Zm38.89,0c0-9.69-3.25-19.17-13.21-19.17S212.05,32,212.05,41.64s3.25,19.17,13.21,19.17S238.48,51.33,238.48,41.64Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M270.79,60.07l9.15,1.08v4.2H253.31v-4.2l5.62-1.36v-44l-5.62-1.36V10.41h24c15.31,0,22.9,5.28,22.9,16.13,0,11.18-8.33,17.41-23.1,17.41h-6.3Zm0-21.14h6.84c6.44,0,10.5-4.61,10.5-12.06,0-7.18-3.73-11.45-10.1-11.45h-7.25Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M354.26,22l-4.95,1.36V47c0,12.87-7.79,19.38-20.05,19.38-13.62,0-20.73-7.86-20.73-20v-23L303.58,22V17.93h22V22l-5.08,1.36V47.74c0,7.25,4.34,12.06,11.45,12.06,6.84,0,11.25-4.47,11.25-11.31V23.35L338.14,22V17.93h16.12Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M403.85,52.21c0,8.88-7.11,13.14-22,13.14H357.58v-4.2l5.56-1.36V23.35L358.26,22V17.93h23.92c12.6,0,19.51,3.79,19.51,11.72,0,6.17-4.06,9.08-10.91,9.89v.27C399.31,40.76,403.85,45.1,403.85,52.21ZM375,38.32h5.76c6.1,0,9-2.78,9-7.79,0-5.22-3.12-7.59-9-7.59H375Zm16.8,13.41c0-5.62-3.79-8.67-11.25-8.67H375V60.34h6.64C388.07,60.34,391.79,57.29,391.79,51.74Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M451.07,48.62l-4.4,16.73H408v-4.2l5.28-1.36V23.35L407.65,22V17.93h22.76V22l-5.28,1.36v37l14.16-.81L447,47.26Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M475.4,61.15v4.2H453v-4.2l5.28-1.36V23.35L453,22V17.93H475.4V22l-5.28,1.36V59.8Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M478,41.78c0-15.85,12.13-24.86,27-24.86a35.6,35.6,0,0,1,18.29,5.15l-2,13.21h-4.2l-1.69-9.08a13.23,13.23,0,0,0-10.09-4.13c-9.15,0-14.7,6.57-14.7,18.22,0,13.21,6.84,19.31,15.24,19.31,6.17,0,10.23-3.39,13.41-9.55l4.27,2c-4.27,10-11.65,14.36-21.07,14.36C488.4,66.37,478,56.48,478,41.78Z\"/\u003e\u003cpath class\u003d\"cls-1\" d\u003d\"M574.24,61.15v4.2H551.48v-4.2L557,60l-2.85-8.13h-16.6l-3.12,8.2,5.42,1.15-.07,4.2-16.53-.07v-4.2l4.27-1.08,14.9-37.33-4-1.29V17.93h13.69L569.3,60Zm-27.57-31-.47-1.56-.47,1.56-6.23,16.73h12.94Z\"/\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- RSS --\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-rss\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eRSS\u003c/title\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M24,23.5a.5.5,0,0,1-.5.5H20a.5.5,0,0,1-.5-.5,18.88,18.88,0,0,0-.68-5.05,18.84,18.84,0,0,0-1.9-4.55,19.06,19.06,0,0,0-3-3.84,19.06,19.06,0,0,0-3.84-3,18.84,18.84,0,0,0-4.55-1.9A18.88,18.88,0,0,0,.5,4.5a.49.49,0,0,1-.36-.15A.49.49,0,0,1,0,4V.5A.49.49,0,0,1,.15.15.49.49,0,0,1,.5,0,23.23,23.23,0,0,1,6.74.84a23.3,23.3,0,0,1,5.62,2.36,23.69,23.69,0,0,1,4.75,3.69,23.69,23.69,0,0,1,3.69,4.75,23.3,23.3,0,0,1,2.36,5.62A23.23,23.23,0,0,1,24,23.5Zm-7.5,0a.5.5,0,0,1-.5.5H12.5a.5.5,0,0,1-.5-.5A11.27,11.27,0,0,0,11.09,19a11.52,11.52,0,0,0-2.45-3.67A11.52,11.52,0,0,0,5,12.91,11.27,11.27,0,0,0,.5,12a.49.49,0,0,1-.36-.15A.49.49,0,0,1,0,11.5V8a.49.49,0,0,1,.15-.36A.49.49,0,0,1,.5,7.5a15.83,15.83,0,0,1,4.24.57A15.94,15.94,0,0,1,8.58,9.68a16,16,0,0,1,3.23,2.51,16,16,0,0,1,2.51,3.23,15.94,15.94,0,0,1,1.61,3.83A15.83,15.83,0,0,1,16.5,23.5ZM6.41,17.59a3.79,3.79,0,0,1,0,5.32A3.62,3.62,0,0,1,3.75,24a3.62,3.62,0,0,1-2.66-1.09,3.79,3.79,0,0,1,0-5.32A3.62,3.62,0,0,1,3.75,16.5,3.62,3.62,0,0,1,6.41,17.59Z\"/\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Search --\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-search\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eSearch\u003c/title\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M10.48,1.21a9.06,9.06,0,0,1,9,0,9,9,0,0,1,3.28,3.28A8.8,8.8,0,0,1,24,9a8.8,8.8,0,0,1-1.21,4.52,9,9,0,0,1-3.28,3.28A8.8,8.8,0,0,1,15,18a8.7,8.7,0,0,1-4.8-1.39L3.42,23.41A2,2,0,0,1,2,24a1.93,1.93,0,0,1-1.42-.59,2,2,0,0,1,0-2.84L7.39,13.8A8.7,8.7,0,0,1,6,9,8.8,8.8,0,0,1,7.21,4.48,9,9,0,0,1,10.48,1.21Zm2.19,13.32a5.94,5.94,0,0,0,4.65,0,5.94,5.94,0,0,0,3.2-3.2,5.94,5.94,0,0,0,0-4.65,5.94,5.94,0,0,0-3.2-3.2,5.94,5.94,0,0,0-4.65,0,5.94,5.94,0,0,0-3.2,3.2,5.94,5.94,0,0,0,0,4.65,5.94,5.94,0,0,0,3.2,3.2Z\"/\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Secure --\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-secure\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eSecure\u003c/title\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M19.5,10.5A1.5,1.5,0,0,1,21,12V22.5A1.5,1.5,0,0,1,19.5,24H4.5A1.5,1.5,0,0,1,3,22.5V12a1.5,1.5,0,0,1,1.5-1.5H6V6a5.84,5.84,0,0,1,.47-2.33A5.94,5.94,0,0,1,9.67.47a5.94,5.94,0,0,1,4.65,0,5.94,5.94,0,0,1,3.2,3.2A5.84,5.84,0,0,1,18,6v4.5ZM9,6v4.5h6V6a2.89,2.89,0,0,0-.88-2.12,3,3,0,0,0-4.24,0A2.89,2.89,0,0,0,9,6Z\"/\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Twitter --\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-twitter\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eTwitter\u003c/title\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M24,4.55A9.88,9.88,0,0,1,21.55,7.1v.64a13.51,13.51,0,0,1-.42,3.3,15.87,15.87,0,0,1-1.2,3.22,13.16,13.16,0,0,1-2,2.92,14.5,14.5,0,0,1-2.73,2.37,12.7,12.7,0,0,1-3.49,1.6,14.57,14.57,0,0,1-4.17.59,13.69,13.69,0,0,1-7.56-2,7.81,7.81,0,0,0,1.17.08,8.52,8.52,0,0,0,3.21-.63,11.36,11.36,0,0,0,2.89-1.7,4.66,4.66,0,0,1-2.85-1A4.79,4.79,0,0,1,2.7,14.07,4.78,4.78,0,0,0,4.92,14,4.8,4.8,0,0,1,2.1,12.3,4.76,4.76,0,0,1,1,9.16V9.11a4.91,4.91,0,0,0,2.23.61A4.94,4.94,0,0,1,1.59,8,4.75,4.75,0,0,1,1,5.64a4.82,4.82,0,0,1,.67-2.39A13.69,13.69,0,0,0,6.14,6.81,14.18,14.18,0,0,0,11.8,8.3a5.16,5.16,0,0,1-.11-1.14,4.73,4.73,0,0,1,1.44-3.47,4.73,4.73,0,0,1,3.47-1.44A4.91,4.91,0,0,1,20.23,3.8a9.79,9.79,0,0,0,3.11-1.2,4.72,4.72,0,0,1-2.17,2.73A9.36,9.36,0,0,0,24,4.55Z\"/\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- WhatsApp --\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg id\u003d\"icon-whatsapp\" viewBox\u003d\"0 0 25 24\"\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eWhatsApp\u003c/title\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M20.7589168,3.489665 C18.4736378,1.24305061 15.4401331,0.005702067 12.2036214,0 C5.53339105,0 0.110203805,5.33713471 0.104403605,11.8888097 C0.104403605,13.9871703 0.66122283,16.0285103 1.71685928,17.8360656 L0,24 L6.41502149,22.3464006 C8.18408258,23.2929437 10.1735513,23.7947256 12.1978212,23.7947256 L12.2036214,23.7947256 C12.2036214,23.7947256 12.2036214,23.7947256 12.2036214,23.7947256 C18.8680515,23.7947256 24.2970389,18.4575909 24.3028391,11.9002138 C24.3028391,8.72416251 23.0441957,5.7362794 20.7589168,3.489665 Z M12.2036214,21.787598 C10.3939589,21.787598 8.6248978,21.3086244 7.08204453,20.4076978 L6.71663191,20.1910192 L2.91170053,21.1717748 L3.92673558,17.5224519 L3.68892737,17.1461155 C2.67969252,15.572345 2.1518743,13.7533856 2.1518743,11.8888097 C2.1518743,6.43763364 6.66443011,2.00712758 12.2094216,2.00712758 C14.8949143,2.00712758 17.4180014,3.03920171 19.3204671,4.90377762 C21.2171326,6.7740556 22.2611686,9.25445474 22.2611686,11.8945118 C22.2553684,17.3513899 17.7428126,21.787598 12.2036214,21.787598 Z M17.7196118,14.380613 C17.4180014,14.2323592 15.9331501,13.5138988 15.6547405,13.4112616 C15.3763309,13.3143264 15.1733239,13.2630078 14.9761171,13.5595153 C14.7731101,13.8560228 14.1930901,14.5288667 14.019084,14.722737 C13.845078,14.9223093 13.6652718,14.9451176 13.3636614,14.7968639 C13.062051,14.6486101 12.0876174,14.3349964 10.9333775,13.3200285 C10.0343465,12.5331433 9.43112563,11.5580898 9.25131943,11.2615823 C9.07731342,10.9650748 9.23391882,10.805417 9.38472403,10.6571632 C9.51812864,10.5260157 9.68633445,10.3093371 9.83713965,10.1382751 C9.98794486,9.96721311 10.0401467,9.84176764 10.1387501,9.6421953 C10.2373535,9.44262295 10.1909519,9.27156094 10.1155493,9.1233072 C10.0401467,8.97505346 9.43692583,7.50962224 9.18171702,6.91660727 C8.93810861,6.33499644 8.6887,6.41482537 8.50309359,6.40912331 C8.32908758,6.39771917 8.12608057,6.39771917 7.92307356,6.39771917 C7.72006655,6.39771917 7.39525534,6.47184604 7.11684573,6.76835353 C6.83843611,7.06486101 6.06120928,7.78332145 6.06120928,9.24875267 C6.06120928,10.7141839 7.14584673,12.1225944 7.29665194,12.3221668 C7.44745714,12.5217391 9.42532543,15.5210264 12.4588302,16.8096935 C13.178055,17.1176051 13.7406744,17.3000713 14.1814897,17.4369209 C14.9065147,17.6650036 15.5619373,17.6307912 16.0839553,17.5566643 C16.6639754,17.4711333 17.870417,16.8382038 18.1256258,16.1425517 C18.3750344,15.4468995 18.3750344,14.8538845 18.2996318,14.7284391 C18.2242292,14.6029936 18.0212222,14.5288667 17.7196118,14.380613 Z\"\u003e\u003c/path\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- YouTube --\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csymbol id\u003d\"icon-youtube\" viewbox\u003d\"0 0 24 24\"\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eYouTube\u003c/title\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cpath d\u003d\"M24,12c0,8.5,0,8.5-12,8.5S0,20.5,0,12,0,3.5,12,3.5,24,3.5,24,12Zm-7.5,0L9,7.5v9Z\"/\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/symbol\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript src\u003d\"//www.propublica.org/js/public/assets/beacons.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript src\u003d\"//connect.facebook.net/en_US/all.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"fb-root\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "rlrh"
        },
        "content": "FB.init({"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "rlrh"
        },
        "content": "appId: \u0027229862657130557\u0027, // App ID"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "rlrh"
        },
        "content": "status: true, // check login status"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "rlrh"
        },
        "content": "cookie: true, // enable cookies to allow the server to access the session"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "rlrh"
        },
        "content": "xfbml: true // parse XFBML"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "rlrh"
        },
        "content": "});"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"masthead-wrap\"\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cheader role\u003d\"banner\" class\u003d\"masthead content\"\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav class\u003d\"org-nav\"\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"org-nav-item current\"\u003e\u003ca href\u003d\"/\"\u003eProPublica\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"org-nav-item electionland\"\u003e\u003ca href\u003d\"/electionland/\"\u003eElectionland\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"org-nav-item\"\u003e\u003ca href\u003d\"/illinois/\"\u003eProPublica Illinois\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"org-nav-item\"\u003e\u003ca href\u003d\"/local-reporting-network/\"\u003eLocal Reporting Network\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"org-nav-item\"\u003e\u003ca href\u003d\"/datastore/\"\u003eData Store\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .org-nav --\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"logo\" href\u003d\"/\"\u003e\u003cimg src\u003d\"https://assets.propublica.org/prod/v3/images/logo-propublica.svg\" alt\u003d\"ProPublica logo\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav class\u003d\"action-nav\"\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"action-nav-item donate\"\u003e\u003ca href\u003d\"https://donate.propublica.org/\"\u003eDonate\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"action-nav-item social twitter\"\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"https://twitter.com/propublica\"\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-twitter\" /\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"cta\"\u003eFollow us on Twitter\u003c/span\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"action-nav-item social facebook\"\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"https://www.facebook.com/propublica\"\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-facebook\" /\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"cta\"\u003eLike us on Facebook\u003c/span\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .action-nav --\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav class\u003d\"section-nav\"\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"section-nav-item topics with-subnav\" data-append\u003d\"/partials/stub-nav-topics\"\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"/topics/\"\u003eTopics\u003c/a\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"section-nav-item series with-subnav\" data-append\u003d\"/partials/stub-nav-series\"\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"/series/\"\u003eSeries\u003c/a\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"section-nav-item news-apps\"\u003e\u003ca href\u003d\"/newsapps/\"\u003eNews Apps\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"section-nav-item get-involved\"\u003e\u003ca href\u003d\"/getinvolved/\"\u003eGet Involved\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"section-nav-item impact\"\u003e\u003ca href\u003d\"/impact/\"\u003eImpact\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"section-nav-item about\"\u003e\u003ca href\u003d\"/about/\"\u003eAbout\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"section-nav-item search\"\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"#modal-search\" data-collapsible-target\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-search\" /\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"cta\"\u003eSearch\u003c/span\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .section-nav --\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav class\u003d\"email-nav\"\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"cta\" href\u003d\"#modal-newsletter\" data-collapsible-target\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-email\" /\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Sign Up"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"\" action\u003d\"https://signup.propublica.org/newsletter/turing\" method\u003d\"post\" id\u003d\"newsletter-header-form\"\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel class\u003d\"cta\" for\u003d\"pp-email-signup--lead\"\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-email\" /\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Get the Big Story"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/label\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfieldset\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel class\u003d\"a11y\" for\u003d\"pp-email-signup\"\u003eEmail:\u003c/label\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput class\u003d\"text subscribe-email-text\" type\u003d\"email\" placeholder\u003d\"Email address\" id\u003d\"pp-email-signup--lead\" name\u003d\"email\" onfocus\u003d\"recaptchaInit()\" /\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"target\" value\u003d\"l/125411/2018-11-01/5vd2wz\" /\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"success_location\" value\u003d\"https://www.propublica.org/forms/thankyou\" /\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"origin_location\" value\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"error_location\" value\u003d\"https://www.propublica.org/forms/error\" /\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput id\u003d\"newsletter-signup-header\" class\u003d\"btn subscribe-email-btn g-recaptcha\" type\u003d\"submit\" value\u003d\"Subscribe\" /\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/fieldset\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .email-nav --\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav class\u003d\"more-nav with-subnav collapsible collapsible-collapsed\" data-collapsible-hover\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003eMore\u003c/h2\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav class\u003d\"subnav\"\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul class\u003d\"org-nav\"\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item current\"\u003e\u003ca href\u003d\"/\"\u003eProPublica\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item\"\u003e\u003ca href\u003d\"/electionland\"\u003eElectionland\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item\"\u003e\u003ca href\u003d\"/illinois/\"\u003eProPublica Illinois\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item\"\u003e\u003ca href\u003d\"/local-reporting-network/\"\u003eLocal Reporting Network\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item\"\u003e\u003ca href\u003d\"/datastore/\"\u003eData Store\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul class\u003d\"section-nav\"\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item news-apps\"\u003e\u003ca href\u003d\"/newsapps/\"\u003eNews Apps\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item get-involved\"\u003e\u003ca href\u003d\"/getinvolved/\"\u003eGet Involved\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item impact\"\u003e\u003ca href\u003d\"/impact/\"\u003eImpact\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul class\u003d\"social-nav\"\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item\"\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"https://www.facebook.com/propublica\"\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-facebook\" /\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"cta\"\u003eLike us on Facebook\u003c/span\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item\"\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"https://twitter.com/propublica\"\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-twitter\" /\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"cta\"\u003eFollow us on Twitter\u003c/span\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul class\u003d\"utility-nav\"\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item search\"\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"#modal-search\" data-collapsible-target\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-search\" /\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"cta\"\u003eSearch ProPublica\u003c/span\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"subnav-item email\"\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"#modal-newsletter\" data-collapsible-target\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-email\" /\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"cta\"\u003eGet our stories by email\u003c/span\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .subnav --\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .more-nav --\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/header\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .masthead --\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .masthead-wrap --\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"newsletter-above collapsible\"\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"close-btn\"\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-close-light\" /\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"a11y\"\u003eClose this \u003c/span\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"newsletter-above-inner\"\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"form-subscribe\" method\u003d\"post\" action\u003d\"https://signup.propublica.org/newsletter/turing\" id\u003d\"daily-email-follow-pp-module\"\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"pp-module-title\"\u003eStay informed with the Big Story newsletter.\u003c/h2\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfieldset\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"form-label-set\"\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput placeholder\u003d\"Enter your email\" class\u003d\"input-text\" name\u003d\"email\" id\u003d\"subscribe-email\" type\u003d\"email\" required onfocus\u003d\"recaptchaInit()\" /\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel for\u003d\"subscribe-email\"\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\"\u003e\u003cuse xlink:href\u003d\"#icon-email\"\u003e\u003c/use\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/label\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput id\u003d\"newsletter-signup-above\" class\u003d\"g-recaptcha\" value\u003d\"Sign Up\" type\u003d\"submit\" /\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"success_location\" value\u003d\"https://www.propublica.org/forms/thankyou\" /\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"error_location\" value\u003d\"https://www.propublica.org/forms/error\" /\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"target\" value\u003d\"l/125411/2018-11-16/5x843z\" /\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"origin_location\" value\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/fieldset\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .newsletter --\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"level1\"\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003carticle\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"content-top\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cheader class\u003d\"article-header\"\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"series-header\"\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"series-title\"\u003e\u003ca href\u003d\"https://www.propublica.org/series/trump-inc\"\u003eTrump, Inc.\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch1 class\u003d\"hed\"\u003eOur Reporting on Michael Cohen: A Reading Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"dek\"\u003eThis week’s testimony by President Donald Trump’s former personal attorney and fixer held millions rapt with allegations of fraud, coded orders to lie and hundreds of threats. Many of those assertions had been explored before, as these articles show.\u003c/h2\u003e"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"metadata\"\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp class\u003d\"byline\"\u003eby \u003ca class\u003d\"name\" href\u003d\"https://www.propublica.org/people/nick-varchaver\"\u003eNick Varchaver\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctime class\u003d\"timestamp\" datetime\u003d\"2019-03-01EST01:16\"\u003eMarch 1, 1:16 p.m. EST\u003c/time\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav class\u003d\"story-tools semi-fixed\" data-element-ceiling\u003d\"body\" data-element-floor\u003d\".article-wrap\"\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"https://www.facebook.com/sharer/sharer.php?u\u003dhttps://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" title\u003d\"Share this story on Facebook\"\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-facebook\" /\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"https://twitter.com/intent/tweet?url\u003dhttps://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\u0026text\u003dOur Reporting on Michael Cohen: A Reading Guide\" title\u003d\"Share this story on Twitter\"\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-twitter\" /\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"nav-tools-link\" title\u003d\"Republish this story\" href\u003d\"/cdn-cgi/l/email-protection#2f105c5a4d454a4c5b12605a5d0a1d1f7d4a5f405d5b4641480a1d1f40410a1d1f62464c474e4a430a1d1f6c40474a410a1c6e0a1d1f6e0a1d1f7d4a4e4b4641480a1d1f685a464b4a094d404b5612660f5b47405a48475b0f56405a0f424648475b0f4a414540560f5b47465c0f4e5d5b464c434a0f495d40420f7f5d407f5a4d43464c4e150f475b5b5f5c0a1c6e0a1d690a1d69585858015f5d405f5a4d43464c4e01405d480a1d694e5d5b464c434a0a1d695b5d5a425f0246414c025f404b4c4e5c5b0242464c474e4a43024c40474a41025d4a4e4b46414802485a464b4a\"\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-email\" /\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"#comments\" title\u003d\"View and/or add comments\"\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-comment\" /\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca id\u003d\"republish-link\" class\u003d\"nav-tools-link\" title\u003d\"Republish our story\" href\u003d\"#modal-republish\" data-collapsible-target \u003e"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-cc\" /\u003e"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"https://donate.propublica.org\" title\u003d\"Donate to ProPublica\"\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-donate\" /\u003e"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/header\u003e\u003c!-- .article-header --\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"article-wrap\"\u003e"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfigure class\u003d\"lead-art\"\u003e"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"aspect-3-2\"\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cimg alt\u003d\"\" src\u003d\"https://assets.propublica.org/images/articles/_threeTwo400w/20190301-michael-cohen-guide-3x2.jpg\" width\u003d\"400\" height\u003d\"267\" srcset\u003d\"https://assets.propublica.org/images/articles/_threeTwo400w/20190301-michael-cohen-guide-3x2.jpg 400w, https://assets.propublica.org/images/articles/_threeTwo800w/20190301-michael-cohen-guide-3x2.jpg 800w, https://assets.propublica.org/images/articles/_threeTwo1200w/20190301-michael-cohen-guide-3x2.jpg 1200w, https://assets.propublica.org/images/articles/_threeTwo1600w/20190301-michael-cohen-guide-3x2.jpg 1600w, https://assets.propublica.org/images/articles/_threeTwo2000w/20190301-michael-cohen-guide-3x2.jpg 2000w\" /\u003e"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfigcaption\u003eMichael Cohen is sworn in to testify before the House Oversight and Reform Committee on Feb. 27."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"credit\"\u003e(Jim Watson/AFP/Getty Images)\u003c/span\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/figcaption\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/figure\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"article-body\"\u003e"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003caside class\u003d\"promo x-small left\"\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"series-entry\"\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"series-header\"\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"series-title\"\u003e\u003ca href\u003d\"https://www.propublica.org/topics/trump-administration\"\u003eThe Trump Administration\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp class\u003d\"series-description\"\u003eThe 45th President and His Administration\u003c/p\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/aside\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003caside class\u003d\"promo x-small left\"\u003e"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"series-entry\"\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"lead-art\"\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"aspect-3-2\" href\u003d\"https://www.propublica.org/series/trump-inc\"\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cimg alt\u003d\"\"  width\u003d\"400\" height\u003d\"267\" src\u003d\"https://assets.propublica.org/images/series/_threeTwo400w/20180207-trump-inc-3x2.jpg\" srcset\u003d\"https://assets.propublica.org/images/series/_threeTwo400w/20180207-trump-inc-3x2.jpg 400w, https://assets.propublica.org/images/series/_threeTwo800w/20180207-trump-inc-3x2.jpg 800w, https://assets.propublica.org/images/series/_threeTwo1200w/20180207-trump-inc-3x2.jpg 1200w\" /\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"series-header\"\u003e"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"series-title\"\u003e\u003ca href\u003d\"https://www.propublica.org/series/trump-inc\"\u003eTrump, Inc.\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp class\u003d\"series-description\"\u003eExploring the Mysteries of the President’s Businesses\u003c/p\u003e"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/aside\u003e"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"1.0\"\u003eThe roughly five hours that Michael Cohen spent this week testifying before the House Committee on Oversight and Government Reform provided riveting viewing. Alternately contrite and pugnacious, Cohen — who at various times has been the personal attorney for President Donald Trump, deputy finance chair of the Republican National Committee, an executive with the Trump Organization and a wheeler-dealer who held millions of dollars’ worth of New York City taxi medallions, and is soon to be an inmate in federal prison after pleading guilty to lying to Congress — described a way of doing business at the Trump Organization that many likened to a mob operation. Among other things, Cohen testified that Trump, using code, urged him to lie about the Trump Organization’s plans for a tower in Moscow. The White House dismissed Cohen’s testimony as the fabrications of a perjurer.\u003c/p\u003e"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"1.1\"\u003eProPublica and WNYC have reported on many of the subjects Cohen touched on in his testimony.\u003c/p\u003e"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"1.2\"\u003eDuring Cohen’s testimony, for example, he was asked about reporting by the “Trump, Inc.” podcast that the Trump International Hotel in Washington overcharged the Trump inaugural committee.\u003c/p\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003caside class\u003d\"newsletter newsletter-trump-inc large left\"\u003e"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eGet More Trump, Inc.\u003c/h3\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eStay up to date with email updates from WNYC and ProPublica about their ongoing investigations.\u003c/p\u003e"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"form-subscribe\" action\u003d\"https://nypublicradio.us5.list-manage.com/subscribe/post?u\u003d4109fdd323aaac7078eadaa8f\u0026amp;id\u003dd943f3fd91\" method\u003d\"post\"\u003e"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"form-label-set\"\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput class\u003d\"input-text\" type\u003d\"email\" value\u003d\"\" placeholder\u003d\"Enter your email\" name\u003d\"EMAIL\" id\u003d\"trump-inc-email-input\" required /\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel for\u003d\"trump-inc-email-input\"\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\"\u003e\u003cuse xlink:href\u003d\"#icon-email\"\u003e\u003c/use\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/label\u003e"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position: absolute; left: -5000px;\" aria-hidden\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"text\" name\u003d\"b_4109fdd323aaac7078eadaa8f_d943f3fd91\" tabindex\u003d\"-1\" value\u003d\"\"\u003e"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"submit\" value\u003d\"Subscribe\" name\u003d\"subscribe\"\u003e"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/aside\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003ca href\u003d\"https://www.propublica.org/article/trump-inc-podcast-trumps-inauguration-paid-trumps-company-with-ivanka-in-the-middle\"\u003eTrump’s Inauguration Paid Trump’s Company — With Ivanka in the Middle\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"3.0\"\u003eThe article noted, in a reference to the president’s elder daughter, that a “top inaugural planner emailed Ivanka and others at the company to ‘express my concern’ that the hotel was overcharging for its event spaces, worrying of what would happen ‘when this is audited.’” There’s more about the behind-the-scenes machinations of the Trump inaugural committee in \u003ca href\u003d\"https://www.propublica.org/article/trump-inc-new-evidence-emerges-of-possible-wrongdoing-by-trump-inaugural-committee\"\u003e“New Evidence Emerges of Possible Wrongdoing by Trump Inaugural Committee.”\u003c/a\u003e And to find out more about what happens at the president’s hotel, check out \u003ca href\u003d\"https://www.propublica.org/article/trump-inc-podcast-nigerian-presidential-candidate-atiku-abubakar\"\u003e“How a Nigerian Presidential Candidate Hired a Trump Lobbyist and Ended Up in Trump’s Lobby.”\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"3.1\"\u003eCohen testified that Trump would overstate or understate the value of his assets when it suited his interests. He’d typically pump up his claims, according to the testimony, to make himself look wealthier or to improve his position in Forbes magazine’s rankings of the wealthiest Americans. He would downplay the value of his assets when it came time to pay taxes on them.\u003c/p\u003e"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003ca href\u003d\"https://www.propublica.org/article/trump-said-he-made-21-million-in-income-from-his-new-york-city-contracts\"\u003eTrump Said He Made $21 Million in Income From His New York Contracts. He Actually Made a Lot Less.\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"3.2\"\u003eThis article examines claims in Trump’s financial disclosure forms “that he earned nearly $21 million through contracts with New York City to run two skating rinks in Central Park and a Bronx golf course.” Trump’s math did not square with ours, as this portion of the analysis shows: “He disclosed an income of $12.9 million for the two rinks, roughly the same amount as our estimate of his expenses for that period. We estimated that his expenses for those months were above $12 million. … This left Trump with a profit, by our estimate, of several hundred thousand dollars. That’s in line with Trump’s predictions to New York City, which is that he expected to make a profit, after taxes, of less than $500,000 annually.” In this instance, Trump was reporting profits of $12.9 million to the public and $500,000 to the tax man.\u003c/p\u003e"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003caside class\u003d\"ad-300\"\u003e"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /2219821/Mobile_Leaderboard --\u003e"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\u0027div-gpt-ad-Mobile_Leaderboard\u0027\u003e"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript data-cfasync\u003d\"false\" src\u003d\"/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js\"\u003e\u003c/script\u003e\u003cscript type\u003d\u0027text/javascript\u0027\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.cmd.push(function() {"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "rlrh"
        },
        "content": "window.Mobile_Leaderboard_SlotNumber \u003d window.Mobile_Leaderboard_SlotNumber || 0;"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "rlrh"
        },
        "content": "window.Mobile_Leaderboard_SlotNumber++;"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var slotName \u003d \u0027div-gpt-ad-Mobile_Leaderboard-\u0027 + window.Mobile_Leaderboard_SlotNumber;"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var slotDiv \u003d jQuery(\u0027\u003cdiv id\u003d\"\u0027+slotName+\u0027\"\u003e\u0027);"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var parent \u003d jQuery(\u0027.div-gpt-ad-Mobile_Leaderboard\u0027)[window.Mobile_Leaderboard_SlotNumber-1];"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "rlrh"
        },
        "content": "jQuery(parent).append(slotDiv);"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var slot \u003d googletag.defineSlot(\u0027/2219821/Mobile_Leaderboard\u0027, [], slotName)"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [])"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [[1, 1], [320, 50], [320, 100]])"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.display(slotName);"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().refresh([slot]);"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "rlrh"
        },
        "content": "});"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /2219821/Desktop_MedRec_3 --\u003e"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\u0027div-gpt-ad-Desktop_MedRec\u0027\u003e"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\u0027text/javascript\u0027\u003e"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.cmd.push(function() {"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "rlrh"
        },
        "content": "window.Desktop_MedRec_SlotNumber \u003d window.Desktop_MedRec_SlotNumber || 0;"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "rlrh"
        },
        "content": "window.Desktop_MedRec_SlotNumber++;"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var slotName \u003d \u0027div-gpt-ad-Desktop_MedRec-\u0027 + window.Desktop_MedRec_SlotNumber;"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var slotDiv \u003d jQuery(\u0027\u003cdiv id\u003d\"\u0027+slotName+\u0027\"\u003e\u0027);"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var parent \u003d jQuery(\u0027.div-gpt-ad-Desktop_MedRec\u0027)[window.Desktop_MedRec_SlotNumber-1];"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "rlrh"
        },
        "content": "jQuery(parent).append(slotDiv);"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var slot \u003d googletag.defineSlot(\u0027/2219821/Desktop_MedRec_3\u0027, [], slotName)"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".defineSizeMapping(googletag.sizeMapping()"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([960, 0], [[1, 1], [300, 250]])"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addSize([0, 0], [])"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".build())"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "rlrh"
        },
        "content": ".addService(googletag.pubads());"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.display(slotName);"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.pubads().refresh([slot]);"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "rlrh"
        },
        "content": "});"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/aside\u003e"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003ca href\u003d\"https://www.propublica.org/article/trump-inc-podcast-trump-organization-suing-towns-property-tax-breaks\"\u003eTrump’s Company Is Suing Towns Across the Country to Get Breaks on Taxes\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"5.0\"\u003eTrump has never been known for his humility, but apparently his company is prone to recognizing the deficiencies in its properties when it talks to tax assessors. Consider this example, about the Trump National Westchester Golf Club, 35 miles north of New York City. “Trump bought the course in 1996 for $7.5 million and put in $40 million of renovations. The course includes a 75,000-square-foot clubhouse, a 101-foot man-made waterfall and a host of luxury condominiums overlooking the fairway. Trump said in presidential financial disclosures that this property is worth $50 million. Ossining currently assesses the property at only $15 million. Yet in legal filings, the Trump Organization claims $15 million is far too high. In 2015, the company said the property is worth only $1.4 million in a lawsuit filed against the Town of Ossining in Westchester County court.”\u003c/p\u003e"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"5.1\"\u003eOne of many striking moments in Cohen’s testimony occurred when he was asked about making threats on behalf of Trump. Cohen estimated he had done so more than 500 times over a decade.\u003c/p\u003e"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003ca href\u003d\"https://www.propublica.org/article/a-short-history-of-threats-received-by-donald-trumps-opponents\"\u003eA Short History of Threats Received by Donald Trump’s Opponents\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"5.2\"\u003eThis article describes a series of menacing statements, allegedly made at the behest of Trump (most of which had nothing to do with Cohen), that were reported in different publications. Representatives for Trump did not respond to the allegations at the time. Here’s an example: “Nine years ago, a lawyer representing Trump Atlantic City casino creditors says he got threatening phone calls. The FBI traced one of them to a payphone outside the ‘Late Show With David Letterman,’ where Trump was appearing. ‘My name is Carmine,’ the caller told the lawyer, Kristopher Hansen, in 2009. ‘I don’t know why you’re fucking with Mr. Trump but if you keep fucking with Mr. Trump, we know where you live and we’re going to your house for your wife and kids.’”\u003c/p\u003e"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003caside data-pp-id\u003d\"6\" data-pp-blocktype\u003d\"promo\" class\u003d\"promo small right\"\u003e"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eSee the Series\u003c/h3\u003e"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"story-entry\"\u003e"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"lead-art\"\u003e"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"aspect-3-2\" href\u003d\"https://www.propublica.org/series/trump-inc\"\u003e"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cimg alt\u003d\"\" src\u003d\"https://assets.propublica.org/images/series/_threeTwo400w/20180207-trump-inc-3x2.jpg\" width\u003d\"400\" height\u003d\"267\" srcset\u003d\"https://assets.propublica.org/images/series/_threeTwo400w/20180207-trump-inc-3x2.jpg 400w, https://assets.propublica.org/images/series/_threeTwo800w/20180207-trump-inc-3x2.jpg 800w, https://assets.propublica.org/images/series/_threeTwo1200w/20180207-trump-inc-3x2.jpg 1200w\" /\u003e"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end if Featured Image --\u003e"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"hed\"\u003e\u003ca href\u003d\"https://www.propublica.org/series/trump-inc\"\u003eTrump, Inc.\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch4 class\u003d\"dek\"\u003eExploring the Mysteries of the President’s Businesses\u003c/h4\u003e"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/aside\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"7.0\"\u003eFinally, if you want to learn more about Cohen himself, read the profile by Andrea Bernstein and Ilya Marritz of WNYC for the “Trump, Inc.” podcast: “\u003ca href\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen\"\u003eThe Company Michael Cohen Kept\u003c/a\u003e.” That article explores much of Cohen’s colorful early career, taking readers from the taxi garages in a warehouse district of Queens deep into his days representing more than 100 plaintiffs who claimed they were injured in auto collisions. “A distinctive pattern emerged early in Cohen’s career,” the article notes. “Many of the people who crossed paths with Cohen when he worked in Queens and Brooklyn were disciplined, disbarred, accused or convicted of crimes.”\u003c/p\u003e"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp data-pp-blocktype\u003d\"copy\" data-pp-id\u003d\"7.1\"\u003eAnd to hear Cohen’s testimony dissected by Bernstein and Marritz for the “Trump, Inc.” podcast, turn to “\u003ca href\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-hearing-congress\"\u003eWhat We’ve Learned From Michael Cohen\u003c/a\u003e.”\u003c/p\u003e"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"topics-list\"\u003e"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eFiled under:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/topics/trump-administration\"\u003eThe Trump Administration\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .article-body--\u003e"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"content-bottom\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfooter class\u003d\"article-footer\"\u003e"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"newsletter\"\u003e"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"newsletter-inner\"\u003e"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"form-subscribe\" method\u003d\"post\" action\u003d\"https://signup.propublica.org/newsletter/turing\" id\u003d\"daily-email-follow-pp-module\"\u003e"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"pp-module-title\"\u003eGet the latest news from ProPublica every afternoon.\u003c/h2\u003e"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfieldset\u003e"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"form-label-set\"\u003e"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput placeholder\u003d\"Enter your email\" class\u003d\"input-text\" name\u003d\"email\" id\u003d\"subscribe-email\" type\u003d\"email\" required onfocus\u003d\"recaptchaInit()\" /\u003e"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel for\u003d\"subscribe-email\"\u003e"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\"\u003e\u003cuse xlink:href\u003d\"#icon-email\"\u003e\u003c/use\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/label\u003e"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput id\u003d\"newsletter-signup-follow\" class\u003d\"g-recaptcha\" value\u003d\"Sign Up\" type\u003d\"submit\" /\u003e"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"success_location\" value\u003d\"https://www.propublica.org/forms/thankyou\" /\u003e"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"error_location\" value\u003d\"https://www.propublica.org/forms/error\" /\u003e"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"target\" value\u003d\"l/125411/2018-05-17/5bnss9\" /\u003e"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"origin_location\" value\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/fieldset\u003e"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .newsletter --\u003e"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"author-bio\"\u003e"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"thumbnail\" href\u003d\"https://www.propublica.org/people/nick-varchaver\"\u003e\u003cimg alt\u003d\"Portrait of Nick Varchaver\" src\u003d\"https://assets.propublica.org/images/bio/_oneOne75w/20171212_portraits_0658-nick-varchaver-sized.jpg\" width\u003d\"75\" height\u003d\"75\" srcset\u003d\"https://assets.propublica.org/images/bio/_oneOne75w/20171212_portraits_0658-nick-varchaver-sized.jpg 75w, https://assets.propublica.org/images/bio/_oneOne150w/20171212_portraits_0658-nick-varchaver-sized.jpg 150w\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"author-name\"\u003e\u003ca href\u003d\"https://www.propublica.org/people/nick-varchaver\"\u003eNick Varchaver\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eNick Varchaver is a senior editor at ProPublica.\u003c/p\u003e"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e \u003c!-- end .info --\u003e"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul class\u003d\"contact\"\u003e"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e \u003c!-- end .contact --\u003e"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e \u003c!-- end .author-bio --\u003e"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/footer\u003e\u003c!-- end .article-footer --\u003e"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .article-wrap--\u003e"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"global-promos\"\u003e"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /2219821/Desktop_MedRec_1 --\u003e"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"ad ad-article ad-300x250\"\u003e"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"inner\" id\u003d\u0027Desktop_MedRec_1\u0027\u003e"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.cmd.push(function() { googletag.display(\u0027Desktop_MedRec_1\u0027); });"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .ad --\u003e"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"pp-module module-follow\" id\u003d\"l1\"\u003e"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"pp-module-title\"\u003eFollow ProPublica\u003c/h2\u003e"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul class\u003d\"list-plain links-social\"\u003e"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"btn btn-social social-main social-link-twitter\" href\u003d\"https://twitter.com/propublica\" id\u003d\"twitter-follow-pp-module\"\u003e"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e\u003cuse xlink:href\u003d\"#icon-twitter\" /\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan\u003eTwitter\u003c/span\u003e"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"btn btn-social social-main social-link-fb\" href\u003d\"https://www.facebook.com/propublica/\" id\u003d\"facebook-follow-pp-module\"\u003e"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e\u003cuse xlink:href\u003d\"#icon-facebook\" /\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan\u003eFacebook\u003c/span\u003e"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"btn btn-social social-main social-link-youtube\" href\u003d\"https://www.youtube.com/user/propublica\" id\u003d\"youtube-follow-pp-module\"\u003e"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e\u003cuse xlink:href\u003d\"#icon-youtube\" /\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan\u003eYouTube\u003c/span\u003e"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"btn btn-social social-main social-link-rss\" href\u003d\"http://feeds.propublica.org/propublica/main\" id\u003d\"rss-follow-pp-module\"\u003e"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e\u003cuse xlink:href\u003d\"#icon-rss\" /\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan\u003e\u003cabbr title\u003d\"Rich Site Summary\"\u003eRSS\u003c/abbr\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"form-subscribe\" method\u003d\"post\" action\u003d\"https://signup.propublica.org/newsletter/turing\" id\u003d\"sidebar-email-subscribe-module\"\u003e"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"pp-module-title\"\u003eStay Informed\u003c/h2\u003e"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp class\u003d\"pp-module-description\"\u003eGet our investigations delivered to your inbox with the Big Story newsletter.\u003c/p\u003e"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"form-label-set\"\u003e"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput placeholder\u003d\"Enter your email\" class\u003d\"input-text\" name\u003d\"email\" id\u003d\"sidebar-email-subscribe-input\" type\u003d\"email\" required onfocus\u003d\"recaptchaInit()\" /\u003e"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel for\u003d\"sidebar-email-subscribe-input\"\u003e"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\"\u003e\u003cuse xlink:href\u003d\"#icon-email\"\u003e\u003c/use\u003e\u003c/svg\u003e"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/label\u003e"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput id\u003d\"newsletter-signup-follow-main\" class\u003d\"g-recaptcha\" value\u003d\"Sign Up\" type\u003d\"submit\" /\u003e"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"success_location\" value\u003d\"https://www.propublica.org/forms/thankyou\" /\u003e"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"error_location\" value\u003d\"https://www.propublica.org/forms/error\" /\u003e"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"target\" value\u003d\"l/125411/2018-11-01/5vd2q2\" /\u003e"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"origin_location\" value\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .pp-module.module-follow --\u003e"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"pp-module module-popular\" id\u003d\"r7\"\u003e"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"pp-module-title\"\u003eMost Popular Stories\u003c/h2\u003e"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"module-content\" id\u003d\"hottest-stories-module\"\u003e"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"tabs\"\u003e"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"pane-stories collapsible\" data-collapsible-set\u003d\"pp-stories-hottest\"\u003e"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"hed-stories\"\u003eMost Read\u003c/h3\u003e"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003col class\u003d\"list-plain list-stories\"\u003e"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/ivanka-donald-trump-jr-close-to-being-charged-felony-fraud\" title\u003d\"View this\"\u003eIvanka and Donald Trump Jr. Were Close to Being Charged With Felony Fraud\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/the-story-behind-jared-kushners-curious-acceptance-into-harvard\" title\u003d\"View this\"\u003eThe Story Behind Jared Kushner’s Curious Acceptance Into Harvard\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/despite-crackdowns-white-supremacist-and-neo-nazi-videos-take-stubborn-root-on-youtube\" title\u003d\"View this\"\u003eDespite Crackdowns, White Supremacist and Neo-Nazi Videos Take Stubborn Root on YouTube\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/kentucky-legislature-bill-strips-authority-alison-grimes\" title\u003d\"View this\"\u003eKentucky Legislature Passes Bill Stripping Grimes of Authority Over State Board of Elections\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/the-tragedy-of-baltimore\" title\u003d\"View this\"\u003eThe Tragedy of Baltimore\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- /end .pane-stories --\u003e"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"pane-stories collapsible collapsible-collapsed\" data-collapsible-set\u003d\"pp-stories-hottest\"\u003e"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"hed-stories\"\u003eMost Emailed\u003c/h3\u003e"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003col class\u003d\"list-plain list-stories\"\u003e"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/ivanka-donald-trump-jr-close-to-being-charged-felony-fraud\" title\u003d\"View this\"\u003eIvanka and Donald Trump Jr. Were Close to Being Charged With Felony Fraud\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/despite-crackdowns-white-supremacist-and-neo-nazi-videos-take-stubborn-root-on-youtube\" title\u003d\"View this\"\u003eDespite Crackdowns, White Supremacist and Neo-Nazi Videos Take Stubborn Root on YouTube\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/the-story-behind-jared-kushners-curious-acceptance-into-harvard\" title\u003d\"View this\"\u003eThe Story Behind Jared Kushner’s Curious Acceptance Into Harvard\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/the-tragedy-of-baltimore\" title\u003d\"View this\"\u003eThe Tragedy of Baltimore\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propublica.org/article/kentucky-legislature-bill-strips-authority-alison-grimes\" title\u003d\"View this\"\u003eKentucky Legislature Passes Bill Stripping Grimes of Authority Over State Board of Elections\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- /end .pane-stories --\u003e"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- /end .tabs --\u003e"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- /end .module-content --\u003e"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- /end .pp-module.module-popular --\u003e"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /2219821/Desktop_MedRec_2 --\u003e"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"ad ad-article ad-300x250\"\u003e"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"inner\" id\u003d\u0027Desktop_MedRec_2\u0027\u003e"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "rlrh"
        },
        "content": "googletag.cmd.push(function() { googletag.display(\u0027Desktop_MedRec_2\u0027); });"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .ad --\u003e"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .global-promos --\u003e"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/article\u003e"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"post-article\"\u003e"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"related-stories\"\u003e"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e \u003c!-- end .related-stories --\u003e"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"comments\"\u003e"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"disqus_thread\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var disqus_config \u003d function () {"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "rlrh"
        },
        "content": "this.page.url \u003d \u0027https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\u0027;"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "rlrh"
        },
        "content": "this.page.title \u003d \u0027Our Reporting on Michael Cohen: A Reading Guide\u0027;"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "rlrh"
        },
        "content": "this.page.identifier \u003d \u0027158610\u0027;"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "rlrh"
        },
        "content": "this.callbacks.onReady \u003d [function() {"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "rlrh"
        },
        "content": "setTimeout(function() {"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Waypoint.refreshAll();"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}, 1000);"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}];"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "rlrh"
        },
        "content": "};"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end #comments --\u003e"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .post-article --\u003e"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"latest-stories\"\u003e"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"title\"\u003eLatest Stories from ProPublica\u003c/h3\u003e"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"story-entry region-national\"\u003e"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"lead-art\"\u003e"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"aspect-3-2\" href\u003d\"https://www.propublica.org/article/despite-crackdowns-white-supremacist-and-neo-nazi-videos-take-stubborn-root-on-youtube\"\u003e"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cimg alt\u003d\"\" src\u003d\"https://assets.propublica.org/images/articles/_threeTwo400w/20190315-new-zealand-3x2.jpg\" width\u003d\"400\" height\u003d\"267\" srcset\u003d\"https://assets.propublica.org/images/articles/_threeTwo400w/20190315-new-zealand-3x2.jpg 400w, https://assets.propublica.org/images/articles/_threeTwo800w/20190315-new-zealand-3x2.jpg 800w, https://assets.propublica.org/images/articles/_threeTwo1200w/20190315-new-zealand-3x2.jpg 1200w\" /\u003e"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"hed\"\u003e\u003ca href\u003d\"https://www.propublica.org/article/despite-crackdowns-white-supremacist-and-neo-nazi-videos-take-stubborn-root-on-youtube\"\u003eDespite Crackdowns, White Supremacist and Neo-Nazi Videos Take Stubborn Root on YouTube\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .story-entry --\u003e"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"story-entry region-national\"\u003e"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"hed\"\u003e\u003ca href\u003d\"https://www.propublica.org/atpropublica/propublica-and-houston-chronicle-project-named-a-finalist-for-health-care-print-journalism-award\"\u003eProPublica and Houston Chronicle Project Named a Finalist for Health Care Print Journalism Award\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .story-entry --\u003e"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"story-entry region-national\"\u003e"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"lead-art\"\u003e"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"aspect-3-2\" href\u003d\"https://www.propublica.org/article/kentucky-legislature-bill-strips-authority-alison-grimes\"\u003e"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cimg alt\u003d\"\" src\u003d\"https://assets.propublica.org/images/articles/_threeTwo400w/GettyImages-1128973940.jpg\" width\u003d\"400\" height\u003d\"267\" srcset\u003d\"https://assets.propublica.org/images/articles/_threeTwo400w/GettyImages-1128973940.jpg 400w, https://assets.propublica.org/images/articles/_threeTwo800w/GettyImages-1128973940.jpg 800w, https://assets.propublica.org/images/articles/_threeTwo1200w/GettyImages-1128973940.jpg 1200w\" /\u003e"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"hed\"\u003e\u003ca href\u003d\"https://www.propublica.org/article/kentucky-legislature-bill-strips-authority-alison-grimes\"\u003eKentucky Legislature Passes Bill Stripping Grimes of Authority Over State Board of Elections\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .story-entry --\u003e"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"story-entry region-national\"\u003e"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"lead-art\"\u003e"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"aspect-3-2\" href\u003d\"https://www.propublica.org/getinvolved/have-tsa-agents-searched-your-hair-in-airport-security-lines-tell-us\"\u003e"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cimg alt\u003d\"\" src\u003d\"https://assets.propublica.org/images/getInvolved/_threeTwo400w/20190315-tsa-hair-patdowns-3x2.jpg\" width\u003d\"400\" height\u003d\"267\" srcset\u003d\"https://assets.propublica.org/images/getInvolved/_threeTwo400w/20190315-tsa-hair-patdowns-3x2.jpg 400w, https://assets.propublica.org/images/getInvolved/_threeTwo800w/20190315-tsa-hair-patdowns-3x2.jpg 800w, https://assets.propublica.org/images/getInvolved/_threeTwo1200w/20190315-tsa-hair-patdowns-3x2.jpg 1200w\" /\u003e"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"hed\"\u003e\u003ca href\u003d\"https://www.propublica.org/getinvolved/have-tsa-agents-searched-your-hair-in-airport-security-lines-tell-us\"\u003eHave TSA Agents Searched Your Hair in Airport Security Lines? Tell Us.\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .story-entry --\u003e"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e \u003c!-- end .latest-stories --\u003e"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .content --\u003e"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- FOOTER --\u003e"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"modal-newsletter\" class\u003d\"modal collapsible collapsible-collapsed\"\u003e"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-close-light\" /\u003e"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"a11y\"\u003eClose this menu\u003c/span\u003e"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"modal-inner\"\u003e"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"subscribe-email\" action\u003d\"https://signup.propublica.org/newsletter/turing\" method\u003d\"post\" \u003e"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"pp-module-title\"\u003eGet our Big Story newsletter.\u003c/h2\u003e"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfieldset\u003e"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel class\u003d\"a11y\" for\u003d\"newsletter-signup-modal-email-input\"\u003eEmail:\u003c/label\u003e"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput class\u003d\"text subscribe-email-text\" type\u003d\"email\" placeholder\u003d\"Enter your email\" id\u003d\"newsletter-signup-modal-email-input\" name\u003d\"email\" onfocus\u003d\"recaptchaInit()\" /\u003e"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput id\u003d\"newsletter-signup-modal\" class\u003d\"btn subscribe-email-btn g-recaptcha\" type\u003d\"submit\" value\u003d\"Sign Up\" /\u003e"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"target\" value\u003d\"l/125411/2018-11-01/5vd2xb\" /\u003e"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"success_location\" value\u003d\"https://www.propublica.org/forms/thankyou\" /\u003e"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"error_location\" value\u003d\"https://www.propublica.org/forms/error\" /\u003e"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"origin_location\" value\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/fieldset\u003e"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e\u003c!-- end .subscribe-email --\u003e"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .modal-inner --\u003e"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .modal --\u003e"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"modal-search\" class\u003d\"modal collapsible collapsible-collapsed\"\u003e"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-close-light\" /\u003e"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"a11y\"\u003eClose this menu\u003c/span\u003e"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"modal-inner\"\u003e"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"nav-site-search\" action\u003d\"https://www.propublica.org/search\" method\u003d\"get\"\u003e"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel class\u003d\"a11y hed-form hed-site-search\"\u003eSearch ProPublica:\u003c/label\u003e"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfieldset class\u003d\"nav-site-search-fields\"\u003e"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput placeholder\u003d\"Search ProPublica\" class\u003d\"text nav-site-search-text\" type\u003d\"search\" value\u003d\"\" name\u003d\"qss\" /\u003e"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clabel class\u003d\"nav-site-search-cta\"\u003e"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"submit\" value\u003d\"Search\" /\u003e"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/label\u003e"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/fieldset\u003e"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .modal-inner --\u003e"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .modal --\u003e"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"modal-republish\" class\u003d\"modal collapsible collapsible-collapsed\"\u003e"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-close-light\" /\u003e"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"a11y\"\u003eClose this overlay (Creative Commons)\u003c/span\u003e"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/h2\u003e"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"modal-inner\"\u003e"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"modal-header\"\u003e"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eRepublish This Story for Free\u003c/h3\u003e"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca rel\u003d\"license\" href\u003d\"https://creativecommons.org/licenses/by-nc-nd/3.0/\"\u003e"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Creative Commons License (CC BY-NC-ND 3.0)"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"republish-instructions\"\u003e"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3 class\u003d\"title\"\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp class\u003d\"byline\"\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp class\u003d\"intro\"\u003eThank you for your interest in republishing this story. You are are free republish it so long as you do the following:\u003c/p\u003e"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eYou can’t edit our material, except to reflect relative changes in time, location and editorial style. (For example, “yesterday” can be changed to “last week,” and “Portland, Ore.” to “Portland” or “here.”)\u003c/li\u003e"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eIf you’re republishing online, you have to link to us and to include all of the links from our story, as well as our \u003ca href\u003d\"https://www.propublica.org/about/pixelping\"\u003ePixelPing tag\u003c/a\u003e.\u003c/li\u003e"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eYou can’t sell our material separately.\u003c/li\u003e"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eIt’s okay to put our stories on pages with ads, but not ads specifically sold against our stories.\u003c/li\u003e"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eYou can’t republish our material wholesale, or automatically; you need to select stories to be republished individually.\u003c/li\u003e"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eYou cannot republish our photographs without specific permission (ask our Public Relations Director \u003ca href\u003d\"/cdn-cgi/l/email-protection#93defafdfbf6f6bdd0fbfcd3e3e1fce3e6f1fffaf0f2bdfce1f4\"\u003eMinhee Cho\u003c/a\u003e if you’d like to).\u003c/li\u003e"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eYou have to credit us — ideally in the byline. We prefer “Author Name, ProPublica.”\u003c/li\u003e"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .republish-content --\u003e"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"republish-copy\"\u003e"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eCopy and paste the following into your page to republish:\u003c/p\u003e"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .republish-copy --\u003e"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .modal-inner --\u003e"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .modal --\u003e"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"modal-email-share\" class\u003d\"modal collapsible collapsible-collapsed\"\u003e"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg class\u003d\"icon\" width\u003d\"24\" height\u003d\"24\"\u003e"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#icon-close-light\" /\u003e"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan class\u003d\"a11y\"\u003eClose this overlay (Creative Commons)\u003c/span\u003e"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/h2\u003e"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"modal-inner\"\u003e"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"modal-header\"\u003e"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eShare via Email\u003c/h3\u003e"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform id\u003d\"email_to_friend_form\" method\u003d\"post\" action\u003d\"https://www.propublica.org/\"\u003e"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"hiddenFields\"\u003e"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"ACT\" value\u003d\"40\"\u003e"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"URI\" value\u003d\"/article/florida-lawmakers-to-review-law-targeting-injured-undocumented-workers\"\u003e"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"status\" value\u003d\"open\"\u003e"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"return\" value\u003d\"/article/email_thanks\"\u003e"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"redirect_on_duplicate\" value\u003d\"\"\u003e"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"dynamic_xid\" value\u003d\"y\"\u003e"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"disable_xid\" value\u003d\"y\"\u003e"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"tracker_email_one\" value\u003d\"\"\u003e"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"tracker_template_one\" value\u003d\"\"\u003e"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"RET\" value\u003d\"http://www.propublica.org/article/florida-lawmakers-to-review-law-targeting-injured-undocumented-workers/\"\u003e"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"form_name\" value\u003d\"email_to_friend_form\"\u003e"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"ajax_request\" value\u003d\"n\"\u003e"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"params_id\" value\u003d\"304935096\"\u003e"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"site_id\" value\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"entry_id\" value\u003d\"\"\u003e"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"entry_title\" value\u003d\"Florida Lawmakers to Review Law Targeting Injured Undocumented Workers\"\u003e"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"url_title\" value\u003d\"https://www.propublica.org/article/florida-lawmakers-to-review-law-targeting-injured-undocumented-workers/\"\u003e"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"lead_img\" value\u003d\"\"\u003e"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"deck\" value\u003d\"Citing an NPR and ProPublica investigation, a top Florida lawmaker and a national insurance fraud group criticized a law used by insurers to turn in injured undocumented workers and avoid paying workers’ comp benefits.\"\u003e"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput name\u003d\"email\" type\u003d\"text\" placeholder\u003d\"Your email\"\u003e"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput name\u003d\"name\" type\u003d\"text\" placeholder\u003d\"Your name\"\u003e"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctextarea name\u003d\"recipient_email\" placeholder\u003d\"Friends’ email(s). max 10, separated by commas\"\u003e\u003c/textarea\u003e"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctextarea name\u003d\"comments\" placeholder\u003d\"Personal message\"\u003e\u003c/textarea\u003e"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"submit\" value\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"friend_token\" value\u003d\"7a744400f5cd8dfa9b8fd350c3ca34decbfc3de23eabdd6fd1765bd51fad7b81\"\u003e"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"ff_check\" value\u003d\"friend_token\"\u003e"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .modal-inner --\u003e"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- end .modal --\u003e"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfooter role\u003d\"contentinfo\"\u003e"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"newsletter\"\u003e"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"site-footer-inner\"\u003e"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cform class\u003d\"subscribe-email\" action\u003d\"https://signup.propublica.org/newsletter/turing\" method\u003d\"post\" \u003e"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2 class\u003d\"pp-module-title\"\u003eStay informed with the Daily Digest.\u003c/h2\u003e"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cfieldset\u003e"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput class\u003d\"text subscribe-email-text\" type\u003d\"email\" placeholder\u003d\"Enter your email\" id\u003d\"pp-email-signup--full\" name\u003d\"email\" onfocus\u003d\"recaptchaInit()\" /\u003e"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput id\u003d\"newsletter-signup-footer\" class\u003d\"btn subscribe-email-btn g-recaptcha\" type\u003d\"submit\" value\u003d\"Sign Up\" /\u003e"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"target\" value\u003d\"l/125411/2018-11-01/5vd35q\" /\u003e"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"success_location\" value\u003d\"https://www.propublica.org/forms/thankyou\" /\u003e"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"error_location\" value\u003d\"https://www.propublica.org/forms/error\" /\u003e"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cinput type\u003d\"hidden\" name\u003d\"origin_location\" value\u003d\"https://www.propublica.org/article/trump-inc-podcast-michael-cohen-reading-guide\" /\u003e"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/fieldset\u003e"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/form\u003e\u003c!-- end .subscribe-email --\u003e"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .newsletter --\u003e"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"site-footer-inner\"\u003e"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cnav\u003e"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"collapsible collapsible-collapsed collapsible-expandwhenwide\" data-collapsible-set\u003d\"footer-links\"\u003e"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eSites\u003c/h3\u003e"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/\"\u003eProPublica\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/illinois/\"\u003eProPublica Illinois\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/datastore/\"\u003eThe Data Store\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"collapsible collapsible-collapsed collapsible-expandwhenwide\" data-collapsible-set\u003d\"footer-links\"\u003e"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eSections\u003c/h3\u003e"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/topics/\"\u003eTopics\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/series/\"\u003eSeries\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/newsapps/\"\u003eNews Apps\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/getinvolved/\"\u003eGet Involved\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/nerds/\"\u003eThe Nerd Blog\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/atpropublica/\"\u003e@ProPublica\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/events/\"\u003eEvents\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"collapsible collapsible-collapsed collapsible-expandwhenwide\" data-collapsible-set\u003d\"footer-links\"\u003e"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eInfo\u003c/h3\u003e"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/about/\"\u003eAbout Us\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/leadership/\"\u003eBoard and Advisors\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/staff/\"\u003eOfficers and Staff\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/jobs/\"\u003eJobs\u003c/a\u003e and \u003ca href\u003d\"/fellowships/\"\u003eFellowships\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/media-center/\"\u003eMedia Center\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/reports/\"\u003eReports\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/impact/\"\u003eImpact\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/awards/\"\u003eAwards\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/corrections/\"\u003eCorrections\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"collapsible collapsible-collapsed collapsible-expandwhenwide\" data-collapsible-set\u003d\"footer-links\"\u003e"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003ePolicies\u003c/h3\u003e"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/code-of-ethics/\"\u003eCode of Ethics\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/advertising/\"\u003eAdvertising Policy\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/legal/\"\u003ePrivacy Policy\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"collapsible collapsible-collapsed collapsible-expandwhenwide\" data-collapsible-set\u003d\"footer-links\"\u003e"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eFollow\u003c/h3\u003e"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/podcast/\"\u003ePodcast\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://itunes.apple.com/us/app/propublica/id355298887?mt\u003d8\"\u003eiOS\u003c/a\u003e and \u003ca href\u003d\"https://play.google.com/store/apps/details?id\u003dcom.propublica\u0026hl\u003den\"\u003eAndroid\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"http://feeds.propublica.org/propublica/main\"\u003eRSS Feed\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"collapsible collapsible-collapsed collapsible-expandwhenwide\" data-collapsible-set\u003d\"footer-links\"\u003e"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003eMore\u003c/h3\u003e"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/leak-to-us/\"\u003eLeak to Us\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/steal-our-stories/\"\u003eSteal Our Stories\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://www.propub3r6espa33w.onion\"\u003eBrowse via Tor\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/contact/\"\u003eContact Us\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"https://donate.propublica.org/\"\u003eDonate\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/nav\u003e"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"site-copyright\"\u003e"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca class\u003d\"logo\" href\u003d\"/\"\u003e"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csvg role\u003d\"image\" width\u003d\"574\" height\u003d\"75\"\u003e"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cuse xlink:href\u003d\"#propublica-logo\" /\u003e"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctext class\u003d\"a11y\"\u003eProPublica\u003c/text\u003e"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/svg\u003e"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/a\u003e"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp class\u003d\"slogan\"\u003eJournalism in the Public\u0026nbsp;Interest\u003c/p\u003e"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csmall\u003e\u0026copy; Copyright 2019 Pro Publica Inc.\u003c/small\u003e"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\u003c!-- end .site-footer-inner --\u003e"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/footer\u003e"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- anchors used by `aria-describedby` states --\u003e"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"wayfinding\" class\u003d\"squelch\"\u003e"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan id\u003d\"current-site\"\u003eCurrent site\u003c/span\u003e"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cspan id\u003d\"current-page\"\u003eCurrent page\u003c/span\u003e"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- END FOOTER --\u003e"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript data-cfasync\u003d\"false\" src\u003d\"/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js\"\u003e\u003c/script\u003e\u003cscript src\u003d\"https://assets.propublica.org/prod/v3/js/main.4fbb6479.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript src\u003d\u0027https://www.google.com/recaptcha/api.js?render\u003dexplicit\u0027 async defer\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "rlrh"
        },
        "content": "function recaptchaInit() {"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "rlrh"
        },
        "content": "$(\".g-recaptcha\").each(function() {"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "rlrh"
        },
        "content": "var object \u003d $(this);"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "rlrh"
        },
        "content": "grecaptcha.render(object.attr(\u0027id\u0027) , {"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u0027sitekey\u0027 : \u00276LdlAVYUAAAAAGYyroYppazrwBBbLxj0Ue2RTZ0t\u0027,"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u0027data-badge\u0027: \u0027inline\u0027,"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u0027size\u0027: \u0027invisible\u0027,"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u0027callback\u0027 : function(token) {"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "rlrh"
        },
        "content": "object.parents(\u0027form\u0027).find(\"[name\u003d\u0027g-recaptcha-response\u0027]\").val(token);"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "rlrh"
        },
        "content": "object.parents(\u0027form\u0027).submit();"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "rlrh"
        },
        "content": "});"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "rlrh"
        },
        "content": "});"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "rlrh": 1873
    }
  },
  {
    "path": "src/test/resources/NetworkTest/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thomastanck"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "thomastanck": 3
    }
  },
  {
    "path": "src/test/resources/RssFeedTest/rss.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003crss version\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cchannel\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime Revies\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime\u003c/link\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "My stupid and completely irrelevant anime reviews."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/description\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cimage\u003ehttps://blog.GNU.moe/anime/icon.svg\u003c/image\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cauthor\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Tsutsukakushi Tsukiko \u0026lt;yui@cock.li\u0026gt; (7B29 6212 4A73 E1E9 15E8  A7D4 7F96 C964 9CBC BF51)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/author\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ccopyright\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "CC0 \u0026lt;https://creativecommons.org/publicdomain/zero/1.0/legalcode\u0026gt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/copyright\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clastBuildDate\u003eSun May 27 04:15:47 EEST 2018\u003c/lastBuildDate\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Mahoujin Guru Guru  \u003c/title\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/mahoujin-guru-guru.html\u003c/link\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Gamers!  \u003c/title\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/gamers.html\u003c/link\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Made in Abyss  \u003c/title\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/made-in-abyss.html\u003c/link\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review n"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Mob Psycho 100  \u003c/title\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/mob-psycho.html\u003c/link\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime review"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: New Game!!  \u003c/title\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/new-game-2.html\u003c/link\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "Anime revieww"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Saiki Kusuo no Psi-nan  \u003c/title\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/saiki-kusuo.html\u003c/link\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "sigh"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Durarara!!  \u003c/title\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/durarara.html\u003c/link\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Battle Programmer Shirase  \u003c/title\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/bps.html\u003c/link\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "lol"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Re:Zero  \u003c/title\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/re_zero.html\u003c/link\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "idk"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003citem\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003ctitle\u003eAnime: Youjo Senki  \u003c/title\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003clink\u003ehttps://blog.GNU.moe/anime/review/youjo_senki.html\u003c/link\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cpubDate\u003eWed Jan 10 03:01:02 2018 +0200\u003c/pubDate\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003cdescription\u003e\u003c![CDATA["
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "I like this reviewer"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "]]\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/item\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/channel\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qjqqyy"
        },
        "content": "\u003c/rss\u003e"
      }
    ],
    "authorContributionMap": {
      "qjqqyy": 98
    }
  },
  {
    "path": "src/test/resources/view/BrowserPanelTest/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "epicfailname"
        },
        "content": "\u003c!-- TODO: Update this html document to a Crux readable document with title and descriptions --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "rlrh": 9,
      "epicfailname": 1
    }
  },
  {
    "path": "src/test/resources/view/BrowserPanelTest/wikipedia.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chtml lang\u003d\"en\" dir\u003d\"ltr\" class\u003d\"client-nojs\" xmlns\u003d\"http://www.w3.org/1999/xhtml\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctitle\u003eTherapsida - Wikipedia, the free encyclopedia\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta http-equiv\u003d\"Content-Type\" content\u003d\"text/html; charset\u003dUTF-8\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta http-equiv\u003d\"Content-Style-Type\" content\u003d\"text/css\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"MediaWiki 1.18wmf1\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"alternate\" type\u003d\"application/x-wiki\" title\u003d\"Edit this page\" href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"edit\" title\u003d\"Edit this page\" href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"apple-touch-icon\" href\u003d\"//en.wikipedia.org/apple-touch-icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"shortcut icon\" href\u003d\"/favicon.ico\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"search\" type\u003d\"application/opensearchdescription+xml\" href\u003d\"/w/opensearch_desc.php\" title\u003d\"Wikipedia (en)\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"EditURI\" type\u003d\"application/rsd+xml\" href\u003d\"//en.wikipedia.org/w/api.php?action\u003drsd\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"copyright\" href\u003d\"//creativecommons.org/licenses/by-sa/3.0/\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"alternate\" type\u003d\"application/atom+xml\" title\u003d\"Wikipedia Atom feed\" href\u003d\"/w/index.php?title\u003dSpecial:RecentChanges\u0026amp;feed\u003datom\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"//bits.wikimedia.org/en.wikipedia.org/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dext.wikihiero%7Cmediawiki.legacy.commonPrint%2Cshared%7Cskins.vector\u0026amp;only\u003dstyles\u0026amp;skin\u003dvector\u0026amp;*\" type\u003d\"text/css\" media\u003d\"all\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cmeta name\u003d\"ResourceLoaderDynamicStyles\" content\u003d\"\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"//bits.wikimedia.org/en.wikipedia.org/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dsite\u0026amp;only\u003dstyles\u0026amp;skin\u003dvector\u0026amp;*\" type\u003d\"text/css\" media\u003d\"all\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cstyle type\u003d\"text/css\" media\u003d\"all\"\u003ea:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rlrh"
        },
        "content": "/* cache key: enwiki:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */\u003c/style\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript src\u003d\"//bits.wikimedia.org/en.wikipedia.org/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dstartup\u0026amp;only\u003dscripts\u0026amp;skin\u003dvector\u0026amp;*\" type\u003d\"text/javascript\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"text/javascript\"\u003eif ( window.mediaWiki ) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\tmw.config.set({\"wgCanonicalNamespace\": \"\", \"wgCanonicalSpecialPageName\": false, \"wgNamespaceNumber\": 0, \"wgPageName\": \"Therapsida\", \"wgTitle\": \"Therapsida\", \"wgCurRevisionId\": 441204315, \"wgArticleId\": 204092, \"wgIsArticle\": true, \"wgAction\": \"view\", \"wgUserName\": null, \"wgUserGroups\": [\"*\"], \"wgCategories\": [\"Articles with \\\u0027species\\\u0027 microformats\", \"All articles with unsourced statements\", \"Articles with unsourced statements from August 2007\", \"Synapsids\", \"Therapsids\"], \"wgBreakFrames\": false, \"wgRestrictionEdit\": [], \"wgRestrictionMove\": [], \"wgSearchNamespaces\": [0], \"wgFlaggedRevsParams\": {\"tags\": {\"status\": {\"levels\": 1, \"quality\": 2, \"pristine\": 3}}}, \"wgStableRevisionId\": null, \"wgVectorEnabledModules\": {\"collapsiblenav\": true, \"collapsibletabs\": true, \"editwarning\": true, \"expandablesearch\": false, \"footercleanup\": false, \"sectioneditlinks\": false, \"simplesearch\": true, \"experiments\": true}, \"wgWikiEditorEnabledModules\": {\"toolbar\": true, \"dialogs\": true, \"hidesig\": true, \"templateEditor\": false, \"templates\": false, \"preview\": false, \"previewDialog\": false, \"publish\": false, \"toc\": false}, \"wgTrackingToken\": \"1380a6633fc8172efc9816bc6ea2ef72\", \"wikilove-recipient\": \"\", \"wikilove-edittoken\": \"+\\\\\", \"wikilove-anon\": 0, \"mbEditToken\": \"+\\\\\", \"Geo\": {\"city\": \"\", \"country\": \"\"}, \"wgNoticeProject\": \"wikipedia\"});"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e\u003cscript type\u003d\"text/javascript\"\u003eif ( window.mediaWiki ) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\tmw.loader.load([\"mediawiki.page.startup\"]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!--[if lt IE 7]\u003e\u003cstyle type\u003d\"text/css\"\u003ebody{behavior:url(\"/w/skins-1.18/vector/csshover.min.htc\")}\u003c/style\u003e\u003c![endif]--\u003e\u003c/head\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cbody class\u003d\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-Therapsida action-view skin-vector\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"mw-page-base\" class\u003d\"noprint\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"mw-head-base\" class\u003d\"noprint\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- content --\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ca id\u003d\"top\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"mw-js-message\" style\u003d\"display:none;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003c!-- sitenotice --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"siteNotice\"\u003e\u003c!-- centralNotice loads here --\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c!-- /sitenotice --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003c!-- firstHeading --\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003ch1 id\u003d\"firstHeading\" class\u003d\"firstHeading\"\u003eTherapsida\u003c/h1\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c!-- /firstHeading --\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c!-- bodyContent --\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"bodyContent\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003c!-- tagline --\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"siteSub\"\u003eFrom Wikipedia, the free encyclopedia\u003c/div\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c!-- /tagline --\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003c!-- subtitle --\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"contentSub\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c!-- /subtitle --\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c!-- jumpto --\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"jump-to-nav\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\tJump to: \u003ca href\u003d\"#mw-head\"\u003enavigation\u003c/a\u003e,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003ca href\u003d\"#p-search\"\u003esearch\u003c/a\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c!-- /jumpto --\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003c!-- bodycontent --\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv lang\u003d\"en\" dir\u003d\"ltr\" class\u003d\"mw-content-ltr\"\u003e\u003ctable class\u003d\"infobox biota\" style\u003d\"text-align: left; width: 200px; font-size: 100%\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cth colspan\u003d\"2\" style\u003d\"text-align: center; background-color: rgb(211,211,164)\"\u003eTherapsids\u003cbr /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csmall\u003eTemporal range:\u003cbr /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ca href\u003d\"/wiki/Early_Permian\" title\u003d\"Early Permian\" class\u003d\"mw-redirect\"\u003eEarly Permian\u003c/a\u003e–\u003ca href\u003d\"/wiki/Early_Cretaceous\" title\u003d\"Early Cretaceous\"\u003eEarly Cretaceous\u003c/a\u003e, 275–100\u0026#160;Ma\u003cbr /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Descendant \u003ca href\u003d\"/wiki/Taxon\" title\u003d\"Taxon\"\u003etaxon\u003c/a\u003e \u003ca href\u003d\"/wiki/Mammalia\" title\u003d\"Mammalia\" class\u003d\"mw-redirect\"\u003eMammalia\u003c/a\u003e survives to present.\u003c/small\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"Timeline-row\" style\u003d\"margin: 4px auto 0; clear:both; width:220px; padding:0px; height:18px; overflow:visible; border:1px #666; border-style:solid none; position:relative; z-index:0;\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; left:0px; width:208.46153846154px; padding-left:5px; text-align:left; background:rgb(254,217,106); background-color: rgba(254,217,106,0); background-image: -moz-linear-gradient(left, rgba(254,217,106,0), rgba(254,217,106,1) 15%, rgba(254,217,106,1)); background-image: -ms-linear-gradient(left, rgba(254,217,106,0), rgba(254,217,106,1) 15%, rgba(254,217,106,1)); background-image: -o-linear-gradient(left, rgba(254,217,106,0), rgba(254,217,106,1) 15%, rgba(254,217,106,1)); background-image: -webkit-gradient(linear, left top, right top, from(rgba(254,217,106,0)), to(rgba(254,217,106,1)), color-stop(15%, rgba(254,217,106,1)));\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Precambrian\" title\u003d\"Precambrian\"\u003ePreЄ\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(127,160,86); left:36.553846153846px; width:18.175384615385px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Cambrian\" title\u003d\"Cambrian\"\u003eЄ\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(0,146,112); left:54.729230769231px; width:15.095384615385px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Ordovician\" title\u003d\"Ordovician\"\u003eO\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(179,225,182); left:69.824615384615px; width:9.3753846153846px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Silurian\" title\u003d\"Silurian\"\u003eS\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(203,140,55); left:79.2px; width:19.224615384615px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Devonian\" title\u003d\"Devonian\"\u003eD\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(103,165,153); left:98.424615384615px; width:20.375384615385px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Carboniferous\" title\u003d\"Carboniferous\"\u003eC\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(240,64,60); left:118.8px; width:16.246153846154px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Permian\" title\u003d\"Permian\"\u003eP\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(129,43,146); left:135.04615384615px; width:17.396923076923px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Triassic\" title\u003d\"Triassic\"\u003eT\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(52,178,201); left:152.44307692308px; width:18.310769230769px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Jurassic\" title\u003d\"Jurassic\"\u003eJ\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(127,198,78); left:170.75384615385px; width:27.076923076923px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Cretaceous\" title\u003d\"Cretaceous\"\u003eK\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(253,154,82); left:197.83076923077px; width:14.374461538462px;\"\u003e\u003csmall\u003e\u003ca href\u003d\"/wiki/Paleogene\" title\u003d\"Paleogene\"\u003e\u003csmall\u003ePg\u003c/small\u003e\u003c/a\u003e\u003c/small\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:100%; text-align:center; background-color:rgb(255,230,25); left:212.20523076923px; width:6.9188307692308px;\"\u003e\u003ca href\u003d\"/wiki/Neogene\" title\u003d\"Neogene\"\u003e\u003csmall\u003eN\u003c/small\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"end-border\" style\u003d\"position:absolute; height:100%; background-color:#666; width:1px; left:219px\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"margin:0 auto; line-height:0; clear:both; width:220px; padding:0px; height:8px; overflow:visible; background-color:transparent; position:relative; top:-4px; z-index:100;\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:8px; left:126.92307692308px; width:93.076923076923px; background-color:#360; opacity:0.42;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:8px; left:126.92307692308px; width:59.230769230769px; background-color:#360; opacity:1;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"position:absolute; height:6px; top:1px; left:127.92307692308px; width:57.230769230769px; background-color:#6c3;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/th\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd colspan\u003d\"2\" style\u003d\"text-align: center\"\u003e\u003ca href\u003d\"/wiki/File:Pristeroognathus_DB.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/4/42/Pristeroognathus_DB.jpg/240px-Pristeroognathus_DB.jpg\" width\u003d\"240\" height\u003d\"160\" /\u003e\u003c/a\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd colspan\u003d\"2\" style\u003d\"text-align: center; font-size: 88%\"\u003eIllustration of \u003ci\u003e\u003ca href\u003d\"/wiki/Pristerognathus\" title\u003d\"Pristerognathus\"\u003ePristerognathus\u003c/a\u003e\u003c/i\u003e, a cat-sized \u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003etherocephalian\u003c/a\u003e therapsid\u003c/td\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cth colspan\u003d\"2\" style\u003d\"text-align: center; background-color: rgb(211,211,164)\"\u003e\u003ca href\u003d\"/wiki/Biological_classification\" title\u003d\"Biological classification\"\u003eScientific classification\u003c/a\u003e \u003cspan class\u003d\"plainlinks\" style\u003d\"font-size:smaller; float:right; padding-right:0.4em; margin-left:-3em;\"\u003e\u003ca href\u003d\"/wiki/Template:Taxonomy/Therapsida\" title\u003d\"e\"\u003e\u003cimg alt\u003d\"e\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/7/74/Red_Pencil_Icon.png\" width\u003d\"16\" height\u003d\"16\" /\u003e\u003c/a\u003e\u003c/span\u003e\u003c/th\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003eKingdom:\u003c/td\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003cspan class\u003d\"kingdom\" style\u003d\"white-space:nowrap;\"\u003e\u003ca href\u003d\"/wiki/Animal\" title\u003d\"Animal\"\u003eAnimalia\u003c/a\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003ePhylum:\u003c/td\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003cspan class\u003d\"phylum\" style\u003d\"white-space:nowrap;\"\u003e\u003ca href\u003d\"/wiki/Chordate\" title\u003d\"Chordate\"\u003eChordata\u003c/a\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003eClass:\u003c/td\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003cspan class\u003d\"class\" style\u003d\"white-space:nowrap;\"\u003e\u003ca href\u003d\"/wiki/Synapsid\" title\u003d\"Synapsid\"\u003eSynapsida\u003c/a\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e(unranked):\u003c/td\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003cspan class\u003d\"(unranked)\" style\u003d\"white-space:nowrap;\"\u003e\u003ca href\u003d\"/wiki/Eupelycosauria\" title\u003d\"Eupelycosauria\"\u003eEupelycosauria\u003c/a\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e(unranked):\u003c/td\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003cspan class\u003d\"(unranked)\" style\u003d\"white-space:nowrap;\"\u003e\u003ca href\u003d\"/wiki/Sphenacodontia\" title\u003d\"Sphenacodontia\"\u003eSphenacodontia\u003c/a\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e(unranked):\u003c/td\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003cspan class\u003d\"(unranked)\" style\u003d\"white-space:nowrap;\"\u003e\u003ca href\u003d\"/wiki/Sphenacodontoidea\" title\u003d\"Sphenacodontoidea\"\u003eSphenacodontoidea\u003c/a\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003eOrder:\u003c/td\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003cspan class\u003d\"order\" style\u003d\"white-space:nowrap;\"\u003e\u003cb\u003eTherapsida\u003c/b\u003e\u003c/span\u003e\u003cbr /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003csmall\u003e\u003ca href\u003d\"/wiki/Robert_Broom\" title\u003d\"Robert Broom\"\u003eBroom\u003c/a\u003e, 1905\u003c/small\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cth colspan\u003d\"2\" style\u003d\"text-align: center; background-color: rgb(211,211,164)\"\u003eClades\u003c/th\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd colspan\u003d\"2\" style\u003d\"text-align: left\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003ca href\u003d\"/wiki/Biarmosuchia\" title\u003d\"Biarmosuchia\"\u003eBiarmosuchia\u003c/a\u003e \u003ca href\u003d\"/wiki/Paraphyly\" title\u003d\"Paraphyly\"\u003e*\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) \u003ca href\u003d\"/wiki/Eutherapsida\" title\u003d\"Eutherapsida\" class\u003d\"mw-redirect\"\u003eEutherapsida\u003c/a\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003ca href\u003d\"/wiki/Dinocephalia\" title\u003d\"Dinocephalia\"\u003eDinocephalia\u003c/a\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInfraorder †\u003ca href\u003d\"/wiki/Anteosauria\" title\u003d\"Anteosauria\" class\u003d\"mw-redirect\"\u003eAnteosauria\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInfraorder †\u003ca href\u003d\"/wiki/Tapinocephalia\" title\u003d\"Tapinocephalia\"\u003eTapinocephalia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) \u003ca href\u003d\"/wiki/Neotherapsida\" title\u003d\"Neotherapsida\"\u003eNeotherapsida\u003c/a\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003ca href\u003d\"/wiki/Anomodont\" title\u003d\"Anomodont\"\u003eAnomodontia\u003c/a\u003e \u003ca href\u003d\"/wiki/Paraphyly\" title\u003d\"Paraphyly\"\u003e*\u003c/a\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInfraorder †\u003ca href\u003d\"/wiki/Dicynodontia\" title\u003d\"Dicynodontia\" class\u003d\"mw-redirect\"\u003eDicynodontia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) \u003ca href\u003d\"/wiki/Theriodontia\" title\u003d\"Theriodontia\" class\u003d\"mw-redirect\"\u003eTheriodontia\u003c/a\u003e \u003ca href\u003d\"/wiki/Paraphyly\" title\u003d\"Paraphyly\"\u003e*\u003c/a\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder \u003ca href\u003d\"/wiki/Cynodontia\" title\u003d\"Cynodontia\" class\u003d\"mw-redirect\"\u003eCynodontia\u003c/a\u003e \u003ca href\u003d\"/wiki/Paraphyly\" title\u003d\"Paraphyly\"\u003e*\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003ca href\u003d\"/wiki/Gorgonopsia\" title\u003d\"Gorgonopsia\"\u003eGorgonopsia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003eTherocephalia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003cb\u003eTherapsida\u003c/b\u003e is a group of the most advanced reptile-grade \u003ca href\u003d\"/wiki/Synapsid\" title\u003d\"Synapsid\"\u003esynapsids\u003c/a\u003e, and the ancestors of \u003ca href\u003d\"/wiki/Mammals\" title\u003d\"Mammals\" class\u003d\"mw-redirect\"\u003emammals\u003c/a\u003e.\u003csup id\u003d\"cite_ref-romer1933_0-0\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-romer1933-0\"\u003e\u003cspan\u003e[\u003c/span\u003e1\u003cspan\u003e]\u003c/span\u003e\u003c/a\u003e\u003c/sup\u003e While mammals strictly speaking are surviving therapsids, the name is usually only applied to the non-mammalian \u003ca href\u003d\"/wiki/Evolutionary_grade\" title\u003d\"Evolutionary grade\"\u003eevolutionary grade\u003c/a\u003e. Many of the traits today seen as unique to mammals had their origin within the Therapsida, including \u003ca href\u003d\"/wiki/Hair\" title\u003d\"Hair\"\u003ehair\u003c/a\u003e, \u003ca href\u003d\"/wiki/Lactation\" title\u003d\"Lactation\"\u003elactation\u003c/a\u003e, and an erect posture. The earliest fossil attributed to Therapsida is believed to be \u003ci\u003e\u003ca href\u003d\"/wiki/Tetraceratops_insignis\" title\u003d\"Tetraceratops insignis\" class\u003d\"mw-redirect\"\u003eTetraceratops insignis\u003c/a\u003e\u003c/i\u003e (Lower \u003ca href\u003d\"/wiki/Permian\" title\u003d\"Permian\"\u003ePermian\u003c/a\u003e).\u003csup id\u003d\"cite_ref-1\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-1\"\u003e\u003cspan\u003e[\u003c/span\u003e2\u003cspan\u003e]\u003c/span\u003e\u003c/a\u003e\u003c/sup\u003e\u003csup id\u003d\"cite_ref-2\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-2\"\u003e\u003cspan\u003e[\u003c/span\u003e3\u003cspan\u003e]\u003c/span\u003e\u003c/a\u003e\u003c/sup\u003e Therapsids evolved from \u0027\u003ca href\u003d\"/wiki/Pelycosaur\" title\u003d\"Pelycosaur\"\u003epelycosaurs\u003c/a\u003e\u0027 (specifically \u003ca href\u003d\"/wiki/Sphenacodontia\" title\u003d\"Sphenacodontia\"\u003esphenacodonts\u003c/a\u003e) 275 million years ago. They replaced the pelycosaurs as the dominant land animal. Mammals appeared 200 million years ago, and all therapsids other than mammals became extinct in the \u003ca href\u003d\"/wiki/Early_Cretaceous\" title\u003d\"Early Cretaceous\"\u003eEarly Cretaceous\u003c/a\u003e period (146 \u003ca href\u003d\"/wiki/Annum\" title\u003d\"Annum\" class\u003d\"mw-redirect\"\u003eMa\u003c/a\u003e to 100 Ma).\u003c/p\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable id\u003d\"toc\" class\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"toctitle\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003eContents\u003c/h2\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-1\"\u003e\u003ca href\u003d\"#Characteristics\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e1\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eCharacteristics\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-2\"\u003e\u003ca href\u003d\"#Evolutionary_history\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e2\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eEvolutionary history\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-3\"\u003e\u003ca href\u003d\"#Taxonomy\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e3\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eTaxonomy\u003c/span\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-2 tocsection-4\"\u003e\u003ca href\u003d\"#Classification\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e3.1\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eClassification\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-2 tocsection-5\"\u003e\u003ca href\u003d\"#Phylogeny\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e3.2\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003ePhylogeny\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-6\"\u003e\u003ca href\u003d\"#See_also\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e4\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eSee also\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-7\"\u003e\u003ca href\u003d\"#Notes\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e5\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eNotes\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-8\"\u003e\u003ca href\u003d\"#References\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e6\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eReferences\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli class\u003d\"toclevel-1 tocsection-9\"\u003e\u003ca href\u003d\"#External_links\"\u003e\u003cspan class\u003d\"tocnumber\"\u003e7\u003c/span\u003e \u003cspan class\u003d\"toctext\"\u003eExternal links\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d1\" title\u003d\"Edit section: Characteristics\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"Characteristics\"\u003eCharacteristics\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eTherapsids\u0027 \u003ca href\u003d\"/wiki/Temporal_fenestra\" title\u003d\"Temporal fenestra\" class\u003d\"mw-redirect\"\u003etemporal fenestrae\u003c/a\u003e are greater than those of the pelycosaurs. The jaws of therapsids are more complex and powerful, and the \u003ca href\u003d\"/wiki/Teeth\" title\u003d\"Teeth\" class\u003d\"mw-redirect\"\u003eteeth\u003c/a\u003e are differentiated into frontal \u003ca href\u003d\"/wiki/Incisor\" title\u003d\"Incisor\"\u003eincisors\u003c/a\u003e for nipping, great lateral \u003ca href\u003d\"/wiki/Canine_tooth\" title\u003d\"Canine tooth\"\u003ecanines\u003c/a\u003e for puncturing and tearing, and \u003ca href\u003d\"/wiki/Molar_(tooth)\" title\u003d\"Molar (tooth)\"\u003emolars\u003c/a\u003e for shearing and chopping food. Their legs are positioned more vertically beneath their bodies than are the sprawling legs of \u003ca href\u003d\"/wiki/Reptile\" title\u003d\"Reptile\"\u003ereptiles\u003c/a\u003e and \u003ca href\u003d\"/wiki/Pelycosaur\" title\u003d\"Pelycosaur\"\u003epelycosaurs\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d2\" title\u003d\"Edit section: Evolutionary history\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"Evolutionary_history\"\u003eEvolutionary history\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"rellink boilerplate seealso\"\u003eSee also: \u003ca href\u003d\"/wiki/Evolution_of_mammals\" title\u003d\"Evolution of mammals\"\u003eEvolution of mammals\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tleft\"\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:222px;\"\u003e\u003ca href\u003d\"/wiki/File:Raranimus.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Raranimus.jpg/220px-Raranimus.jpg\" width\u003d\"220\" height\u003d\"175\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Raranimus.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Raranimus\" title\u003d\"Raranimus\"\u003eRaranimus\u003c/a\u003e\u003c/i\u003e, a primitive therapsid\u003c/div\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eTherapsids \u003ca href\u003d\"/wiki/Evolution\" title\u003d\"Evolution\"\u003eevolved\u003c/a\u003e from a group of pelycosaurs called \u003ca href\u003d\"/wiki/Sphenacodontia\" title\u003d\"Sphenacodontia\"\u003esphenacodonts\u003c/a\u003e.\u003csup id\u003d\"cite_ref-3\" class\u003d\"reference\"\u003e\u003ca href\u003d\"#cite_note-3\"\u003e\u003cspan\u003e[\u003c/span\u003e4\u003cspan\u003e]\u003c/span\u003e\u003c/a\u003e\u003c/sup\u003e Therapsids became the dominant land animals in the Middle \u003ca href\u003d\"/wiki/Permian\" title\u003d\"Permian\"\u003ePermian\u003c/a\u003e, displacing the pelycosaurs. Therapsida consists of three bigger \u003ca href\u003d\"/wiki/Clades\" title\u003d\"Clades\" class\u003d\"mw-redirect\"\u003eclades\u003c/a\u003e, the \u003ca href\u003d\"/wiki/Dinocephalia\" title\u003d\"Dinocephalia\"\u003edinocephalians\u003c/a\u003e, the herbivorous \u003ca href\u003d\"/wiki/Anomodont\" title\u003d\"Anomodont\"\u003eanomodonts\u003c/a\u003e, and the mostly carnivorous \u003ca href\u003d\"/wiki/Theriodont\" title\u003d\"Theriodont\"\u003etheriodonts\u003c/a\u003e, with the carnivorous \u003ca href\u003d\"/wiki/Biarmosuchia\" title\u003d\"Biarmosuchia\"\u003ebiarmosuchians\u003c/a\u003e as a \u003ca href\u003d\"/wiki/Paraphyletic\" title\u003d\"Paraphyletic\" class\u003d\"mw-redirect\"\u003eparaphyletic\u003c/a\u003e assemblage of primitive forms. After a brief burst of evolutionary diversity, the dinocephalians died out in the later Middle Permian (\u003ca href\u003d\"/wiki/Guadalupian\" title\u003d\"Guadalupian\" class\u003d\"mw-redirect\"\u003eGuadalupian\u003c/a\u003e) but the anomodont \u003ca href\u003d\"/wiki/Dicynodont\" title\u003d\"Dicynodont\"\u003edicynodonts\u003c/a\u003e and the theriodont \u003ca href\u003d\"/wiki/Gorgonopsia\" title\u003d\"Gorgonopsia\"\u003egorgonopsians\u003c/a\u003e and \u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003etherocephalians\u003c/a\u003e flourished, being joined at the very end of the Permian by the first \u003ca href\u003d\"/wiki/Cynodont\" title\u003d\"Cynodont\"\u003ecynodonts\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eLike all land animals, the therapsids were seriously affected by the \u003ca href\u003d\"/wiki/Permian%E2%80%93Triassic_extinction_event\" title\u003d\"Permian–Triassic extinction event\"\u003ePermian–Triassic extinction event\u003c/a\u003e, with the very successful gorgonopsians dying out altogether and the remaining groups, \u003ca href\u003d\"/wiki/Dicynodont\" title\u003d\"Dicynodont\"\u003edicynodonts\u003c/a\u003e, \u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003etherocephalians\u003c/a\u003e, and \u003ca href\u003d\"/wiki/Cynodont\" title\u003d\"Cynodont\"\u003ecynodonts\u003c/a\u003e of a few species, each surviving into the \u003ca href\u003d\"/wiki/Triassic\" title\u003d\"Triassic\"\u003eTriassic\u003c/a\u003e. The dicynodonts, now represented by a single family of large stocky \u003ca href\u003d\"/wiki/Herbivore\" title\u003d\"Herbivore\"\u003eherbivores\u003c/a\u003e, the \u003ca href\u003d\"/wiki/Kannemeyeridae\" title\u003d\"Kannemeyeridae\" class\u003d\"mw-redirect\"\u003eKannemeyeridae\u003c/a\u003e, and the medium-sized cynodonts (including both carnivorous and herbivorous forms), flourished worldwide, throughout the Early and Middle Triassic. They died out across much of \u003ca href\u003d\"/wiki/Pangea\" title\u003d\"Pangea\" class\u003d\"mw-redirect\"\u003ePangea\u003c/a\u003e at the end of the \u003ca href\u003d\"/wiki/Carnian\" title\u003d\"Carnian\"\u003eCarnian\u003c/a\u003e (Late Triassic), although they continued for some time longer in the wet equatorial band and the south.\u003c/p\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:222px;\"\u003e\u003ca href\u003d\"/wiki/File:Lemurosaurus.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/9/98/Lemurosaurus.jpg/220px-Lemurosaurus.jpg\" width\u003d\"220\" height\u003d\"180\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Lemurosaurus.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Lemurosaurus\" title\u003d\"Lemurosaurus\"\u003eLemurosaurus\u003c/a\u003e\u003c/i\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eSome exceptions were the still further derived \u003ca href\u003d\"/wiki/Eucynodonts\" title\u003d\"Eucynodonts\" class\u003d\"mw-redirect\"\u003eeucynodonts\u003c/a\u003e. At least three groups of them survived. They all appeared in the \u003ca href\u003d\"/wiki/Late_Triassic\" title\u003d\"Late Triassic\"\u003eLate Triassic\u003c/a\u003e period. The extremely mammal-like family, \u003ca href\u003d\"/wiki/Tritylodontidae\" title\u003d\"Tritylodontidae\"\u003eTritylodontidae\u003c/a\u003e, survived into the Early \u003ca href\u003d\"/wiki/Cretaceous\" title\u003d\"Cretaceous\"\u003eCretaceous\u003c/a\u003e. An extremely mammal-like family, \u003ca href\u003d\"/wiki/Tritheledontidae\" title\u003d\"Tritheledontidae\"\u003eTritheledontidae\u003c/a\u003e, are unknown later than the Early \u003ca href\u003d\"/wiki/Jurassic\" title\u003d\"Jurassic\"\u003eJurassic\u003c/a\u003e. The third group, \u003ci\u003e\u003ca href\u003d\"/wiki/Morganucodon\" title\u003d\"Morganucodon\"\u003eMorganucodon\u003c/a\u003e\u003c/i\u003e and similar animals, were \u003ca href\u003d\"/wiki/Mammaliformes\" title\u003d\"Mammaliformes\" class\u003d\"mw-redirect\"\u003emammaliformes\u003c/a\u003e or the \"stem-mammals\".\u003c/p\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eSome non-eucynodont cynodonts survived the Permian-Triassic extinction, such as \u003ci\u003e\u003ca href\u003d\"/wiki/Thrinaxodon\" title\u003d\"Thrinaxodon\"\u003eThrinaxodon\u003c/a\u003e\u003c/i\u003e but only to become extinct by the \u003ca href\u003d\"/wiki/Middle_Triassic\" title\u003d\"Middle Triassic\"\u003eMiddle Triassic\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003eThe \u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003etherocephalians\u003c/a\u003e, relatives of the cynodonts, managed to survive the Permian-Triassic extinction and continued to diversify through the \u003ca href\u003d\"/wiki/Early_Triassic\" title\u003d\"Early Triassic\"\u003eEarly Triassic\u003c/a\u003e period. Approaching the end of the period, however, the therocephalians were declining to extinction and eventually became extinct, possibly due to \u003ca href\u003d\"/wiki/Climate_change\" title\u003d\"Climate change\"\u003eclimatic changes\u003c/a\u003e and competition from cynodonts and other \u003ca href\u003d\"/wiki/Animal\" title\u003d\"Animal\"\u003eanimals\u003c/a\u003e struggling to survive.\u003c/p\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"/wiki/Dicynodonts\" title\u003d\"Dicynodonts\" class\u003d\"mw-redirect\"\u003eDicynodonts\u003c/a\u003e have been thought to have become extinct before the \u003ca href\u003d\"/wiki/Triassic-Jurassic_extinction_event\" title\u003d\"Triassic-Jurassic extinction event\" class\u003d\"mw-redirect\"\u003eend of the Triassic\u003c/a\u003e, but there is evidence that they survived the extinction. Their fossils have been found in \u003ca href\u003d\"/wiki/Gondwana\" title\u003d\"Gondwana\"\u003eGondwana\u003c/a\u003e. Other animals that were common in the Triassic also took refuge here, such as the \u003ca href\u003d\"/wiki/Temnospondyl\" title\u003d\"Temnospondyl\" class\u003d\"mw-redirect\"\u003etemnospondyls\u003c/a\u003e. This is an example of \u003ca href\u003d\"/wiki/Lazarus_taxon\" title\u003d\"Lazarus taxon\"\u003eLazarus taxon\u003c/a\u003e.\u003csup class\u003d\"Template-Fact\" style\u003d\"white-space:nowrap;\"\u003e[\u003ci\u003e\u003ca href\u003d\"/wiki/Wikipedia:Citation_needed\" title\u003d\"Wikipedia:Citation needed\"\u003e\u003cspan title\u003d\"This claim needs references to reliable sources from August 2007\"\u003ecitation needed\u003c/span\u003e\u003c/a\u003e\u003c/i\u003e]\u003c/sup\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"/wiki/Mammal\" title\u003d\"Mammal\"\u003eMammals\u003c/a\u003e, the only living therapsids, evolved in the \u003ca href\u003d\"/wiki/Early_Jurassic\" title\u003d\"Early Jurassic\"\u003eEarly Jurassic\u003c/a\u003e period. They radiated from a group of \u003ca href\u003d\"/wiki/Mammaliaformes\" title\u003d\"Mammaliaformes\"\u003eMammaliaformes\u003c/a\u003e that is related to the \u003ca href\u003d\"/wiki/Symmetrodont\" title\u003d\"Symmetrodont\" class\u003d\"mw-redirect\"\u003esymmetrodonts\u003c/a\u003e. The Mammaliaformes themselves evolved from \u003ca href\u003d\"/wiki/Probainognathia\" title\u003d\"Probainognathia\"\u003eprobainognathians\u003c/a\u003e, a lineage of the \u003ca href\u003d\"/wiki/Eucynodont\" title\u003d\"Eucynodont\" class\u003d\"mw-redirect\"\u003eeucynodont\u003c/a\u003e suborder.\u003c/p\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d3\" title\u003d\"Edit section: Taxonomy\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"Taxonomy\"\u003eTaxonomy\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d4\" title\u003d\"Edit section: Classification\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"Classification\"\u003eClassification\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:Biarmosuchus.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Biarmosuchus.jpg/200px-Biarmosuchus.jpg\" width\u003d\"200\" height\u003d\"108\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Biarmosuchus.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Biarmosuchus\" title\u003d\"Biarmosuchus\"\u003eBiarmosuchus\u003c/a\u003e\u003c/i\u003e, a Biarmosuchian\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:Estemmenosuchus_BW.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/b/bd/Estemmenosuchus_BW.jpg/200px-Estemmenosuchus_BW.jpg\" width\u003d\"200\" height\u003d\"116\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Estemmenosuchus_BW.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Estemmenosuchus\" title\u003d\"Estemmenosuchus\"\u003eEstemmenosuchus\u003c/a\u003e\u003c/i\u003e, a Dinocephalian\u003c/div\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:Anteosaurus_BW.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Anteosaurus_BW.jpg/200px-Anteosaurus_BW.jpg\" width\u003d\"200\" height\u003d\"80\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Anteosaurus_BW.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Anteosaurus\" title\u003d\"Anteosaurus\"\u003eAnteosaurus\u003c/a\u003e\u003c/i\u003e, an Anteosaur\u003c/div\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:Inostrancevia_BW.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/7/75/Inostrancevia_BW.jpg/200px-Inostrancevia_BW.jpg\" width\u003d\"200\" height\u003d\"89\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Inostrancevia_BW.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Inostrancevia\" title\u003d\"Inostrancevia\"\u003eInostrancevia\u003c/a\u003e\u003c/i\u003e, a Gorgonopsid\u003c/div\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:Bauria_BW.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/c/c0/Bauria_BW.jpg/200px-Bauria_BW.jpg\" width\u003d\"200\" height\u003d\"88\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Bauria_BW.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Bauria\" title\u003d\"Bauria\"\u003eBauria\u003c/a\u003e\u003c/i\u003e, a Therocephalian\u003c/div\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumb tright\"\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbinner\" style\u003d\"width:202px;\"\u003e\u003ca href\u003d\"/wiki/File:Oligokyphus_BW.jpg\" class\u003d\"image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/3/39/Oligokyphus_BW.jpg/200px-Oligokyphus_BW.jpg\" width\u003d\"200\" height\u003d\"61\" class\u003d\"thumbimage\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"thumbcaption\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"magnify\"\u003e\u003ca href\u003d\"/wiki/File:Oligokyphus_BW.jpg\" class\u003d\"internal\" title\u003d\"Enlarge\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/magnify-clip.png\" width\u003d\"15\" height\u003d\"11\" alt\u003d\"\" /\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ci\u003e\u003ca href\u003d\"/wiki/Oligokyphus\" title\u003d\"Oligokyphus\"\u003eOligokyphus\u003c/a\u003e\u003c/i\u003e, a Cynodont\u003c/div\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eClass \u003cb\u003e\u003ca href\u003d\"/wiki/Synapsida\" title\u003d\"Synapsida\" class\u003d\"mw-redirect\"\u003eSynapsida\u003c/a\u003e\u003c/b\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eORDER \u003cb\u003eTHERAPSIDA\u003c/b\u003e \u003ca href\u003d\"/wiki/Paraphyletic\" title\u003d\"Paraphyletic\" class\u003d\"mw-redirect\"\u003e*\u003c/a\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e?Family †\u003ca href\u003d\"/wiki/Tetraceratopsidae\" title\u003d\"Tetraceratopsidae\" class\u003d\"mw-redirect\"\u003eTetraceratopsidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003cb\u003e\u003ca href\u003d\"/wiki/Biarmosuchia\" title\u003d\"Biarmosuchia\"\u003eBiarmosuchia\u003c/a\u003e\u003c/b\u003e \u003ca href\u003d\"/wiki/Paraphyletic\" title\u003d\"Paraphyletic\" class\u003d\"mw-redirect\"\u003e*\u003c/a\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Biarmosuchus_tener\" title\u003d\"Biarmosuchus tener\" class\u003d\"mw-redirect\"\u003eBiarmosuchidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Eotitanosuchus_olsoni\" title\u003d\"Eotitanosuchus olsoni\" class\u003d\"mw-redirect\"\u003eEotitanosuchidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003cb\u003e\u003ca href\u003d\"/wiki/Eutherapsida\" title\u003d\"Eutherapsida\" class\u003d\"mw-redirect\"\u003eEutherapsida\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003cb\u003e\u003ca href\u003d\"/wiki/Dinocephalia\" title\u003d\"Dinocephalia\"\u003eDinocephalia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Estemmenosuchidae\" title\u003d\"Estemmenosuchidae\"\u003eEstemmenosuchidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e?Infraorder †\u003cb\u003e\u003ca href\u003d\"/wiki/Anteosauria\" title\u003d\"Anteosauria\" class\u003d\"mw-redirect\"\u003eAnteosauria\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Anteosauridae\" title\u003d\"Anteosauridae\"\u003eAnteosauridae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Brithopodidae\" title\u003d\"Brithopodidae\"\u003eBrithopodidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Deuterosauridae\" title\u003d\"Deuterosauridae\" class\u003d\"mw-redirect\"\u003eDeuterosauridae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Syodontidae\" title\u003d\"Syodontidae\"\u003eSyodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e?Family †\u003ca href\u003d\"/w/index.php?title\u003dStenocybidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Stenocybidae (page does not exist)\"\u003eStenocybidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e†\u003cb\u003e\u003ca href\u003d\"/wiki/Tapinocephalia\" title\u003d\"Tapinocephalia\"\u003eTapinocephalia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dStyracocephalidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Styracocephalidae (page does not exist)\"\u003eStyracocephalidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Tapinocephalidae\" title\u003d\"Tapinocephalidae\"\u003eTapinocephalidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Titanosuchidae\" title\u003d\"Titanosuchidae\"\u003eTitanosuchidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003cb\u003e\u003ca href\u003d\"/wiki/Neotherapsida\" title\u003d\"Neotherapsida\"\u003eNeotherapsida\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003cb\u003e\u003ca href\u003d\"/wiki/Anomodont\" title\u003d\"Anomodont\"\u003eAnomodontia\u003c/a\u003e\u003c/b\u003e \u003ca href\u003d\"/wiki/Paraphyletic\" title\u003d\"Paraphyletic\" class\u003d\"mw-redirect\"\u003e*\u003c/a\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuperfamily †\u003ca href\u003d\"/w/index.php?title\u003dVenyukoviamorpha\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Venyukoviamorpha (page does not exist)\"\u003eVenyukoviamorpha\u003c/a\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dOtsheridae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Otsheridae (page does not exist)\"\u003eOtsheridae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Venyukovia\" title\u003d\"Venyukovia\"\u003eVenyukoviidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInfraorder †\u003cb\u003e\u003ca href\u003d\"/wiki/Dromasauria\" title\u003d\"Dromasauria\"\u003eDromasauria\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Galeopidae\" title\u003d\"Galeopidae\" class\u003d\"mw-redirect\"\u003eGaleopidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInfraorder †\u003cb\u003e\u003ca href\u003d\"/wiki/Dicynodont\" title\u003d\"Dicynodont\"\u003eDicynodonta\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dEndothiodontidae\u0026aamp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Endothiodontidae (page does not exist)\"\u003eEndothiodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Eodicynodontidae\" title\u003d\"Eodicynodontidae\" class\u003d\"mw-redirect\"\u003eEodicynodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dKingoriidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Kingoriidae (page does not exist)\"\u003eKingoriidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) †\u003ca href\u003d\"/wiki/Diictodontia\" title\u003d\"Diictodontia\"\u003eDiictodontia\u003c/a\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuperfamily †\u003ca href\u003d\"/w/index.php?title\u003dEmydopoidea\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Emydopoidea (page does not exist)\"\u003eEmydopoidea\u003c/a\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dCistecephalidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Cistecephalidae (page does not exist)\"\u003eCistecephalidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dEmydopidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Emydopidae (page does not exist)\"\u003eEmydopidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuperfamily †\u003ca href\u003d\"/w/index.php?title\u003dRobertoidea\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Robertoidea (page does not exist)\"\u003eRobertoidea\u003c/a\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Diictodontidae\" title\u003d\"Diictodontidae\" class\u003d\"mw-redirect\"\u003eDiictodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Robertiidae\" title\u003d\"Robertiidae\" class\u003d\"mw-redirect\"\u003eRobertiidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) †\u003cb\u003e\u003ca href\u003d\"/wiki/Pristerodontia\" title\u003d\"Pristerodontia\"\u003ePristerodontia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dAulacocephalodontidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Aulacocephalodontidae (page does not exist)\"\u003eAulacocephalodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Dicynodontidae\" title\u003d\"Dicynodontidae\" class\u003d\"mw-redirect\"\u003eDicynodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Kannemeyeriidae\" title\u003d\"Kannemeyeriidae\"\u003eKannemeyeriidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Lystrosauridae\" title\u003d\"Lystrosauridae\"\u003eLystrosauridae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dOudenodontidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Oudenodontidae (page does not exist)\"\u003eOudenodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dPristerodontidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Pristerodontidae (page does not exist)\"\u003ePristerodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dShanisiodontidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Shanisiodontidae (page does not exist)\"\u003eShanisiodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Stahleckeriidae\" title\u003d\"Stahleckeriidae\" class\u003d\"mw-redirect\"\u003eStahleckeriidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003cb\u003e\u003ca href\u003d\"/wiki/Theriodont\" title\u003d\"Theriodont\"\u003eTheriodontia\u003c/a\u003e\u003c/b\u003e \u003ca href\u003d\"/wiki/Paraphyletic\" title\u003d\"Paraphyletic\" class\u003d\"mw-redirect\"\u003e*\u003c/a\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003cb\u003e\u003ca href\u003d\"/wiki/Gorgonopsia\" title\u003d\"Gorgonopsia\"\u003eGorgonopsia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Gorgonopsia\" title\u003d\"Gorgonopsia\"\u003eGorgonopsidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003cb\u003e\u003ca href\u003d\"/w/index.php?title\u003dEutheriodontia\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Eutheriodontia (page does not exist)\"\u003eEutheriodontia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder †\u003cb\u003e\u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003eTherocephalia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Lycosuchidae\" title\u003d\"Lycosuchidae\" class\u003d\"mw-redirect\"\u003eLycosuchidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) †\u003cb\u003e\u003ca href\u003d\"/wiki/Scylacosauria\" title\u003d\"Scylacosauria\"\u003eScylacosauria\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Scylacosaurus\" title\u003d\"Scylacosaurus\"\u003eScylacosauridae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInfraorder †\u003cb\u003e\u003ca href\u003d\"/wiki/Eutherocephalia\" title\u003d\"Eutherocephalia\"\u003eEutherocephalia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Hofmeyriidae\" title\u003d\"Hofmeyriidae\"\u003eHofmeyriidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Moschorhinidae\" title\u003d\"Moschorhinidae\" class\u003d\"mw-redirect\"\u003eMoschorhinidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dWhaitsiidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Whaitsiidae (page does not exist)\"\u003eWhaitsiidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuperfamily \u003cb\u003e\u003ca href\u003d\"/w/index.php?title\u003dBauriodea\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Bauriodea (page does not exist)\"\u003eBauriodea\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Bauriidae\" title\u003d\"Bauriidae\"\u003eBauriidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dEriciolacteridae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Ericiolacteridae (page does not exist)\"\u003eEriciolacteridae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dIctidosuchidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Ictidosuchidae (page does not exist)\"\u003eIctidosuchidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dIctidosuchopsidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Ictidosuchopsidae (page does not exist)\"\u003eIctidosuchopsidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dLycideopsidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Lycideopsidae (page does not exist)\"\u003eLycideopsidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eSuborder \u003cb\u003e\u003ca href\u003d\"/wiki/Cynodontia\" title\u003d\"Cynodontia\" class\u003d\"mw-redirect\"\u003eCynodontia\u003c/a\u003e\u003c/b\u003e \u003ca href\u003d\"/wiki/Paraphyletic\" title\u003d\"Paraphyletic\" class\u003d\"mw-redirect\"\u003e*\u003c/a\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Dviniidae\" title\u003d\"Dviniidae\" class\u003d\"mw-redirect\"\u003eDviniidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Procynosuchidae\" title\u003d\"Procynosuchidae\"\u003eProcynosuchidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) \u003cb\u003e\u003ca href\u003d\"/wiki/Epicynodontia\" title\u003d\"Epicynodontia\" class\u003d\"mw-redirect\"\u003eEpicynodontia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Galesauridae\" title\u003d\"Galesauridae\"\u003eGalesauridae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Thrinaxodontidae\" title\u003d\"Thrinaxodontidae\" class\u003d\"mw-redirect\"\u003eThrinaxodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eInfraorder \u003cb\u003e\u003ca href\u003d\"/wiki/Eucynodontia\" title\u003d\"Eucynodontia\"\u003eEucynodontia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) †\u003cb\u003e\u003ca href\u003d\"/w/index.php?title\u003dCygnognathia\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Cygnognathia (page does not exist)\"\u003eCygnognathia\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Cynognathidae\" title\u003d\"Cynognathidae\" class\u003d\"mw-redirect\"\u003eCynognathidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dDiademodontidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Diademodontidae (page does not exist)\"\u003eDiademodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Traversodontidae\" title\u003d\"Traversodontidae\"\u003eTraversodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Trirachodontidae\" title\u003d\"Trirachodontidae\"\u003eTrirachodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Tritylodontidae\" title\u003d\"Tritylodontidae\"\u003eTritylodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) \u003ca href\u003d\"/wiki/Probainognathia\" title\u003d\"Probainognathia\"\u003eProbainognathia\u003c/a\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/w/index.php?title\u003dChinquodontidae\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Chinquodontidae (page does not exist)\"\u003eChinquodontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Probainognathidae\" title\u003d\"Probainognathidae\"\u003eProbainognathidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e(unranked) †\u003ca href\u003d\"/wiki/Ictidosauria\" title\u003d\"Ictidosauria\" class\u003d\"mw-redirect\"\u003eIctidosauria\u003c/a\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eFamily †\u003ca href\u003d\"/wiki/Tritheledontidae\" title\u003d\"Tritheledontidae\"\u003eTritheledontidae\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003cb\u003e(unranked) \u003ca href\u003d\"/wiki/Mammaliformes\" title\u003d\"Mammaliformes\" class\u003d\"mw-redirect\"\u003eMammaliformes\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eClass \u003cb\u003e\u003ca href\u003d\"/wiki/Mammal\" title\u003d\"Mammal\"\u003eMammalia\u003c/a\u003e\u003c/b\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch3\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d5\" title\u003d\"Edit section: Phylogeny\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"Phylogeny\"\u003ePhylogeny\u003c/span\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"font-size:70%;line-height:85%\"\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u003ca href\u003d\"/wiki/Synapsida\" title\u003d\"Synapsida\" class\u003d\"mw-redirect\"\u003eSynapsida\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;\u003ca href\u003d\"/wiki/Sphenacodontia\" title\u003d\"Sphenacodontia\"\u003eSphenacodontia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ca href\u003d\"/wiki/Sphenacodontidae\" title\u003d\"Sphenacodontidae\"\u003eSphenacodontidae\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;\u003cb\u003eTherapsida\u003c/b\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ci\u003e\u003ca href\u003d\"/wiki/Tetraceratops\" title\u003d\"Tetraceratops\"\u003eTetraceratops\u003c/a\u003e\u003c/i\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;†\u003ca href\u003d\"/wiki/Biarmosuchia\" title\u003d\"Biarmosuchia\"\u003eBiarmosuchia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ca href\u003d\"/wiki/Eotitanosuchidae\" title\u003d\"Eotitanosuchidae\"\u003eEotitanosuchidae\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ca href\u003d\"/wiki/Phthinosuchus\" title\u003d\"Phthinosuchus\"\u003ePhthinosuchidae\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;\u003cb\u003e\u003ca href\u003d\"/wiki/Eutherapsida\" title\u003d\"Eutherapsida\" class\u003d\"mw-redirect\"\u003eEutherapsida\u003c/a\u003e\u003c/b\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;†\u003ca href\u003d\"/wiki/Dinocephalia\" title\u003d\"Dinocephalia\"\u003eDinocephalia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ca href\u003d\"/wiki/Anteosauria\" title\u003d\"Anteosauria\" class\u003d\"mw-redirect\"\u003eAnteosauria\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ca href\u003d\"/wiki/Tapinocephalia\" title\u003d\"Tapinocephalia\"\u003eTapinocephalia\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;\u003cb\u003e\u003ca href\u003d\"/wiki/Neotherapsida\" title\u003d\"Neotherapsida\"\u003eNeotherapsida\u003c/a\u003e\u003c/b\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;†\u003ca href\u003d\"/wiki/Anomodontia\" title\u003d\"Anomodontia\" class\u003d\"mw-redirect\"\u003eAnomodontia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ca href\u003d\"/wiki/Dromasauria\" title\u003d\"Dromasauria\"\u003eDromasauria\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ca href\u003d\"/wiki/Dicynodontia\" title\u003d\"Dicynodontia\" class\u003d\"mw-redirect\"\u003eDicynodontia\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;\u003ca href\u003d\"/wiki/Theriodontia\" title\u003d\"Theriodontia\" class\u003d\"mw-redirect\"\u003eTheriodontia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;†\u003ca href\u003d\"/wiki/Gorgonopsia\" title\u003d\"Gorgonopsia\"\u003eGorgonopsia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ci\u003e\u003ca href\u003d\"/wiki/Lycaenops\" title\u003d\"Lycaenops\"\u003eLycaenops\u003c/a\u003e\u003c/i\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ci\u003e\u003ca href\u003d\"/wiki/Inostrancevia\" title\u003d\"Inostrancevia\"\u003eInostrancevia\u003c/a\u003e\u003c/i\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;\u003cb\u003e\u003ca href\u003d\"/w/index.php?title\u003dEutheriodontia\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Eutheriodontia (page does not exist)\"\u003eEutheriodontia\u003c/a\u003e\u003c/b\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;†\u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003eTherocephalia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;†\u003ca href\u003d\"/wiki/Eutherocephalia\" title\u003d\"Eutherocephalia\"\u003eEutherocephalia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e†\u003ci\u003e\u003ca href\u003d\"/wiki/Bauria\" title\u003d\"Bauria\"\u003eBauria\u003c/a\u003e\u003c/i\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom: 0;\" valign\u003d\"top\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"border-left:1px solid black; border-top: 0; border-right: 0; border-bottom:1px solid black;padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cspan style\u003d\"white-space:nowrap\"\u003e\u0026#160;\u003ca href\u003d\"/wiki/Cynodontia\" title\u003d\"Cynodontia\" class\u003d\"mw-redirect\"\u003eCynodontia\u003c/a\u003e\u0026#160;\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" cellpadding\u003d\"0\" border\u003d\"0\" style\u003d\"\"\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"width:1.5em; border-bottom:1px solid black; border-left: 0; border-top: 0; border-right: 0; padding:0 0.2em;\" valign\u003d\"bottom\" align\u003d\"center\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd rowspan\u003d\"2\" style\u003d\"border: 0; padding: 0;\"\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"/wiki/Mammalia\" title\u003d\"Mammalia\" class\u003d\"mw-redirect\"\u003eMammalia\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd valign\u003d\"top\" style\u003d\"border: 0; padding: 0;\"\u003e\u003cbr /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d6\" title\u003d\"Edit section: See also\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"See_also\"\u003eSee also\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Vertebrate_paleontology\" title\u003d\"Vertebrate paleontology\"\u003eVertebrate paleontology\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Evolution_of_mammals\" title\u003d\"Evolution of mammals\"\u003eEvolution of mammals\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"/wiki/Timeline_of_evolution\" title\u003d\"Timeline of evolution\"\u003eTimeline of evolution\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d7\" title\u003d\"Edit section: Notes\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"Notes\"\u003eNotes\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"reflist references-column-width\" style\u003d\"-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;\"\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003col class\u003d\"references\"\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-romer1933-0\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-romer1933_0-0\"\u003e^\u003c/a\u003e\u003c/b\u003e \u003cspan class\u003d\"citation book\"\u003eRomer, A.S. (1933). \u003ci\u003eVertebrate Paleontology\u003c/i\u003e. University of Chicago Press.\u003c/span\u003e\u003cspan class\u003d\"Z3988\" title\u003d\"ctx_ver\u003dZ39.88-2004\u0026amp;rft_val_fmt\u003dinfo%3Aofi%2Ffmt%3Akev%3Amtx%3Abook\u0026amp;rft.genre\u003dbook\u0026amp;rft.btitle\u003dVertebrate+Paleontology\u0026amp;rft.aulast\u003dRomer\u0026amp;rft.aufirst\u003dA.S.\u0026amp;rft.au\u003dRomer%2C%26%2332%3BA.S.\u0026amp;rft.date\u003d1933\u0026amp;rft.pub\u003dUniversity+of+Chicago+Press\u0026amp;rfr_id\u003dinfo:sid/en.wikipedia.org:Therapsida\"\u003e\u003cspan style\u003d\"display: none;\"\u003e\u0026#160;\u003c/span\u003e\u003c/span\u003e, 3rd ed., 1966.\u003c/li\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-1\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-1\"\u003e^\u003c/a\u003e\u003c/b\u003e M.Laurin \u0026amp; R.R. Reisz. 1996. The osteology and relationships of \u003ci\u003eTetraceratops insignis\u003c/i\u003e, the oldest known therapsid. \u003ci\u003eJournal of Vertebrate Paleontology\u003c/i\u003e 16(1): 95-102.\u003c/li\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-2\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-2\"\u003e^\u003c/a\u003e\u003c/b\u003e J. Liu, B. Rubidge \u0026amp; J. Li, New basal synapsid supports Laurasian origin for therapsids, 2009, Acta Palaeontol. Pol., 54 (3): 393-400\u003c/li\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"cite_note-3\"\u003e\u003cb\u003e\u003ca href\u003d\"#cite_ref-3\"\u003e^\u003c/a\u003e\u003c/b\u003e \u003ca rel\u003d\"nofollow\" class\u003d\"external autonumber\" href\u003d\"http://tolweb.org/accessory/Synapsid_Classification_\u0026amp;_Apomorphies?acc_id\u003d466\"\u003e[1]\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d8\" title\u003d\"Edit section: References\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"References\"\u003eReferences\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eBenton, M.J. (2004). \u003ci\u003eVertebrate Paleontology\u003c/i\u003e. 3rd ed. Blackwell Science Ltd\u003c/li\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eCarroll, R.L. (1988). \u003ci\u003eVertebrate Paleontology \u0026amp; Evolution\u003c/i\u003e. W.H. Freeman \u0026amp; Company, NY\u003c/li\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eKemp, T.S. (2005). \u003ci\u003eThe origin and evolution of mammals\u003c/i\u003e. Oxford University Press\u003c/li\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003eRomer, A.S. (1966). \u003ci\u003eVertebrate Paleontology\u003c/i\u003e. University of Chicago Press, 1933; 3rd ed.\u003c/li\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ch2\u003e\u003cspan class\u003d\"editsection\"\u003e[\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\u0026amp;section\u003d9\" title\u003d\"Edit section: External links\"\u003eedit\u003c/a\u003e]\u003c/span\u003e \u003cspan class\u003d\"mw-headline\" id\u003d\"External_links\"\u003eExternal links\u003c/span\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable class\u003d\"metadata mbox-small plainlinks\" style\u003d\"border:1px solid #aaa; background-color:#f9f9f9;\"\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"mbox-image\"\u003e\u003cimg alt\u003d\"\" src\u003d\"//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikispecies-logo.svg/34px-Wikispecies-logo.svg.png\" width\u003d\"34\" height\u003d\"40\" /\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"mbox-text\" style\u003d\"\"\u003e\u003ca href\u003d\"/wiki/Wikispecies\" title\u003d\"Wikispecies\"\u003eWikispecies\u003c/a\u003e has information related to: \u003ci\u003e\u003cb\u003e\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"//species.wikimedia.org/wiki/Special:Search/Therapsida\"\u003eTherapsida\u003c/a\u003e\u003c/b\u003e\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\"\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://tolweb.org/tree?group\u003dTherapsida\"\u003eTherapsida: Mammals and extinct relatives\u003c/a\u003e\" \u003ci\u003eTree of Life\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli\u003e\"\u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"http://www.palaeos.com/Vertebrates/Units/400Therapsida/400.000.html\"\u003eTherapsida: overview\u003c/a\u003e\" \u003ci\u003ePalaeos\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable class\u003d\"navbox\" cellspacing\u003d\"0\" style\u003d\";\"\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"padding:2px;\"\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" class\u003d\"nowraplinks collapsible autocollapse\" style\u003d\"width:100%;background:transparent;color:inherit;;\"\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cth style\u003d\";\" colspan\u003d\"2\" class\u003d\"navbox-title\"\u003e\u003cspan style\u003d\"float:left;width:6em;text-align:left;\"\u003e\u003cspan class\u003d\"noprint plainlinks navbar\" style\u003d\"\"\u003e\u003cspan style\u003d\"white-space:nowrap;word-spacing:-.12em;\"\u003e\u003ca href\u003d\"/wiki/Template:Therapsida\" title\u003d\"Template:Therapsida\"\u003e\u003cspan style\u003d\";;background:none transparent;border:none;font-size:100%;\" title\u003d\"View this template\"\u003ev\u003c/span\u003e\u003c/a\u003e \u003cspan style\u003d\";;background:none transparent;border:none;font-size:100%;\"\u003e\u003cb\u003e·\u003c/b\u003e\u003c/span\u003e \u003ca href\u003d\"/w/index.php?title\u003dTemplate_talk:Therapsida\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Template talk:Therapsida (page does not exist)\"\u003e\u003cspan style\u003d\";;background:none transparent;border:none;font-size:100%;\" title\u003d\"Discuss this template\"\u003ed\u003c/span\u003e\u003c/a\u003e \u003cspan style\u003d\";;background:none transparent;border:none;font-size:100%;\"\u003e\u003cb\u003e·\u003c/b\u003e\u003c/span\u003e \u003ca rel\u003d\"nofollow\" class\u003d\"external text\" href\u003d\"//en.wikipedia.org/w/index.php?title\u003dTemplate:Therapsida\u0026amp;action\u003dedit\"\u003e\u003cspan style\u003d\";;background:none transparent;border:none;font-size:100%;\" title\u003d\"Edit this template\"\u003ee\u003c/span\u003e\u003c/a\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class\u003d\"\" style\u003d\"font-size:110%;\"\u003eMajor groups of \u003cstrong class\u003d\"selflink\"\u003etherapsids\u003c/strong\u003e\u003c/span\u003e\u003c/th\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px;\"\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-abovebelow\" style\u003d\";\" colspan\u003d\"2\"\u003eKingdom: \u003ca href\u003d\"/wiki/Animal\" title\u003d\"Animal\"\u003eAnimalia\u003c/a\u003e\u0026#160;\u003cspan style\u003d\"font-weight:bold;\"\u003e·\u003c/span\u003e  Phylum: \u003ca href\u003d\"/wiki/Chordate\" title\u003d\"Chordate\"\u003eChordata\u003c/a\u003e\u0026#160;\u003cspan style\u003d\"font-weight:bold;\"\u003e·\u003c/span\u003e  Class: \u003ca href\u003d\"/wiki/Synapsida\" title\u003d\"Synapsida\" class\u003d\"mw-redirect\"\u003eSynapsida\u003c/a\u003e\u0026#160;\u003cspan style\u003d\"font-weight:bold;\"\u003e·\u003c/span\u003e  Order: \u003cstrong class\u003d\"selflink\"\u003eTherapsida\u003c/strong\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px;\"\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";;\"\u003eBasal therapsids\u003c/td\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-odd\"\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003ci\u003e\u003ca href\u003d\"/wiki/Raranimus\" title\u003d\"Raranimus\"\u003eRaranimus\u003c/a\u003e\u003c/i\u003e\u0026#160;\u003cspan style\u003d\"font-weight:bold;\"\u003e·\u003c/span\u003e  \u003ci\u003e\u003ca href\u003d\"/wiki/Tetraceratops\" title\u003d\"Tetraceratops\"\u003eTetraceratops\u003c/a\u003e\u003c/i\u003e\u0026#160;\u003cspan style\u003d\"font-weight:bold;\"\u003e·\u003c/span\u003e  \u003ca href\u003d\"/wiki/Biarmosuchia\" title\u003d\"Biarmosuchia\"\u003eBiarmosuchia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px\"\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";;\"\u003e\u003ca href\u003d\"/wiki/Eutherapsida\" title\u003d\"Eutherapsida\" class\u003d\"mw-redirect\"\u003eEutherapsida\u003c/a\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-even\"\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" class\u003d\"nowraplinks navbox-subgroup\" style\u003d\"width:100%;;;;\"\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/wiki/Dinocephalia\" title\u003d\"Dinocephalia\"\u003eDinocephalia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-odd\"\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003ca href\u003d\"/wiki/Anteosaur\" title\u003d\"Anteosaur\"\u003eAnteosauria\u003c/a\u003e\u0026#160;\u003cspan style\u003d\"font-weight:bold;\"\u003e·\u003c/span\u003e  \u003ca href\u003d\"/wiki/Tapinocephalia\" title\u003d\"Tapinocephalia\"\u003eTapinocephalia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px\"\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/wiki/Neotherapsida\" title\u003d\"Neotherapsida\"\u003eNeotherapsida\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-even\"\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" class\u003d\"nowraplinks navbox-subgroup\" style\u003d\"width:100%;;;;\"\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/wiki/Anomodont\" title\u003d\"Anomodont\"\u003eAnomodontia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-odd\"\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003ca href\u003d\"/wiki/Dicynodont\" title\u003d\"Dicynodont\"\u003eDicynodontia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px\"\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/wiki/Theriodont\" title\u003d\"Theriodont\"\u003eTheriodontia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-even\"\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" class\u003d\"nowraplinks navbox-subgroup\" style\u003d\"width:100%;;;;\"\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/wiki/Gorgonopsia\" title\u003d\"Gorgonopsia\"\u003eGorgonopsia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-odd\"\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003ca href\u003d\"/wiki/Gorgonopsia\" title\u003d\"Gorgonopsia\"\u003eGorgonopsidae\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px\"\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dEutheriodontia\u0026amp;action\u003dedit\u0026amp;redlink\u003d1\" class\u003d\"new\" title\u003d\"Eutheriodontia (page does not exist)\"\u003eEutheriodontia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-even\"\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctable cellspacing\u003d\"0\" class\u003d\"nowraplinks navbox-subgroup\" style\u003d\"width:100%;;;;\"\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/wiki/Therocephalia\" title\u003d\"Therocephalia\"\u003eTherocephalia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-odd\"\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003ca href\u003d\"/wiki/Eutherocephalia\" title\u003d\"Eutherocephalia\"\u003eEutherocephalia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px\"\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";padding-left:0em;padding-right:0em;;\"\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.75em;\"\u003e\u003ca href\u003d\"/wiki/Cynodont\" title\u003d\"Cynodont\"\u003eCynodontia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-even\"\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003ca href\u003d\"/wiki/Mammalia\" title\u003d\"Mammalia\" class\u003d\"mw-redirect\"\u003eMammalia\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr style\u003d\"height:2px\"\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd class\u003d\"navbox-group\" style\u003d\";;\"\u003eRelated categories\u003c/td\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003ctd style\u003d\"text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;;;\" class\u003d\"navbox-list navbox-odd\"\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv style\u003d\"padding:0em 0.25em\"\u003e\u003ca href\u003d\"/wiki/Category:Synapsids\" title\u003d\"Category:Synapsids\"\u003eSynapsids\u003c/a\u003e\u0026#160;\u003cspan style\u003d\"font-weight:bold;\"\u003e·\u003c/span\u003e  \u003ca href\u003d\"/wiki/Category:Therapsids\" title\u003d\"Category:Therapsids\"\u003eTherapsids\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "rlrh"
        },
        "content": "NewPP limit report"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Preprocessor node count: 44698/1000000"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Post-expand include size: 597527/2048000 bytes"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Template argument size: 640596/2048000 bytes"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Expensive parser function count: 7/500"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "rlrh"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- Saved in parser cache with key enwiki:pcache:idhash:204092-0!*!0!!en!4!* and timestamp 20111102143352 --\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e\t\t\t\t\u003c!-- /bodycontent --\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003c!-- printfooter --\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv class\u003d\"printfooter\"\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\tRetrieved from \"\u003ca href\u003d\"http://en.wikipedia.org/w/index.php?title\u003dTherapsida\u0026amp;oldid\u003d441204315\"\u003ehttp://en.wikipedia.org/w/index.php?title\u003dTherapsida\u0026amp;oldid\u003d441204315\u003c/a\u003e\"\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c!-- /printfooter --\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\u003c!-- catlinks --\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\u0027catlinks\u0027 class\u003d\u0027catlinks\u0027\u003e\u003cdiv id\u003d\"mw-normal-catlinks\"\u003e\u003ca href\u003d\"/wiki/Special:Categories\" title\u003d\"Special:Categories\"\u003eCategories\u003c/a\u003e: \u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Category:Synapsids\" title\u003d\"Category:Synapsids\"\u003eSynapsids\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Category:Therapsids\" title\u003d\"Category:Therapsids\"\u003eTherapsids\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv id\u003d\"mw-hidden-catlinks\" class\u003d\"mw-hidden-cats-hidden\"\u003eHidden categories: \u003cul\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Category:Articles_with_%27species%27_microformats\" title\u003d\"Category:Articles with \u0027species\u0027 microformats\"\u003eArticles with \u0027species\u0027 microformats\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Category:All_articles_with_unsourced_statements\" title\u003d\"Category:All articles with unsourced statements\"\u003eAll articles with unsourced statements\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href\u003d\"/wiki/Category:Articles_with_unsourced_statements_from_August_2007\" title\u003d\"Category:Articles with unsourced statements from August 2007\"\u003eArticles with unsourced statements from August 2007\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\t\t\t\t\u003c!-- /catlinks --\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\t\u003cdiv class\u003d\"visualClear\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c!-- debughtml --\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\u003c!-- /debughtml --\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c!-- /bodyContent --\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- /content --\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- header --\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"mw-head\" class\u003d\"noprint\"\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- 0 --\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"p-personal\" class\u003d\"\"\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003ePersonal tools\u003c/h5\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cul\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cli id\u003d\"pt-login\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:UserLogin\u0026amp;returnto\u003dTherapsida\" title\u003d\"You are encouraged to log in; however, it is not mandatory. [o]\" accesskey\u003d\"o\"\u003eLog in / create account\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /0 --\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"left-navigation\"\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- 0 --\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"p-namespaces\" class\u003d\"vectorTabs\"\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003eNamespaces\u003c/h5\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cul\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli  id\u003d\"ca-nstab-main\" class\u003d\"selected\"\u003e\u003cspan\u003e\u003ca href\u003d\"/wiki/Therapsida\"  title\u003d\"View the content page [c]\" accesskey\u003d\"c\"\u003eArticle\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli  id\u003d\"ca-talk\"\u003e\u003cspan\u003e\u003ca href\u003d\"/wiki/Talk:Therapsida\"  title\u003d\"Discussion about the content page [t]\" accesskey\u003d\"t\"\u003eDiscussion\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /0 --\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- 1 --\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"p-variants\" class\u003d\"vectorMenu emptyPortlet\"\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003ch5\u003e\u003cspan\u003eVariants\u003c/span\u003e\u003ca href\u003d\"#\"\u003e\u003c/a\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cdiv class\u003d\"menu\"\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/div\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /1 --\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"right-navigation\"\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- 0 --\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"p-views\" class\u003d\"vectorTabs\"\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003eViews\u003c/h5\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cul\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"ca-view\" class\u003d\"selected\"\u003e\u003cspan\u003e\u003ca href\u003d\"/wiki/Therapsida\" \u003eRead\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"ca-edit\"\u003e\u003cspan\u003e\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dedit\"  title\u003d\"You can edit this page. \u0026#10;Please use the preview button before saving. [e]\" accesskey\u003d\"e\"\u003eEdit\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"ca-history\" class\u003d\"collapsible\"\u003e\u003cspan\u003e\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;action\u003dhistory\"  title\u003d\"Past versions of this page [h]\" accesskey\u003d\"h\"\u003eView history\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /0 --\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- 1 --\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"p-cactions\" class\u003d\"vectorMenu emptyPortlet\"\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003e\u003cspan\u003eActions\u003c/span\u003e\u003ca href\u003d\"#\"\u003e\u003c/a\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cdiv class\u003d\"menu\"\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/div\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /1 --\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- 2 --\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv id\u003d\"p-search\"\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003e\u003clabel for\u003d\"searchInput\"\u003eSearch\u003c/label\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cform action\u003d\"/w/index.php\" id\u003d\"searchform\"\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cinput type\u003d\u0027hidden\u0027 name\u003d\"title\" value\u003d\"Special:Search\"/\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003cdiv id\u003d\"simpleSearch\"\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cinput type\u003d\"text\" name\u003d\"search\" value\u003d\"\" title\u003d\"Search Wikipedia [f]\" accesskey\u003d\"f\" id\u003d\"searchInput\" /\u003e\t\t\t\t\t\t\u003cbutton type\u003d\"submit\" name\u003d\"button\" title\u003d\"Search Wikipedia for this text\" id\u003d\"searchButton\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/vector/images/search-ltr.png?303-4\" alt\u003d\"Search\" /\u003e\u003c/button\u003e\t\t\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/form\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /2 --\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- /header --\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- panel --\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cdiv id\u003d\"mw-panel\" class\u003d\"noprint\"\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c!-- logo --\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cdiv id\u003d\"p-logo\"\u003e\u003ca style\u003d\"background-image: url(//upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);\" href\u003d\"/wiki/Main_Page\"  title\u003d\"Visit the main page\"\u003e\u003c/a\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c!-- /logo --\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- navigation --\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"portal\" id\u003d\u0027p-navigation\u0027\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003eNavigation\u003c/h5\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-mainpage-description\"\u003e\u003ca href\u003d\"/wiki/Main_Page\" title\u003d\"Visit the main page [z]\" accesskey\u003d\"z\"\u003eMain page\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-contents\"\u003e\u003ca href\u003d\"/wiki/Portal:Contents\" title\u003d\"Guides to browsing Wikipedia\"\u003eContents\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-featuredcontent\"\u003e\u003ca href\u003d\"/wiki/Portal:Featured_content\" title\u003d\"Featured content – the best of Wikipedia\"\u003eFeatured content\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-currentevents\"\u003e\u003ca href\u003d\"/wiki/Portal:Current_events\" title\u003d\"Find background information on current events\"\u003eCurrent events\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-randompage\"\u003e\u003ca href\u003d\"/wiki/Special:Random\" title\u003d\"Load a random article [x]\" accesskey\u003d\"x\"\u003eRandom article\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-sitesupport\"\u003e\u003ca href\u003d\"//wikimediafoundation.org/wiki/Special:Landingcheck?landing_page\u003dWMFJA085\u0026amp;language\u003den\u0026amp;utm_source\u003ddonate\u0026amp;utm_medium\u003dsidebar\u0026amp;utm_campaign\u003d20101204SB002\" rel\u003d\"nofollow\" title\u003d\"Support us\"\u003eDonate to Wikipedia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/div\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /navigation --\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- SEARCH --\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /SEARCH --\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- interaction --\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"portal\" id\u003d\u0027p-interaction\u0027\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003eInteraction\u003c/h5\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-help\"\u003e\u003ca href\u003d\"/wiki/Help:Contents\" title\u003d\"Guidance on how to use and edit Wikipedia\"\u003eHelp\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-aboutsite\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:About\" title\u003d\"Find out about Wikipedia\"\u003eAbout Wikipedia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-portal\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:Community_portal\" title\u003d\"About the project, what you can do, where to find things\"\u003eCommunity portal\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-recentchanges\"\u003e\u003ca href\u003d\"/wiki/Special:RecentChanges\" title\u003d\"A list of recent changes in the wiki [r]\" accesskey\u003d\"r\"\u003eRecent changes\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"n-contact\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:Contact_us\" title\u003d\"How to contact Wikipedia\"\u003eContact Wikipedia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/div\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /interaction --\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- TOOLBOX --\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"portal\" id\u003d\u0027p-tb\u0027\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003eToolbox\u003c/h5\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"t-whatlinkshere\"\u003e\u003ca href\u003d\"/wiki/Special:WhatLinksHere/Therapsida\" title\u003d\"List of all English Wikipedia pages containing links to this page [j]\" accesskey\u003d\"j\"\u003eWhat links here\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"t-recentchangeslinked\"\u003e\u003ca href\u003d\"/wiki/Special:RecentChangesLinked/Therapsida\" title\u003d\"Recent changes in pages linked from this page [k]\" accesskey\u003d\"k\"\u003eRelated changes\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"t-upload\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:Upload\" title\u003d\"Upload files [u]\" accesskey\u003d\"u\"\u003eUpload file\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"t-specialpages\"\u003e\u003ca href\u003d\"/wiki/Special:SpecialPages\" title\u003d\"A list of all special pages [q]\" accesskey\u003d\"q\"\u003eSpecial pages\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli id\u003d\"t-permalink\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;oldid\u003d441204315\" title\u003d\"Permanent link to this revision of the page\"\u003ePermanent link\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cli id\u003d\"t-cite\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:Cite\u0026amp;page\u003dTherapsida\u0026amp;id\u003d441204315\" title\u003d\"Information on how to cite this page\"\u003eCite this page\u003c/a\u003e\u003c/li\u003e\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/div\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /TOOLBOX --\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- coll-print_export --\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"portal\" id\u003d\u0027p-coll-print_export\u0027\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003ePrint/export\u003c/h5\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cul id\u003d\"collectionPortletList\"\u003e\u003cli id\u003d\"coll-create_a_book\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:Book\u0026amp;bookcmd\u003dbook_creator\u0026amp;referer\u003dTherapsida\" title\u003d\"Create a book or page collection\" rel\u003d\"nofollow\"\u003eCreate a book\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"coll-download-as-rl\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dSpecial:Book\u0026amp;bookcmd\u003drender_article\u0026amp;arttitle\u003dTherapsida\u0026amp;oldid\u003d441204315\u0026amp;writer\u003drl\" title\u003d\"Download a PDF version of this wiki page\" rel\u003d\"nofollow\"\u003eDownload as PDF\u003c/a\u003e\u003c/li\u003e\u003cli id\u003d\"t-print\"\u003e\u003ca href\u003d\"/w/index.php?title\u003dTherapsida\u0026amp;printable\u003dyes\" title\u003d\"Printable version of this page [p]\" accesskey\u003d\"p\"\u003ePrintable version\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\t\u003c/div\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /coll-print_export --\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- LANGUAGES --\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cdiv class\u003d\"portal\" id\u003d\u0027p-lang\u0027\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003ch5\u003eLanguages\u003c/h5\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003cdiv class\u003d\"body\"\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cul\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-ca\"\u003e\u003ca href\u003d\"//ca.wikipedia.org/wiki/Ter%C3%A0psid\"\u003eCatalà\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-cs\"\u003e\u003ca href\u003d\"//cs.wikipedia.org/wiki/Therapsidi\"\u003eČesky\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-de\"\u003e\u003ca href\u003d\"//de.wikipedia.org/wiki/Therapsiden\"\u003eDeutsch\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-el\"\u003e\u003ca href\u003d\"//el.wikipedia.org/wiki/%CE%98%CE%B7%CF%81%CE%B9%CE%B1%CF%88%CE%B9%CE%B4%CF%89%CF%84%CE%AC\"\u003eΕλληνικά\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-es\"\u003e\u003ca href\u003d\"//es.wikipedia.org/wiki/Therapsida\"\u003eEspañol\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-eu\"\u003e\u003ca href\u003d\"//eu.wikipedia.org/wiki/Therapsida\"\u003eEuskara\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-fr\"\u003e\u003ca href\u003d\"//fr.wikipedia.org/wiki/Therapsida\"\u003eFrançais\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-gl\"\u003e\u003ca href\u003d\"//gl.wikipedia.org/wiki/Therapsida\"\u003eGalego\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-id\"\u003e\u003ca href\u003d\"//id.wikipedia.org/wiki/Therapsida\"\u003eBahasa Indonesia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-it\"\u003e\u003ca href\u003d\"//it.wikipedia.org/wiki/Therapsida\"\u003eItaliano\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-he\"\u003e\u003ca href\u003d\"//he.wikipedia.org/wiki/%D7%AA%D7%A8%D7%90%D7%A4%D7%A1%D7%99%D7%93%D7%94\"\u003eעברית\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-la\"\u003e\u003ca href\u003d\"//la.wikipedia.org/wiki/Therapsida\"\u003eLatina\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-hu\"\u003e\u003ca href\u003d\"//hu.wikipedia.org/wiki/Therapsida\"\u003eMagyar\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-mk\"\u003e\u003ca href\u003d\"//mk.wikipedia.org/wiki/%D0%A2%D0%B5%D1%80%D0%B0%D0%BF%D1%81%D0%B8%D0%B4%D0%B8\"\u003eМакедонски\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-nl\"\u003e\u003ca href\u003d\"//nl.wikipedia.org/wiki/Therapsida\"\u003eNederlands\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-ja\"\u003e\u003ca href\u003d\"//ja.wikipedia.org/wiki/%E7%8D%A3%E5%BC%93%E9%A1%9E\"\u003e日本語\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-no\"\u003e\u003ca href\u003d\"//no.wikipedia.org/wiki/Therapsider\"\u003e‪Norsk (bokmål)‬\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-pl\"\u003e\u003ca href\u003d\"//pl.wikipedia.org/wiki/Terapsydy\"\u003ePolski\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-pt\"\u003e\u003ca href\u003d\"//pt.wikipedia.org/wiki/Therapsida\"\u003ePortuguês\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-ru\"\u003e\u003ca href\u003d\"//ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%80%D0%B0%D0%BF%D1%81%D0%B8%D0%B4%D1%8B\"\u003eРусский\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-simple\"\u003e\u003ca href\u003d\"//simple.wikipedia.org/wiki/Therapsid\"\u003eSimple English\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-sk\"\u003e\u003ca href\u003d\"//sk.wikipedia.org/wiki/Therapsida\"\u003eSlovenčina\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-fi\"\u003e\u003ca href\u003d\"//fi.wikipedia.org/wiki/Terapsidit\"\u003eSuomi\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-sv\"\u003e\u003ca href\u003d\"//sv.wikipedia.org/wiki/Therapsider\"\u003eSvenska\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003cli class\u003d\"interwiki-zh\"\u003e\u003ca href\u003d\"//zh.wikipedia.org/wiki/%E7%8D%B8%E5%AD%94%E7%9B%AE\"\u003e中文\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/div\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c!-- /LANGUAGES --\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- /panel --\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- footer --\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003cul id\u003d\"footer-info\"\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-info-lastmod\"\u003e This page was last modified on 24 July 2011 at 17:42.\u003cbr /\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-info-copyright\"\u003eText is available under the \u003ca rel\u003d\"license\" href\u003d\"//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License\"\u003eCreative Commons Attribution-ShareAlike License\u003c/a\u003e\u003ca rel\u003d\"license\" href\u003d\"//creativecommons.org/licenses/by-sa/3.0/\" style\u003d\"display:none;\"\u003e\u003c/a\u003e;"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "rlrh"
        },
        "content": "additional terms may apply."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "rlrh"
        },
        "content": "See \u003ca href\u003d\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003eTerms of use\u003c/a\u003e for details.\u003cbr/\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "rlrh"
        },
        "content": "Wikipedia\u0026reg; is a registered trademark of the \u003ca href\u003d\"//www.wikimediafoundation.org/\"\u003eWikimedia Foundation, Inc.\u003c/a\u003e, a non-profit organization.\u003cbr /\u003e\u003c/li\u003e\u003cli class\u003d\"noprint\"\u003e\u003ca class\u003d\u0027internal\u0027 href\u003d\"//en.wikipedia.org/wiki/Wikipedia:Contact_us\"\u003eContact us\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\u003cul id\u003d\"footer-places\"\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-privacy\"\u003e\u003ca href\u003d\"//wikimediafoundation.org/wiki/Privacy_policy\" title\u003d\"wikimedia:Privacy policy\"\u003ePrivacy policy\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-about\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:About\" title\u003d\"Wikipedia:About\"\u003eAbout Wikipedia\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-disclaimer\"\u003e\u003ca href\u003d\"/wiki/Wikipedia:General_disclaimer\" title\u003d\"Wikipedia:General disclaimer\"\u003eDisclaimers\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\t\u003cli id\u003d\"footer-places-mobileview\"\u003e\u003ca href\u003d\u0027/w/index.php?title\u003dTherapsida\u0026amp;useformat\u003dmobile\u0027\u003eMobile view\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\t\t\t\t\u003cul id\u003d\"footer-icons\" class\u003d\"noprint\"\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"footer-copyrightico\"\u003e"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ca href\u003d\"//wikimediafoundation.org/\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/images/wikimedia-button.png\" width\u003d\"88\" height\u003d\"31\" alt\u003d\"Wikimedia Foundation\"/\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/li\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003cli id\u003d\"footer-poweredbyico\"\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003ca href\u003d\"//www.mediawiki.org/\"\u003e\u003cimg src\u003d\"//bits.wikimedia.org/skins-1.18/common/images/poweredby_mediawiki_88x31.png\" alt\u003d\"Powered by MediaWiki\" width\u003d\"88\" height\u003d\"31\" /\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\u003c/li\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\u003c/ul\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\t\t\t\t\u003cdiv style\u003d\"clear:both\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c/div\u003e"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- /footer --\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- fixalpha --\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cscript type\u003d\"text/javascript\"\u003e if ( window.isMSIE55 ) fixalpha(); \u003c/script\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003c!-- /fixalpha --\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\t\u003cscript src\u003d\"//bits.wikimedia.org/en.wikipedia.org/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dskins.vector\u0026amp;only\u003dscripts\u0026amp;skin\u003dvector\u0026amp;*\" type\u003d\"text/javascript\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"text/javascript\"\u003eif ( window.mediaWiki ) {"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\tmw.loader.load([\"mediawiki.user\", \"mediawiki.util\", \"mediawiki.page.ready\", \"mediawiki.legacy.wikibits\", \"mediawiki.legacy.ajax\", \"mediawiki.legacy.mwsuggest\", \"ext.gadget.wmfFR2011Style\", \"ext.vector.collapsibleNav\", \"ext.vector.collapsibleTabs\", \"ext.vector.editWarning\", \"ext.vector.simpleSearch\", \"ext.UserBuckets\", \"ext.articleFeedback.startup\"]);"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript src\u003d\"/w/index.php?title\u003dSpecial:BannerController\u0026amp;cache\u003d/cn.js\u0026amp;303-4\" type\u003d\"text/javascript\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript src\u003d\"//bits.wikimedia.org/en.wikipedia.org/load.php?debug\u003dfalse\u0026amp;lang\u003den\u0026amp;modules\u003dsite\u0026amp;only\u003dscripts\u0026amp;skin\u003dvector\u0026amp;*\" type\u003d\"text/javascript\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003cscript type\u003d\"text/javascript\"\u003eif ( window.mediaWiki ) {"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\tmw.user.options.set({\"ccmeonemails\":0,\"cols\":80,\"date\":\"default\",\"diffonly\":0,\"disablemail\":0,\"disablesuggest\":0,\"editfont\":\"default\",\"editondblclick\":0,\"editsection\":1,\"editsectiononrightclick\":0,\"enotifminoredits\":0,\"enotifrevealaddr\":0,\"enotifusertalkpages\":1,\"enotifwatchlistpages\":0,\"extendwatchlist\":0,\"externaldiff\":0,\"externaleditor\":0,\"fancysig\":0,\"forceeditsummary\":0,\"gender\":\"unknown\",\"hideminor\":0,\"hidepatrolled\":0,\"highlightbroken\":1,\"imagesize\":2,\"justify\":0,\"math\":1,\"minordefault\":0,\"newpageshidepatrolled\":0,\"nocache\":0,\"noconvertlink\":0,\"norollbackdiff\":0,\"numberheadings\":0,\"previewonfirst\":0,\"previewontop\":1,\"quickbar\":5,\"rcdays\":7,\"rclimit\":50,\"rememberpassword\":0,\"rows\":25,\"searchlimit\":20,\"showhiddencats\":false,\"showjumplinks\":1,\"shownumberswatching\":1,\"showtoc\":1,\"showtoolbar\":1,\"skin\":\"vector\",\"stubthreshold\":0,\"thumbsize\":4,\"underline\":2,\"uselivepreview\":0,\"usenewrc\":0,\"watchcreations\":1,\"watchdefault\":0,\"watchdeletion\":0,\"watchlistdays\":3,\"watchlisthideanons\":0,"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\"watchlisthidebots\":0,\"watchlisthideliu\":0,\"watchlisthideminor\":0,\"watchlisthideown\":0,\"watchlisthidepatrolled\":0,\"watchmoves\":0,\"wllimit\":250,\"flaggedrevssimpleui\":1,\"flaggedrevsstable\":0,\"flaggedrevseditdiffs\":true,\"flaggedrevsviewdiffs\":false,\"vector-simplesearch\":1,\"useeditwarning\":1,\"vector-collapsiblenav\":1,\"usebetatoolbar\":1,\"usebetatoolbar-cgd\":1,\"wikilove-enabled\":1,\"variant\":\"en\",\"language\":\"en\",\"searchNs0\":true,\"searchNs1\":false,\"searchNs2\":false,\"searchNs3\":false,\"searchNs4\":false,\"searchNs5\":false,\"searchNs6\":false,\"searchNs7\":false,\"searchNs8\":false,\"searchNs9\":false,\"searchNs10\":false,\"searchNs11\":false,\"searchNs12\":false,\"searchNs13\":false,\"searchNs14\":false,\"searchNs15\":false,\"searchNs100\":false,\"searchNs101\":false,\"searchNs108\":false,\"searchNs109\":false,\"gadget-wmfFR2011Style\":1});;mw.user.tokens.set({\"editToken\":\"+\\\\\",\"watchToken\":false});;mw.loader.state({\"user.options\":\"ready\",\"user.tokens\":\"ready\"});"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "rlrh"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t/* cache key: enwiki:resourceloader:filter:minify-js:4:b41a86ec4e0fe8329bc3ce917e792339 */"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "rlrh"
        },
        "content": "}"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/script\u003e\u003cscript src\u003d\"//geoiplookup.wikimedia.org/\" type\u003d\"text/javascript\"\u003e\u003c/script\u003e\u003c!-- Served by mw58 in 0.062 secs. --\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\t\u003c/body\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "rlrh"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "rlrh": 1100
    }
  }
]
